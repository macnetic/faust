#include "faust_mat.h"
#include "faust_spmat.h"
#include "faust_params.h"
#include "hierarchical_fact.h"
#include "faust_timer.h"
#include "faust_core.h"
#include "faust_init_from_matio_params.h"
#include <string>



#include <iostream>
#include <iomanip>

/** \brief An example of using the hierarchical factorization of a dense matrix. from .mat file.
* An dense matrix is loaded from "@FAUST_TESTDATA_SRC_DIR@
* \param config_filename : a .mat (MATLAB file) configuration file which contains the parameter of the hierarchical algorithm (default launch with a predefined configuration called hier_fact)
* \param expected_lambda (optionnal) : compared the expected scalar of the factorisation with the computed one in the precision defined with epsilon
*\param epsilon : precision for the test of equality (default value 0.0001)
*/

typedef @TEST_FPP@ faust_real;

int main(int argc, char* argv[])
{	
	if (typeid(faust_real) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}
  
  	if (typeid(faust_real) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}
	
	
	string config_filename = "@FAUST_TESTDATA_SRC_DIR@/config_compared_hierarchical_fact.mat"; 
	
	if (argc >= 2)	
		config_filename = argv[1];
	

	faust_real expected_lambda = 0;	
	if (argc >= 3)
		expected_lambda = atof(argv[2]);
		
		
	faust_real epsilon = 0.0001;
	if (argc >= 4)
		epsilon = atof(argv[3]);
		
	

	
	faust_params<faust_real> params;
  init_params_from_matiofile(params,config_filename.c_str(),"params");
	params.Display();
	hierarchical_fact<faust_real> hier_fact(params);

	faust_timer t1;
	t1.start();

	hier_fact.compute_facts();

	t1.stop();
	#ifdef __COMPILE_TIMERS__
		hier_fact.print_timers();
		//hier_fact.print_prox_timers();
	#endif
	cout <<"total hierarchical fact = "<<t1.get_time()<<endl;

	vector<faust_spmat<faust_real> > facts;
	hier_fact.get_facts(facts);
	faust_real lambda = hier_fact.get_lambda();
	if (argc >= 3)
	{	
		if (std::abs(lambda - expected_lambda) > epsilon)
		{
			std::cerr<<"invalid lambda, must be equal to "<<std::setprecision(20)<<std::setprecision(20)<<expected_lambda<<" in the precision of "<<epsilon<<std::endl;
			std::cerr<<"current value is "<<std::setprecision(20)<<lambda<<std::endl;
			exit(EXIT_FAILURE); 
		}
		(facts[0]) *= hier_fact.get_lambda();
		faust_core<faust_real> hier_fact_core(facts);
		char nomFichier[100];
		string output_file="@FAUST_TESTOUTPUT_BIN_DIR@/hier_fact_factorisation.dat";
		hier_fact_core.print_file(output_file.c_str());
		
	}
	
	cout<<"lambda="<<std::setprecision(20)<<hier_fact.get_lambda()<<endl;


	return 0;
	
}
