#include "faust_cu_mat.h"
#include "faust_cu_spmat.h"
#include "faust_constraint_int.h"
#include "faust_constraint_real.h"
#include "faust_params.h"
#include "faust_params_palm.h"
#include "stopping_criterion.h"
#include "faust_init_from_matio_params.h"
#include "palm4MSA_cu.h"
#include "hierarchical_fact_cu.h"
#include "faust_cu_timer.h"
#include <iostream>
#include <iomanip>
#include <fstream>

using namespace std;
typedef @TEST_FPP@ faust_real;//faust floating point precision

int main(int argc, char* argv[])
{	
	if (typeid(faust_real) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}
  
  	if (typeid(faust_real) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}
	
	
	string config_filename = "@FAUST_TESTDATA_SRC_DIR@/config_compared_hierarchical_fact.mat"; 
	
	
	
	if (argc >= 2)
		config_filename = argv[1];
	
	size_t ind = config_filename.find_last_of(".");
	
	if(ind<=0 || ind>= config_filename.size())
	{
		cerr << "Le nom du fichier est incorrect" << endl;
		exit(EXIT_FAILURE);
	}
	string config_file_extension(config_filename, ind);
	if(config_file_extension.compare(".mat") != 0)
	{
		cerr << "Le nom du fichier doit se terminer par \".mat\"" << endl;
		exit(EXIT_FAILURE);
	}
	string config_file_body_tmp(config_filename, 0, ind);


	string config_file_body_dir, config_file_body_file;

	ind = config_file_body_tmp.find_last_of("/");
	if(ind<=0 || ind>= config_file_body_tmp.size())
	{
		config_file_body_dir = string("");
		config_file_body_file = config_file_body_tmp;
	}
	else
	{
		config_file_body_dir = string(config_file_body_tmp, 0, ind+1);
		config_file_body_file = string(config_file_body_tmp, ind+1);
	}
	
	
	
	faust_real expected_lambda = 0;	
	if (argc >= 3)
		expected_lambda = atof(argv[2]);
		
		
	faust_real epsilon = 0.0001;
	if (argc >= 4)
		epsilon = atof(argv[3]);
		
	

	// initialisation CUDA environment
	cublasHandle_t cublasHandle;
	cublasStatus_t cublasStat = cublasCreate(&cublasHandle);

	cusparseHandle_t cusparseHandle;
	cusparseStatus_t cusparseStat = cusparseCreate(&cusparseHandle);

	



		faust_params<faust_real> params; 
		init_params_from_matiofile(params,config_filename.c_str(),"params");
		params.Display();
		cout<<"launch"<<endl;	
		hierarchical_fact_cu<faust_real> hier_fact(params, cublasHandle, cusparseHandle);

		faust_cu_timer t1;
		t1.start();
     
		hier_fact.compute_facts();

		t1.stop();
		#ifdef __COMPILE_TIMERS__
		hier_fact.print_timers();
		#endif
		cout <<"total hierarchical fact = "<<t1.get_time()<<endl;

		vector<faust_cu_spmat<faust_real> > facts;
		hier_fact.get_facts(facts);
		(facts[0]) *= hier_fact.get_lambda();
		char nomFichier[100];
		for (int i=0 ; i<facts.size() ; i++)
		{
			sprintf(nomFichier, "@FAUST_TESTOUTPUT_BIN_DIR@/facts%d_cpp.dat",i);
			facts[i].print_file(nomFichier);
		}
		cout<<"lambda="<<std::setprecision(20)<<hier_fact.get_lambda()<<endl<<endl;

	
	cusparseDestroy(cusparseHandle);
	cublasDestroy(cublasHandle);


	return 0;
}
