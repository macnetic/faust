#!/bin/bash

echo "$0 -- FAµST Matlab wrapper post-install script START" | tee -a /tmp/log_faust_install

function inject_matlab_code_to_update_path
{
	# each line must contains the word faust (for filtering of old install lines)
	FILE=$1
	echo "% Edit at your own risk: automatically added by the FAuST installer ${CPACK_PACKAGE_VERSION} to enable access to the FAuST library, https://faust.inria.fr" >> "$FILE"
	echo "matfaust_path = which('matfaust.version');" >> "$FILE"
	echo "if(isempty(matfaust_path))" >> "$FILE"
	echo "addpath('"$FAUST_MATLAB_WRAPPER_PATH"')" >> "$FILE"
	echo "addpath(['"$FAUST_MATLAB_WRAPPER_PATH"' '/mex'])" >> "$FILE"
	echo "addpath(['"$FAUST_MATLAB_WRAPPER_PATH"' '/tools'])" >> "$FILE"
	echo "addpath(['"$FAUST_MATLAB_WRAPPER_PATH"' '/data'])" >> "$FILE"
	echo "matfaust.enable_gpu_mod('silent', true);end" >> "$FILE"
	echo "% End of code added by the FAuST installer" >> "$FILE"
}


function inject_matlab_code_to_update_user_paths
{
	# set path in user startup script
	#USR_STARTUP_FILE="$($MATLAB_BIN -nojvm -nodisplay -r "which startup;exit" | tail -n 2 | head -n 1)" # doesn't work into install script
	# even if it works in a normal script #TODO: debug
	# temporary solution (hard-coded paths)
	for USR_HOME in /Users/*
	do
		USER=${USR_HOME##*/}
		for USR_STARTUP_FILE in "$USR_HOME"/Documents/MATLAB/startup.m "$USR_HOME"/matlab/startup.m
		do
			#if [[ ! "${USR_STARTUP_FILE}" = "${STARTUP_FILE}" ]]
			#then
			if [[ -r "$USR_STARTUP_FILE" ]]
			then
				grep -i -v faust "$USR_STARTUP_FILE" > "${USR_STARTUP_FILE}.tmp" && mv "${USR_STARTUP_FILE}.tmp" "$USR_STARTUP_FILE"
				#echo "addpath(genpath('"$FAUST_MATLAB_WRAPPER_PATH"'))" >> "$USR_STARTUP_FILE"
				inject_matlab_code_to_update_path "$USR_STARTUP_FILE"
				chown $USER "$USR_STARTUP_FILE"
			fi
			#fi
		done
	done

}

MATLABRC_RUN_STARTUP_CMD="if(exist('@CMAKE_INSTALL_PREFIX@'))oldpwd=pwd;startup_path=fullfile(matlabroot,'toolbox','local');cd(startup_path);startup_found=which('startup');if(isempty(startup_found))rehash('toolbox');startup_found=which('startup');if(isempty(startup_found)) disp('Faust startup code can''t be executed -- script not found. Please consult the online documentation to resolve this issue.');else;startup;end;else;startup;end;cd(oldpwd);end % Edit at your own risk: automatically added by the FAuST installer to enable access to the FAuST library, https://faust.inria.fr";

# find matlab root path from the accessible matlab in the PATH
MATLAB_BIN=$(which matlab)
# in case of symlink resolve the real path
MATLAB_BIN=$(ls -l ${MATLAB_BIN})
echo LS_MATLAB_BIN=${MATLAB_BIN} | tee -a /tmp/log_faust_install
MATLAB_BIN=${MATLAB_BIN##* } # last word of the command #TODO: it doesn't work if space exists in the path
echo MATLAB_BIN_LAST_WORD=${MATLAB_BIN} | tee -a /tmp/log_faust_install
if [[ ! ${MATLAB_BIN} = "/"* ]]
then
	# not likely to happen but still
	# get the absolute path
	MATLAB_BIN="$(dirname $(which matlab))/${MATLAB_BIN}"
	if [[ ! ${MATLAB_BIN} = "/"* ]]
	then
		MATLAB_BIN="$PWD/${MATLAB_BIN}"
	fi
fi
echo MATLAB_BIN=${MATLAB_BIN} | tee -a /tmp/log_faust_install
# deduce MATLAB_ROOT
MATLAB_ROOT=${MATLAB_BIN%%bin/matlab}
if [[ ! -d "${MATLAB_ROOT}" ]]
then
	# if which method failed try this
	# find the more recent matlab version installed (sorted by year normally contained in folder name)
	MATLAB_ROOT=$(LC_ALL=C find /Applications/ -iname "MATLAB*" -maxdepth 2 | sort | tail -n 1)
	# LC_ALL is for avoiding different order depending on the user environment
fi
if [[ ! -d "${MATLAB_ROOT}" ]]
then
	echo "Can't find Matlab root dir. Add MATLAB_ROOT/bin to the PATH environment variable (of admin. user)." | tee -a /tmp/log_faust_install >&2
	echo "MATLAB_ROOT=${MATLAB_ROOT}" | tee -a /tmp/log_faust_install >&2
	echo "MATLAB_BIN=${MATLAB_BIN}" | tee -a /tmp/log_faust_install >&2
else
	echo "MATLAB_ROOT=$MATLAB_ROOT" | tee -a /tmp/log_faust_install
	MATLAB_BIN="${MATLAB_ROOT}/bin/matlab"
	echo "MATLAB_BIN=$MATLAB_BIN" | tee -a /tmp/log_faust_install
	# set path in system startup script
	STARTUP_DIR="${MATLAB_ROOT}/toolbox/local/"
	STARTUP_FILE=${STARTUP_DIR}/startup.m
	MATLABRC="${STARTUP_DIR}/matlabrc.m"
	[[ -r "$STARTUP_FILE" ]] && (grep -i -v faust "$STARTUP_FILE" > "${STARTUP_FILE}.tmp"; mv "${STARTUP_FILE}.tmp" "$STARTUP_FILE")
	FAUST_MATLAB_WRAPPER_PATH="@CMAKE_INSTALL_MATLAB_PREFIX@"
	#echo "addpath(genpath('"$FAUST_MATLAB_WRAPPER_PATH"'))" >> "$STARTUP_FILE"
	echo "MATLABRC=$MATLABRC" | tee -a /tmp/log_faust_install
	echo "STARTUP_FILE=$STARTUP_FILE" | tee -a /tmp/log_faust_install
	inject_matlab_code_to_update_path $STARTUP_FILE
	# add a line to force startup execution into matlabrc
	# except if the line is already in the file
	[[ -r "$MATLABRC" ]] && grep -q "$MATLABRC_RUN_STARTUP_CMD" "$MATLABRC"  || (echo "$MATLABRC_RUN_STARTUP_CMD" >> $MATLABRC)
	# inject_matlab_code_to_update_user_paths # disabled because it's too intrusive and maybe redundant
fi

echo "$0 -- FAµST Matlab wrapper post-install script END" | tee -a /tmp/log_faust_install
