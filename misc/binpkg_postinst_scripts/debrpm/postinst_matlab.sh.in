#!/bin/bash

function dirname_noerr
{
	[[ ! "$1" = /* ]] && return
	dirname "$1" 2>/dev/null
}

function inject_matlab_code_to_update_path
{
	# each line must contains the word faust (for filtering of old install lines)
	FILE=$1
	echo "matfaust_path = which('matfaust.version');" >> "$FILE"
	echo "if(isempty(matfaust_path))" >> "$FILE"
	echo "addpath('"$FAUST_MATLAB_WRAPPER_PATH"')" >> "$FILE"
	echo "addpath(['"$FAUST_MATLAB_WRAPPER_PATH"' '/mex'])" >> "$FILE"
	echo "addpath(['"$FAUST_MATLAB_WRAPPER_PATH"' '/tools'])" >> "$FILE"
	echo "addpath(['"$FAUST_MATLAB_WRAPPER_PATH"' '/data'])" >> "$FILE"
	echo "matfaust.enable_gpu_mod('silent', true);end" >> "$FILE"
	return $?
}

MATLABRC_RUN_STARTUP_CMD="if(exist('@CMAKE_INSTALL_PREFIX@'))oldpwd=pwd;startup_path=fullfile(matlabroot,'toolbox','local');cd(startup_path);startup_found=which('startup');if(isempty(startup_found))rehash('toolbox');startup_found=which('startup');if(isempty(startup_found)) disp('Faust startup code can''t be executed -- script not found. Please consult the online documentation to resolve this issue.');else;startup;end;else;startup;end;cd(oldpwd);end";

funtion inject_matlab_code_to_update_user_paths
{
	# try edit startup.m of all users (only when files exist)
	for USER_DIR in /home/*
	do
		USER=${USER_DIR##*/}
		for USR_STARTUP_FILE in  $USER_DIR/Documents/MATLAB/startup.m $USER_DIR/matlab/startup.m
		do
			#if [[ ! "${USR_STARTUP_FILE}" = "${STARTUP_FILE}" ]]
			#then
			if [[ -r "$USR_STARTUP_FILE" ]]
			then
				grep -i -v faust "$USR_STARTUP_FILE" > "${USR_STARTUP_FILE}.tmp" 2>/dev/null && mv "${USR_STARTUP_FILE}.tmp" "$USR_STARTUP_FILE"
				#echo "addpath(genpath('"$FAUST_MATLAB_WRAPPER_PATH"'))" >> "$USR_STARTUP_FILE"
				inject_matlab_code_to_update_path "$USR_STARTUP_FILE"
				chown $USER "$USR_STARTUP_FILE"
				RET2=$(($?+$RET2))
			fi
			#fi
		done
	done

}

MATLAB_ROOT=$(dirname_noerr $(dirname_noerr $(which matlab 2>/dev/null)))
[[ ! -d "${MATLAB_ROOT}" ]] && MATLAB_ROOT=$(dirname_noerr $(dirname_noerr $(find /usr/local -maxdepth 10 -type f -name "matlab" | tail -n 1)))
# find is sorted by default (contrary to macOS that needs find -s predicate)
[[ ! -d "${MATLAB_ROOT}" ]] && MATLAB_ROOT=$(dirname_noerr $(dirname_noerr $(find /opt/ -maxdepth 10 -type f -name "matlab" | tail -n 1)))
if [[ ! -d "${MATLAB_ROOT}" || ! -x "${MATLAB_ROOT}/bin/matlab" ]]
then
	echo -e "\033[1mWARNING\033[0m: couldn't find Matlab root dir. You'll need to update the matlab path manually in order to use Faust matlab wrapper (or maybe you're not using matlab at all and that's not a problem)." >&2
else
	MATLAB_BIN="${MATLAB_ROOT}/bin/matlab"
	STARTUP_DIR="${MATLAB_ROOT}/toolbox/local/"
	MATLABRC="${STARTUP_DIR}/matlabrc.m"
	STARTUP_FILE="${STARTUP_DIR}/startup.m"
	[[ -r "$STARTUP_FILE" ]] && (grep -i -v faust "$STARTUP_FILE" > "${STARTUP_FILE}.tmp" 2>/dev/null; mv "${STARTUP_FILE}.tmp" "$STARTUP_FILE")
	FAUST_MATLAB_WRAPPER_PATH="@CMAKE_INSTALL_MATLAB_PREFIX@"
	#USR_STARTUP_FILE=$($MATLAB_BIN -nojvm -nodisplay -r "which startup;exit" | tail -n 2 | head -n 1) # useless in root
	if [[ -d "${FAUST_MATLAB_WRAPPER_PATH}" ]]
	then
		#echo "addpath(genpath('"$FAUST_MATLAB_WRAPPER_PATH"'))" >> "$STARTUP_FILE"
		inject_matlab_code_to_update_path "$STARTUP_FILE"
		RET1=$?
		# add a line to force startup execution into matlabrc
		# except if the line is already in the file
		[[ -r "$MATLABRC" ]] && grep -q "$MATLABRC_RUN_STARTUP_CMD" "$MATLABRC"  || (echo "$MATLABRC_RUN_STARTUP_CMD" >> $MATLABRC)
		RET2=0 # TODO: make it useful
		# inject_matlab_code_to_update_user_paths # disabled because it's too intrusive and maybe redundant
		[[ $RET1 = 0 && $RET2 = 0 ]] && echo -e "\033[1mNOTICE\033[0m: Faust matlab setup is complete." || echo "ERROR: something went wrong in matlab startup script editing."
	else
		echo "ERROR: Faust matlab wrapper path isn't valid."
	fi
fi
