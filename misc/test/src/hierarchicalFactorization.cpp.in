#include "faust_MatSparse.h"
#include "faust_HierarchicalFact.h"
#include "faust_Timer.h"
#include "faust_Transform.h"
#include "faust_init_from_matio_params.h"
#include "faust_init_from_matio_core.h"
#include <string>
#include <sstream>
#include "faust_BlasHandle.h"
#include "faust_SpBlasHandle.h"


#include <iostream>
#include <iomanip>

/** \brief An example of using the hierarchical factorization of a dense matrix. from .mat file.
* An dense matrix is loaded from "@FAUST_TESTDATA_SRC_DIR@
* \param configFilename : a .mat (MATLAB file) configuration file which contains the parameter of the hierarchical algorithm (default launch with a predefined configuration called hierFact)
* \param expectedLambda (optionnal) : compared the expected scalar of the factorisation with the computed one in the precision defined with epsilon
*\param epsilon : precision for the test of equality (default value 0.0001)
*/

typedef @TEST_FPP@ FPP;

int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}

  	if (typeid(FPP) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}


	string configFilename = "@FAUST_TESTDATA_SRC_DIR@/config_compared_hierarchical_fact.mat";



	if (argc >= 2)
		configFilename = argv[1];

	size_t ind = configFilename.find_last_of(".");

	if(ind<=0 || ind>= configFilename.size())
	{
		cerr << "Le nom du fichier est incorrect" << endl;
		exit(EXIT_FAILURE);
	}
	string configFileExtension(configFilename, ind);
	if(configFileExtension.compare(".mat") != 0)
	{
		cerr << "Le nom du fichier doit se terminer par \".mat\"" << endl;
		exit(EXIT_FAILURE);
	}
	string configFileBodyTmp(configFilename, 0, ind);


	string configFileBodyDir, configFileBodyFile;

	ind = configFileBodyTmp.find_last_of("/");
	if(ind<=0 || ind>= configFileBodyTmp.size())
	{
		configFileBodyDir = string("");
		configFileBodyFile = configFileBodyTmp;
	}
	else
	{
		configFileBodyDir = string(configFileBodyTmp, 0, ind+1);
		configFileBodyFile = string(configFileBodyTmp, ind+1);
	}



	FPP expectedLambda = 0;
	if (argc >= 3)
		expectedLambda = atof(argv[2]);


	FPP epsilon = 0.0001;
	if (argc >= 4)
		epsilon = atof(argv[3]);

	//useless for CPU but use for compatibility with GPU
	Faust::BlasHandle<Cpu> blasHandle;
	Faust::SpBlasHandle<Cpu> spblasHandle;


	Faust::Params<FPP,Cpu> params;
	init_params_from_matiofile(params,configFilename.c_str(),"params");
	params.Display();
	Faust::HierarchicalFact<FPP,Cpu> hierFact(params,blasHandle,spblasHandle);

	Faust::Timer t1;
	t1.start();

	hierFact.compute_facts();

	t1.stop();
	#ifdef __COMPILE_TIMERS__
		hierFact.print_timers();
		//hierFact.print_prox_timers();
	#endif
	cout <<"total hierarchical fact = "<<t1.get_time()<<endl;

	vector<Faust::MatSparse<FPP,Cpu> > facts;
	hierFact.get_facts(facts);
	FPP lambda = hierFact.get_lambda();
	if (argc >= 3)
	{
		if (std::abs(lambda - expectedLambda) > epsilon)
		{
			std::cerr<<"invalid lambda, must be equal to "<<std::setprecision(20)<<std::setprecision(20)<<expectedLambda<<" in the precision of "<<epsilon<<std::endl;
			std::cerr<<"current value is "<<std::setprecision(20)<<lambda<<std::endl;
			exit(EXIT_FAILURE);
		}

	}
	(facts[0]) *= hierFact.get_lambda();
	Faust::Transform<FPP,Cpu> hierFactCore(facts);
	char nomFichier[100];
	string outputFile="@FAUST_TESTOUTPUT_BIN_DIR@/hier_fact_factorisation.dat";
	hierFactCore.print_file(outputFile.c_str());

	//write the given factorisation into a mat file
	stringstream outputFilename;
	outputFilename<<"@FAUST_TESTOUTPUT_BIN_DIR@/"<<configFileBodyFile<<"_factorisation.mat";
	std::cout<<"**************** WRITING FACTORISATION INTO ****************"<<std::endl;
	std::cout<<"output filename : "<<outputFilename.str();
	write_faust_core_into_matfile(hierFactCore,outputFilename.str().c_str(),"fact");


	//relativeError
	Faust::MatDense<FPP,Cpu> dataMatrix = params.data;
	Faust::MatDense<FPP,Cpu> faustProduct;
	faustProduct=hierFactCore.get_product();
	faustProduct-=dataMatrix;
	FPP relativeError = faustProduct.norm()/dataMatrix.norm();

	std::cout<<std::endl;
	std::cout<<"**************** RELATIVE ERROR BETWEEN FAUST AND DATA MATRIX **************** "<<std::endl;
	std::cout<<"		"<<relativeError<<std::endl<<std::endl;


	//time comparison between matrix vector product and faust-vector product
	int niterTimeComp = 10;
	if (niterTimeComp > 0)
	{

		Faust::Timer tdense;
		Faust::Timer tfaust;
		Faust::Vect<FPP,Cpu> x(dataMatrix.getNbCol());
		Faust::Vect<FPP,Cpu> ydense(dataMatrix.getNbRow());
		Faust::Vect<FPP,Cpu> yfaust(hierFactCore.getNbRow());
		for (int i=0;i<niterTimeComp;i++)
		{
			//random initilisation of vector x
	 		for (int j=0;j<x.size();j++)
			{
				x[j]=std::rand()*2.0/RAND_MAX-1.0;
			}

			tdense.start();
			ydense = dataMatrix * x;
			tdense.stop();

	 		tfaust.start();
			yfaust = hierFactCore * x;
			tfaust.stop();

	 	}
		std::cout<<std::endl;

		std::cout<<"**************** TIME COMPARISON MATRIX VECTOR PRODUCT **************** "<<std::endl;
		std::cout<<"	TIME  SPEED-UP : "<<tdense.get_time()/tfaust.get_time()<<std::endl;
		std::cout<<"	MEAN TIME dense : "<<tdense.get_time()/((float) niterTimeComp)<<std::endl;
		std::cout<<"	MEAN TIME faust : "<<tfaust.get_time()/((float) niterTimeComp)<<std::endl;
		cout<<"lambda="<<std::setprecision(20)<<hierFact.get_lambda()<<endl;
	}

	blasHandle.Destroy();
	spblasHandle.Destroy();


	return 0;

}
