#include "faust_MatDense_gpu.h"
#include "faust_Transform_gpu.h"
#include "faust_MatSparse_gpu.h"
#include "faust_Vect_gpu.h"
#include "faust_Params.h"
#include "faust_ParamsPalm.h"
#include "faust_StoppingCriterion.h"
#include "faust_init_from_matio_params.h"
#include "faust_init_from_matio_core.h"
#include "faust_Palm4MSA.h"
#include "faust_HierarchicalFact.h"
#include "faust_Timer_gpu.h"
#include "linear_algebra_gpu.h"
#include <iostream>
#include <iomanip>
#include <fstream>
#include "SpBlasHandleGPU.h"
#include "BlasHandleCPU.h"

//modif AL AL
//#include "faust_ConstraintInt.h"
//#include "faust_ConstraintFPP.h"

using namespace std;
typedef @TEST_FPP@ FPP;//faust floating point precision

int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}

  	if (typeid(FPP) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}


	string config_filename = "@FAUST_TESTDATA_SRC_DIR@/config_compared_hierarchical_fact.mat";

	if (argc >= 2)
		config_filename = argv[1];

	size_t ind = config_filename.find_last_of(".");

	if(ind<=0 || ind>= config_filename.size())
	{
		cerr << "Le nom du fichier est incorrect" << endl;
		exit(EXIT_FAILURE);
	}
	string config_file_extension(config_filename, ind);
	if(config_file_extension.compare(".mat") != 0)
	{
		cerr << "Le nom du fichier doit se terminer par \".mat\"" << endl;
		exit(EXIT_FAILURE);
	}
	string config_file_body_tmp(config_filename, 0, ind);


	string config_file_body_dir, config_file_body_file;

	ind = config_file_body_tmp.find_last_of("/");
	if(ind<=0 || ind>= config_file_body_tmp.size())
	{
		config_file_body_dir = string("");
		config_file_body_file = config_file_body_tmp;
	}
	else
	{
		config_file_body_dir = string(config_file_body_tmp, 0, ind+1);
		config_file_body_file = string(config_file_body_tmp, ind+1);
	}



	FPP expected_lambda = 0;
	if (argc >= 3)
		expected_lambda = atof(argv[2]);


	FPP epsilon = 0.0001;
	if (argc >= 4)
		epsilon = atof(argv[3]);



	// initialisation CUDA environment
	std::cout<<"initialisation of GPU environnement"<<std::endl;
	//cublasHandle_t cublasHandle;
	Faust::BlasHandle<Gpu> blas_handle;
	blas_handle.Init();

	//cusparseHandle_t cusparseHandle;
	SpBlasHandle<Gpu> spblas_handle;
	spblas_handle.Init();


	std::cout<<"initialisation of HierarchicalFact parameter"<<std::endl;
	Faust::Params<FPP,Gpu> params;
	std::cout<<"init_params"<<std::endl;
	init_params_from_matiofile(params,config_filename.c_str(),"params");
	std::cout<<"Display2"<<std::endl;
	params.Display();
	cout<<"launch"<<endl;
	Faust::HierarchicalFact<FPP,Gpu> hier_fact(params,blas_handle,spblas_handle);

	std::cout<<"factorisation"<<std::endl;
	Faust::Timer_gpu t1;
	t1.start();

	hier_fact.compute_facts();

	t1.stop();
	#ifdef __COMPILE_TIMERS__
		hier_fact.print_timers();
	#endif
	cout <<"total hierarchical fact = "<<t1.get_time()<<endl;

	vector<Faust::MatSparse<FPP,Gpu> > facts;
	hier_fact.get_facts(facts);

	FPP lambda=hier_fact.get_lambda();
	cout<<"lambda="<<std::setprecision(20)<<lambda<<endl<<endl;

		/// equality test between lambda (multiplied scalar and lambda)
	if (argc >= 3)
	{
		if (std::abs(lambda - expected_lambda) > epsilon)
		{
			std::cerr<<"invalid lambda, must be equal to "<<std::setprecision(20)<<std::setprecision(20)<<expected_lambda<<" in the precision of "<<epsilon<<std::endl;
			std::cerr<<"current value is "<<std::setprecision(20)<<lambda<<std::endl;
			exit(EXIT_FAILURE);
		}

	}



	//Faust::Transform_cu<FPP> hier_fact_core(facts);
	Faust::Transform<FPP,Gpu> hier_fact_core(facts,lambda);


	//write the given factorisation into a mat file
	stringstream outputfilename;
	outputfilename<<"@FAUST_TESTOUTPUT_BIN_DIR@/"<<config_file_body_file<<"_gpu_factorisation.mat";
	std::cout<<"**************** WRITING FACTORISATION INTO ****************"<<std::endl;
	std::cout<<"output filename : "<<outputfilename.str();
	write_faust_core_into_matfile(hier_fact_core,outputfilename.str().c_str(),"fact");

	//relative_error
	Faust::MatDense<FPP,Gpu> const data_matrix(params.data);
	Faust::MatDense<FPP,Gpu> tmp;
	tmp=hier_fact_core.get_product(blas_handle,spblas_handle);
	Faust::MatDense<FPP,Gpu> const faust_product(tmp);
	Faust::MatDense<FPP,Gpu> error(faust_product);
	error-=data_matrix;
	FPP relative_error = error.norm()/data_matrix.norm();

	std::cout<<std::endl;
	std::cout<<"**************** RELATIVE ERROR BETWEEN FAUST AND DATA MATRIX **************** "<<std::endl;
	std::cout<<"		"<<relative_error<<std::endl<<std::endl;


	//time comparison between matrix vector product and faust-vector product
	int niter_time_comp = 100;
	if (niter_time_comp > 0)
	{

		Faust::Timer_gpu tdense;
		Faust::Timer_gpu tfaust;
		Faust::Vect<FPP,Gpu> x(data_matrix.getNbCol());
		Faust::Vect<FPP,Gpu> ydense(data_matrix.getNbRow());
		Faust::Vect<FPP,Gpu> yfaust(hier_fact_core.getNbRow());
		Faust::Vect<FPP,Gpu> ycomp(faust_product.getNbRow());

		x.setOnes();


		for (int i=0;i<niter_time_comp;i++)
		{

			tdense.start();
			gemv(data_matrix,x,ydense,'N',blas_handle);
			tdense.stop();

			gemv(faust_product,x,ycomp,'N',blas_handle);

	 		tfaust.start();
			hier_fact_core.mult(x,yfaust,spblas_handle);
			tfaust.stop();
			if(!yfaust.equality(ycomp))
			{
				cout<<"ycomp"<<std::endl<<std::endl;
				yfaust.Display();
				cout<<std::endl<<std::endl<<"yfaust"<<std::endl;
				ycomp.Display();
				cerr << "vector multiplication issue : yfaust (multiplication by faust) and ycomp (multiplication by the dense matrix representing the faust)  are not equal with the given precision"<<epsilon<< endl;
				exit(EXIT_FAILURE);
			}

	 	}


		std::cout<<std::endl;

		std::cout<<"**************** TIME COMPARISON MATRIX VECTOR PRODUCT **************** "<<std::endl;
		std::cout<<"	TIME  SPEED-UP : "<<tdense.get_time()/tfaust.get_time()<<std::endl;
		std::cout<<"	MEAN TIME dense : "<<tdense.get_time()/((float) niter_time_comp)<<std::endl;
		std::cout<<"	MEAN TIME faust : "<<tfaust.get_time()/((float) niter_time_comp)<<std::endl;
	}


	blas_handle.Destroy();
	spblas_handle.Destroy();

	return 0;
}

