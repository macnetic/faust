/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.gforge.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************/
#include "faust_MatSparse.h"
#include "faust_HierarchicalFact.h"
#include "faust_Timer.h"
#include "faust_Transform.h"
#include <string>
#include <sstream>
#include "faust_BlasHandle.h"
#include "faust_SpBlasHandle.h"


#include <iostream>
#include <iomanip>

/** \brief unitary test for testing multiplication by faust									
*/

typedef @TEST_FPP@ FPP;

//using namespace Faust;

int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}

  	if (typeid(FPP) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}

	int dim1 = 3;
	int dim2 = 4;
	int dim3 = 2;

	int nb_factor = 1;

	Faust::MatDense<FPP,Cpu> fact1(dim1,dim2);
	for (int j=0;j < dim1*dim2; j ++)
	{
		fact1[j]= (FPP) j;
	};


					      

	vector<Faust::MatGeneric<FPP,Cpu> *> list_fact;
	list_fact.resize(nb_factor);
	Faust::MatDense<FPP,Cpu> fact2(dim2,dim2);
	for (int i=0;i< dim2; i++)
	{
		for (int j=0;j< dim2; j++)
		{
			fact2[i*dim2+j]=(FPP) (i+1);
		}
		
	}

	Faust::MatDense<FPP,Cpu> fact3_dense(dim2,dim2);
	for (int i=0;i< dim2; i++)
	{
		for (int j=0;j< dim2; j++)
		{
			fact3_dense[i*dim2+j]=(FPP) (i+2);
		}
		
	}
	Faust::MatSparse<FPP,Cpu> fact3_sparse(fact3_dense);
	std::cout<<"fact1 value"<<std::endl;
	fact1.Display();
	std::cout<<"fact2 value"<<std::endl;
	fact2.Display();
	std::cout<<"fact3 value"<<std::endl;
	fact3_dense.Display();
	list_fact[0]=fact1.Clone();
	//list_fact[1]=fact2.Clone();
	//list_fact[2]=fact3_sparse.Clone();
	
	std::cout<<"init mat id dim1"<<std::endl;
	Faust::MatDense<FPP,Cpu> identity_dim1(dim1,dim1);
	for (int i = 0;i<dim1*dim1;i++) identity_dim1[i]=0.0;
	for (int i = 0;i<dim1;i++) identity_dim1[i*dim1+i]=1.0;
	std::cout<<"init mat id dim2 "<<std::endl;	
	Faust::MatDense<FPP,Cpu> identity_dim2(dim2,dim2);
	for (int i = 0;i<dim2*dim2;i++) identity_dim2[i]=0.0;
	for (int i = 0;i<dim2;i++) identity_dim2[i*dim2+i]=1.0;	
	
	
	
	
	
	std::cout<<"init Faust "<<std::endl;
	Faust::Transform<FPP,Cpu> F(list_fact,1.0,false);
	F.Display();
	std::cout<<"avant multiplication identity dim1"<<std::endl;
	identity_dim1.Display();
	for (int i=0;i<dim1*dim1;i++)
	std::cout<<identity_dim1[i]<<std::endl;
	Faust::MatDense<FPP,Cpu> F_normal_dense = F.multiply(identity_dim2,'N');
	Faust::MatDense<FPP,Cpu> F_trans_dense = F.multiply(identity_dim1,'T');
	std::cout<<"apres multiplication"<<std::endl;
	std::cout<<"full Faust : "<<std::endl;
	F_normal_dense.Display();
	
	std::cout<<"full Faust transpose : "<<std::endl;
	F_trans_dense.Display();
	/*
	std::cout<<"prod mult"<<std::endl;
	Faust::MatDense<FPP,Cpu> F_prod=F.get_product();
	
	/*	
	std::cout<<"F value "<<std::endl; 
	F_prod.Display();

	Faust::MatDense<FPP,Cpu> X(dim2,dim3);
	for (int j=0;j < dim3; j ++)
	{
		for (int i=0;i<dim2;i++)
				X[j*dim2+i]= (FPP) (j*dim2+i);
	};
	 std::cout<<"X value "<<std::endl; 
	 X.Display();

	Faust::MatDense<FPP,Cpu> Y;
	
	Y = F * X;

	

	Faust::MatDense<FPP,Cpu> Y_prod=X;
	
	F_prod.multiply(Y_prod,'N');
	
	std::cout<<"Y value "<<std::endl; 
	Y.Display();

	std::cout<<"Y_prod value "<<std::endl; 
	Y_prod.Display();
	*/
	

	
	return 0;

}
