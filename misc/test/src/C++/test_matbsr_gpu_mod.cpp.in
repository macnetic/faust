#include "faust_constant.h"

#include "faust_MatBSR.h"
#include "faust_MatBSR_gpu.h"
#include "faust_cuda_device.h"
#include <cstdlib>
#include <cmath>
#include "faust_TransformHelper.h"
#include "faust_TransformHelper_gpu.h"

using namespace std;
using namespace Faust;

typedef @TEST_FPP@ FPP;

void test_gpu_ctor_and_tocpu()
{
	std::cout << "test_gpu_ctor_and_tocpu" << std::endl;
	auto nrows = 10;
	auto ncols = 15;
	auto bnrows = 5;
	auto bncols = 5;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, Cpu> cpu_bsr_mat2;
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(
			cpu_bsr_mat->getNbRow(),
			cpu_bsr_mat->getNbCol(),
			cpu_bsr_mat->getNbBlockRow(),
			cpu_bsr_mat->getNbBlockCol(),
			cpu_bsr_mat->getNBlocks(),
			cpu_bsr_mat->get_bdata(),
			cpu_bsr_mat->get_browptr(),
			cpu_bsr_mat->get_bcolinds());
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	assert(cpu_bsr_mat->norm() == cpu_bsr_mat2.norm());
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_gpu_mul_dense()
{
	std::cout << "test_gpu_mul_dense" << std::endl;
	// gen a cpu random dense matrix
	MatDense<FPP, Cpu> *cpu_dmat = MatDense<FPP, Cpu>::randMat(15, 10);
	// convert it to gpu
	MatDense<FPP, GPU2> gpu_dmat(*cpu_dmat);
	// idem for bsr mats
	auto cpu_bmat = MatBSR<FPP, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);

	// multiply on cpu
	cpu_bmat->multiply(*cpu_dmat, 'N');
	gpu_bmat.multiply(gpu_dmat, 'N');

	MatDense<FPP, Cpu> diff_mat;
	gpu_dmat.tocpu(diff_mat);
	diff_mat -= *cpu_dmat;
	assert(diff_mat.norm() < 1e-3);
	delete cpu_bmat;
	delete cpu_dmat;
	std::cout << "OK" << std::endl;
}

void test_gpu_mul_vec()
{
	std::cout << "test_gpu_mul_vec" << std::endl;
	// gen a cpu random dense matrix
	Vect<FPP, Cpu> *cpu_vec = Vect<FPP, Cpu>::rand(15);
	// convert it to gpu
	Vect<FPP, GPU2> gpu_vec(*cpu_vec);
	// idem for bsr mats
	auto cpu_bmat = MatBSR<FPP, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);

	// multiply on cpu
	cpu_bmat->multiply(*cpu_vec, 'N');
	gpu_bmat.multiply(gpu_vec, 'N');
//	cpu_vec->Display();
//	gpu_vec.Display();

	auto gpu_vec_cpu = gpu_vec.tocpu();
//	gpu_vec_cpu.Display();
//	std::cout << gpu_vec_cpu.mean_relative_error(*cpu_vec) << std::endl;
	assert(std::abs(gpu_vec_cpu.mean_relative_error(*cpu_vec)) < 1e-1);
	delete cpu_bmat;
	delete cpu_vec;
	std::cout << "OK" << std::endl;
}

void test_bsr_to_dense()
{
	std::cout << "test_bsr_to_dense" << std::endl;
	auto cpu_bmat = MatBSR<FPP, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);
	auto gpu_dsmat = gpu_bmat.to_dense();

	MatDense<FPP, Cpu> cpu_dsmat_test;
	gpu_dsmat.tocpu(cpu_dsmat_test);
	auto cpu_dsmat_ref = cpu_bmat->to_dense();

	MatDense<FPP, Cpu> cpu_dmat_test = cpu_dsmat_test;
	MatDense<FPP, Cpu> cpu_dmat_ref = cpu_dsmat_ref;

	MatDense<FPP, Cpu> diff = cpu_dmat_ref;
	diff -= cpu_dmat_test;
	assert(diff.norm() / cpu_dmat_ref.norm() < 1e-3);
	std::cout << "OK" << std::endl;
}

void test_bsr_to_sparse()
{
	std::cout << "test_bsr_to_sparse" << std::endl;
	auto cpu_bmat = MatBSR<FPP, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);
	auto gpu_spmat = gpu_bmat.to_sparse();

	MatSparse<FPP, Cpu> cpu_spmat_test;
	gpu_spmat.tocpu(cpu_spmat_test);
	auto cpu_spmat_ref = cpu_bmat->to_sparse();

	MatDense<FPP, Cpu> cpu_dmat_test = cpu_spmat_test;
	MatDense<FPP, Cpu> cpu_dmat_ref = cpu_spmat_ref;

	MatDense<FPP, Cpu> diff = cpu_dmat_ref;
	diff -= cpu_dmat_test;
	assert(diff.norm() / cpu_dmat_ref.norm() < 1e-3);
	std::cout << "OK" << std::endl;
}

void test_sparse_to_bsr()
{
	std::cout << "test_sparse_to_bsr" << std::endl;
	auto cpu_smat = MatSparse<FPP, Cpu>::randMat(10, 15, .01);
	MatSparse<FPP, GPU2> gpu_smat(*cpu_smat);
	auto gpu_bmat = gpu_smat.to_bsr(5);
	MatBSR<FPP, Cpu> cpu_bmat;
	gpu_bmat.tocpu(cpu_bmat);

	MatDense<FPP, Cpu> cpu_dmat_test = cpu_bmat.to_dense();
	MatDense<FPP, Cpu> cpu_dmat_ref = *cpu_smat;;

	MatDense<FPP, Cpu> diff = cpu_dmat_ref;
	diff -= cpu_dmat_test;
	assert(diff.norm() / cpu_dmat_ref.norm() < 1e-3);
	std::cout << "OK" << std::endl;
	delete cpu_smat;
}

void test_transpose()
{
	std::cout << "test_transpose" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	Faust::MatBSR<FPP, Cpu> cpu_bsr_mat2;
	cpu_bsr_mat->transpose();
	gpu_bsr_mat.transpose();
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_adjoint()
{
	std::cout << "test_adjoint" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	Faust::MatBSR<FPP, Cpu> cpu_bsr_mat2;
	cpu_bsr_mat->adjoint();
	gpu_bsr_mat.adjoint();
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_conjugate()
{
	std::cout << "test_conjugate" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	Faust::MatBSR<FPP, Cpu> cpu_bsr_mat2;
	cpu_bsr_mat->conjugate();
	gpu_bsr_mat.conjugate();
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_norm()
{
	std::cout << "test_norm" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	assert(std::abs(cpu_bsr_mat->norm()-gpu_bsr_mat.norm()) < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_infos()
{
	std::cout << "test_infos" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	assert(cpu_bsr_mat->getType() == gpu_bsr_mat.getType());
	assert(cpu_bsr_mat->getNbRow() == gpu_bsr_mat.getNbRow());
	assert(cpu_bsr_mat->getNbCol() == gpu_bsr_mat.getNbCol());
	assert(cpu_bsr_mat->getNonZeros() == gpu_bsr_mat.getNonZeros());
	assert(cpu_bsr_mat->getNBytes() == gpu_bsr_mat.getNBytes());
	cpu_bsr_mat->Display();
	gpu_bsr_mat.Display();
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_set_zeros()
{
	std::cout << "test_set_zeros" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	Faust::MatBSR<FPP, Cpu> cpu_bsr_mat2;
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	cpu_bsr_mat->setZeros();
	gpu_bsr_mat.setZeros();
//	assert(std::abs(cpu_bsr_mat->norm()-gpu_bsr_mat.norm()) < 1e-3);
//	assert(std::abs(cpu_bsr_mat->norm()-cpu_bsr_mat2.norm()) < 1e-3);
	cpu_bsr_mat->Display();
	gpu_bsr_mat.Display();
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_get_nrows_ncols()
{
	cout << "test_get_nrows_ncols" << endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);

	auto gpu_rows = dynamic_cast<MatSparse<FPP, GPU2>*>(gpu_bsr_mat.get_rows(4, 3));
	auto cpu_rows = cpu_bsr_mat->get_rows(4, 3);
	MatSparse<FPP, Cpu> test_rows;
	gpu_rows->tocpu(test_rows);
	auto diff = MatDense<FPP, Cpu>(test_rows);
	diff -= MatDense<FPP, Cpu>(*cpu_rows);
	assert(diff.norm() < 1e-6);
	delete gpu_rows;
	delete cpu_rows;


	auto gpu_cols = dynamic_cast<MatSparse<FPP, GPU2>*>(gpu_bsr_mat.get_cols(4, 3));
	auto cpu_cols = cpu_bsr_mat->get_cols(4, 3);
	MatSparse<FPP, Cpu> test_cols;
	gpu_cols->tocpu(test_cols);
	diff = MatDense<FPP, Cpu>(test_cols);
	diff -= MatDense<FPP, Cpu>(*cpu_cols);
	assert(diff.norm() < 1e-6);
	delete gpu_cols;
	delete cpu_cols;

	faust_unsigned_int row_ids[3] = {1, 4, 6};
	gpu_rows = dynamic_cast<MatSparse<FPP, GPU2>*>(gpu_bsr_mat.get_rows(row_ids, 3));
	cpu_rows = cpu_bsr_mat->get_rows(row_ids, 3);
	gpu_rows->tocpu(test_rows);
	diff = MatDense<FPP, Cpu>(test_rows);
	diff -= MatDense<FPP, Cpu>(*cpu_rows);
	assert(diff.norm() < 1e-6);

	faust_unsigned_int col_ids[3] = {1, 4, 6};
	gpu_cols = dynamic_cast<MatSparse<FPP, GPU2>*>(gpu_bsr_mat.get_cols(col_ids, 3));
	cpu_cols = cpu_bsr_mat->get_cols(col_ids, 3);
	gpu_cols->tocpu(test_cols);
	diff = MatDense<FPP, Cpu>(test_cols);
	diff -= MatDense<FPP, Cpu>(*cpu_cols);
	assert(diff.norm() < 1e-6);

	cout << "OK" << endl;
}

void test_clone()
{
	std::cout << "test_clone" << std::endl;
	auto nrows = 10;
	auto ncols = 8;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<FPP, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<FPP, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	Faust::MatBSR<FPP, Cpu> cpu_bsr_mat2;
	auto gpu_bsr_clone = gpu_bsr_mat.clone();
	gpu_bsr_clone->tocpu(cpu_bsr_mat2);
	gpu_bsr_mat.Display();
	gpu_bsr_clone->Display();
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_transform_rand_bsr()
{
	std::cout << "test_transform_rand_bsr" << std::endl;
	unsigned int faust_nrows = 10;
	unsigned int faust_ncols = 10;
       	unsigned int min_num_factors = 2;
	unsigned int max_num_factors = 5;
       	unsigned int bnrows = 2;
       	unsigned int bncols = 2;
       	float density = .1f;
	auto F = TransformHelper<FPP, GPU2>::randBSRFaust(faust_nrows, faust_ncols, min_num_factors, max_num_factors, bnrows, bncols);
	F->display();
	delete F;
}

void test_bsrgemm()
{
	std::cout << "test_bsrgemm" << std::endl;

	char A_ops[3] = {'N', 'T', 'H'};
	for(int i=0; i < sizeof(A_ops); i++)
	{
		auto A_op = A_ops[i];
		auto B_op = A_op;
		// gen a cpu random dense matrix
		MatDense<FPP, Cpu> *cpu_dmat = MatDense<FPP, Cpu>::randMat(10, 15);
		//cpu_dmat->multiply(*cpu_dmat, 'T');
		//cpu_dmat->setOnes();
		// convert it to gpu
		MatDense<FPP, GPU2> gpu_dmat(*cpu_dmat);
		MatDense<FPP, GPU2> gpu_outmat;
		MatDense<FPP, GPU2> cpu_outmat(*cpu_dmat);
		// idem for bsr mats
		auto cpu_bmat = MatBSR<FPP, Cpu>::randMat(15, 10, 5, 5, 2);
		auto cpu_bmat_dmat = cpu_bmat->to_dense();

		MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);

		if(B_op == 'T')
			cpu_dmat->transpose();
		else if(B_op == 'H')
			cpu_dmat->adjoint();
		// multiply on cpu
		cpu_bmat->multiply(*cpu_dmat, A_op);

		// if(A_op == 'T') gpu_bmat.transpose();
		std::cout << "brsgemm(bsr, dense, '"<< A_op<<"', '"<< A_op<<"')" << std::endl;
		bsrgemm(gpu_bmat, gpu_dmat, gpu_outmat, FPP(1.0), FPP(0), A_op, B_op);

		MatDense<FPP, Cpu> diff_mat;
		gpu_outmat.tocpu(diff_mat);
		diff_mat -= *cpu_dmat;
		assert(diff_mat.norm() < 1e-3);
		std::cout << "OK" << std::endl;

		delete cpu_bmat;
		delete cpu_dmat;
	}



}

int main()
{
	Faust::enable_gpu_mod();
	test_bsrgemm();
	test_gpu_ctor_and_tocpu();
	test_gpu_mul_dense();
	test_gpu_mul_vec();
	test_bsr_to_sparse();
	test_bsr_to_dense();
	test_sparse_to_bsr();
	test_transpose();
	test_adjoint();
	test_conjugate();
	test_norm();
	test_infos();
	test_set_zeros();
	test_get_nrows_ncols();
	test_clone();
	test_transform_rand_bsr();
}


