#include "faust_constant.h"

#include "faust_MatBSR.h"
#include "faust_MatBSR_gpu.h"
#include "faust_cuda_device.h"
#include <cstdlib>
#include <cmath>
using namespace std;
using namespace Faust;

typedef @TEST_FPP@ FPP;

void test_gpu_ctor_and_tocpu()
{
	std::cout << "test_gpu_ctor_and_tocpu" << std::endl;
	auto nrows = 10;
	auto ncols = 15;
	auto bnrows = 5;
	auto bncols = 5;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<double, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<double, Cpu> cpu_bsr_mat2;
	Faust::MatBSR<double, GPU2> gpu_bsr_mat(
			cpu_bsr_mat->getNbRow(),
			cpu_bsr_mat->getNbCol(),
			cpu_bsr_mat->getNbBlockRow(),
			cpu_bsr_mat->getNbBlockCol(),
			cpu_bsr_mat->getNBlocks(),
			cpu_bsr_mat->get_bdata(),
			cpu_bsr_mat->get_browptr(),
			cpu_bsr_mat->get_bcolinds());
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	assert(cpu_bsr_mat->norm() == cpu_bsr_mat2.norm());
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

void test_gpu_mul_dense()
{
	std::cout << "test_gpu_mul_dense" << std::endl;
	// gen a cpu random dense matrix
	MatDense<FPP, Cpu> *cpu_dmat = MatDense<FPP, Cpu>::randMat(15, 10);
	// convert it to gpu
	MatDense<FPP, GPU2> gpu_dmat(*cpu_dmat);
	// idem for bsr mats
	auto cpu_bmat = MatBSR<double, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);

	// multiply on cpu
	cpu_bmat->multiply(*cpu_dmat, 'N');
	gpu_bmat.multiply(gpu_dmat, 'N');

	MatDense<FPP, Cpu> diff_mat;
	gpu_dmat.tocpu(diff_mat);
	diff_mat -= *cpu_dmat;
	assert(diff_mat.norm() < 1e-3);
	delete cpu_bmat;
	delete cpu_dmat;
	std::cout << "OK" << std::endl;
}

void test_gpu_mul_vec()
{
	std::cout << "test_gpu_mul_vec" << std::endl;
	// gen a cpu random dense matrix
	Vect<FPP, Cpu> *cpu_vec = Vect<FPP, Cpu>::rand(15);
	// convert it to gpu
	Vect<FPP, GPU2> gpu_vec(*cpu_vec);
	// idem for bsr mats
	auto cpu_bmat = MatBSR<double, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);

	// multiply on cpu
	cpu_bmat->multiply(*cpu_vec, 'N');
	gpu_bmat.multiply(gpu_vec, 'N');
//	cpu_vec->Display();
//	gpu_vec.Display();

	auto gpu_vec_cpu = gpu_vec.tocpu();
//	gpu_vec_cpu.Display();
//	std::cout << gpu_vec_cpu.mean_relative_error(*cpu_vec) << std::endl;
	assert(gpu_vec_cpu.mean_relative_error(*cpu_vec) < 1e-1);
	delete cpu_bmat;
	delete cpu_vec;
	std::cout << "OK" << std::endl;
}

void test_bsr_to_sparse()
{
	std::cout << "test_bsr_to_sparse" << std::endl;
	auto cpu_bmat = MatBSR<double, Cpu>::randMat(10, 15, 5, 5, 2);
	MatBSR<FPP, GPU2> gpu_bmat(*cpu_bmat);
	auto gpu_spmat = gpu_bmat.to_sparse();

	MatSparse<FPP, Cpu> cpu_spmat_test;
	gpu_spmat.tocpu(cpu_spmat_test);
	auto cpu_spmat_ref = cpu_bmat->to_sparse();

	MatDense<FPP, Cpu> cpu_dmat_test = cpu_spmat_test;
	MatDense<FPP, Cpu> cpu_dmat_ref = cpu_spmat_ref;

	MatDense<FPP, Cpu> diff = cpu_dmat_ref;
	diff -= cpu_dmat_test;
	assert(diff.norm() / cpu_dmat_ref.norm() < 1e-3);
	std::cout << "OK" << std::endl;
}

void test_sparse_to_bsr()
{
	std::cout << "test_sparse_to_bsr" << std::endl;
	auto cpu_smat = MatSparse<double, Cpu>::randMat(10, 15, .01);
	MatSparse<FPP, GPU2> gpu_smat(*cpu_smat);
	auto gpu_bmat = gpu_smat.to_bsr(5);
	MatBSR<FPP, Cpu> cpu_bmat;
	gpu_bmat.tocpu(cpu_bmat);

	MatDense<FPP, Cpu> cpu_dmat_test = cpu_bmat.to_dense();
	MatDense<FPP, Cpu> cpu_dmat_ref = *cpu_smat;;

	MatDense<FPP, Cpu> diff = cpu_dmat_ref;
	diff -= cpu_dmat_test;
	assert(diff.norm() / cpu_dmat_ref.norm() < 1e-3);
	std::cout << "OK" << std::endl;
	delete cpu_smat;
}

void test_transpose()
{
	std::cout << "test_transpose" << std::endl;
	auto nrows = 10;
	auto ncols = 10;
	auto bnrows = 2;
	auto bncols = 2;
	auto bnnz = 2;
	auto cpu_bsr_mat = Faust::MatBSR<double, Cpu>::randMat(nrows, ncols, bnrows, bncols, bnnz);
	Faust::MatBSR<double, GPU2> gpu_bsr_mat(*cpu_bsr_mat);
	Faust::MatBSR<double, Cpu> cpu_bsr_mat2;
	cpu_bsr_mat->transpose();
	gpu_bsr_mat.transpose();
	gpu_bsr_mat.tocpu(cpu_bsr_mat2);
	MatDense<FPP, Cpu> diff_mat = cpu_bsr_mat->to_dense();
	diff_mat -= cpu_bsr_mat2.to_dense();
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_bsr_mat;
}

int main()
{
	Faust::enable_gpu_mod();
	test_gpu_ctor_and_tocpu();
	test_gpu_mul_dense();
	test_gpu_mul_vec();
	test_bsr_to_sparse();
	test_sparse_to_bsr();
	test_transpose();
}


