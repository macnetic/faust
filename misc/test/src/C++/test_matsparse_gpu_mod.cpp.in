#include "faust_constant.h"

#include "faust_MatSparse.h"
#include "faust_MatSparse_gpu.h"
#include "faust_cuda_device.h"
#include "faust_linear_algebra_gpu.h"
#include <cstdlib>
#include <cmath>
using namespace std;
using namespace Faust;

//TODO: use FPP and not double
//
void test_ds_mat_eq(MatDense<double, GPU2> &test, MatDense<double, Cpu> &ref, double tol=1e-6)
{
	assert(tol >= 0);
	MatDense<double, Cpu> diff_mat = ref;
	MatDense<double, Cpu> cpu_test(test.getNbRow(), test.getNbCol());
	test.tocpu(cpu_test);
	diff_mat -= MatDense<double, Cpu>(cpu_test);
	assert(diff_mat.norm() < tol);
}

void test_gpu_norm()
{
	cout << "test MatSparse<FPP,GPU2>::norm()" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(
			nrows,
			ncols,
			cpu_sp_mat->getNonZeros(),
			cpu_sp_mat->getValuePtr(),
			cpu_sp_mat->getRowPtr(),
			cpu_sp_mat->getColInd());
	assert(gpu_sp_mat.norm() == cpu_sp_mat->norm());
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_transpose()
{
	cout << "test MatSparse<FPP,GPU2>::transpose" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(
			nrows,
			ncols,
			cpu_sp_mat->getNonZeros(),
			cpu_sp_mat->getValuePtr(),
			cpu_sp_mat->getRowPtr(),
			cpu_sp_mat->getColInd());
	gpu_sp_mat.transpose();
	cpu_sp_mat->transpose();
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_adjoint()
{
	cout << "test MatSparse<FPP,GPU2>::adjoint" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(
			nrows,
			ncols,
			cpu_sp_mat->getNonZeros(),
			cpu_sp_mat->getValuePtr(),
			cpu_sp_mat->getRowPtr(),
			cpu_sp_mat->getColInd());
	gpu_sp_mat.adjoint();
	cpu_sp_mat->adjoint();
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_conjugate()
{
	cout << "test MatSparse<FPP,GPU2>::conjugate" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(
			nrows,
			ncols,
			cpu_sp_mat->getNonZeros(),
			cpu_sp_mat->getValuePtr(),
			cpu_sp_mat->getRowPtr(),
			cpu_sp_mat->getColInd());
	gpu_sp_mat.conjugate();
	cpu_sp_mat->conjugate();
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_gpu_ctor_and_tocpu()
{
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(
			nrows,
			ncols,
			cpu_sp_mat->getNonZeros(),
			cpu_sp_mat->getValuePtr(),
			cpu_sp_mat->getRowPtr(),
			cpu_sp_mat->getColInd());
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	assert(cpu_sp_mat->norm() == cpu_sp_mat2.norm());
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_gpu_ctor_and_tocpu2()
{
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	assert(cpu_sp_mat->norm() == cpu_sp_mat2.norm());
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_eq_operator_rhs_cpu()
{
	cout << "test MatSparse<FPP,GPU2>::operator=(MatSparse<FPP,Cpu>" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	auto cpu_sp_mat2 = Faust::MatSparse<double, Cpu>::randMat(nrows+1, ncols+4, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat3;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	gpu_sp_mat = *cpu_sp_mat2;
	gpu_sp_mat.tocpu(cpu_sp_mat3);
	assert(gpu_sp_mat.norm() == cpu_sp_mat2->norm());
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat2;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat3);
	assert(diff_mat.norm() < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
	delete cpu_sp_mat2;
}

void test_copy()
{
	cout << "test MatSparse<FPP,GPU2>::copy" << endl;
	auto nrows = 5;
	auto ncols = 8;
	int32_t nnz2, nrows2, nrows3;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	auto cpu_sp_mat2 = Faust::MatSparse<double, Cpu>::randMat(nrows*2, ncols*2, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat3;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	Faust::MatSparse<double, GPU2> gpu_sp_mat2(*cpu_sp_mat2);
	gpu_sp_mat = gpu_sp_mat2;
	assert(std::abs(gpu_sp_mat.norm() - cpu_sp_mat2->norm()) < 1e-3);
	cout << "OK" << endl;
}

void test_clone()
{
	cout << "test MatSparse<FPP,GPU2>::clone" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> *gpu_sp_mat2 = gpu_sp_mat.clone();
	gpu_sp_mat2->tocpu(cpu_sp_mat2);
	assert(gpu_sp_mat.norm() == gpu_sp_mat2->norm());
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	delete cpu_sp_mat;
	delete gpu_sp_mat2;
	cout << "OK" << endl;
}

void test_move()
{
	// TODO: test with a specially created stream
	cout << "test MatSparse<FPP,GPU2>::move" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	auto ndevs = Faust::count_devices();
	cout << "device count: " << ndevs << endl;
	int32_t dest_dev = -1;
	if(ndevs > 1)
	{
		// use the last device as destination if more than one are available
		dest_dev = ndevs -1;
	}
	gpu_sp_mat.move(/*dev_id*/dest_dev, /*stream*/ nullptr);
	cout << "gpu_sp_mat.getDevice():" << gpu_sp_mat.getDevice() << endl;
	assert(dest_dev == -1 || gpu_sp_mat.getDevice() == dest_dev);
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	delete cpu_sp_mat;
	cout << "OK" << endl;
}

void test_set_eyes()
{
	cout << "test MatSparse<FPP,GPU2>::setEyes" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	cpu_sp_mat->setEyes();
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	gpu_sp_mat.setEyes();
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	assert(gpu_sp_mat.norm() == gpu_sp_mat.norm());
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	delete cpu_sp_mat;
	cout << "OK" << endl;
}

void test_set_id()
{
	cout << "test MatSparse<FPP,GPU2>::setIdentity" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	cpu_sp_mat->resize(55,55);
	cpu_sp_mat->setEyes(); // setIdentity not implemented in MatSparse<FPP,Cpu>
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	gpu_sp_mat.setIdentity(55);
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	assert(gpu_sp_mat.norm() == gpu_sp_mat.norm());
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	delete cpu_sp_mat;
	cout << "OK" << endl;
}

void test_set_zeros()
{
	cout << "test MatSparse<FPP,GPU2>::setZeros" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	cpu_sp_mat->setZeros();
	gpu_sp_mat.setZeros();
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	cout << gpu_sp_mat.norm() << endl;
	assert(gpu_sp_mat.norm() == gpu_sp_mat.norm());
	assert(gpu_sp_mat.norm() == 0);
	MatDense<double, Cpu> diff_mat = *cpu_sp_mat;
	diff_mat -= MatDense<double, Cpu>(cpu_sp_mat2);
	assert(diff_mat.norm() < 1e-3);
	delete cpu_sp_mat;
	cout << "OK" << endl;
}

void test_resize_set()
{
	cout << "test MatSparse<FPP,GPU2>::resize" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(
			nrows,
			ncols,
			cpu_sp_mat->getNonZeros(),
			cpu_sp_mat->getValuePtr(),
			cpu_sp_mat->getRowPtr(),
			cpu_sp_mat->getColInd());
	auto nnrows = 50;
	auto nncols = 123;
	auto cpu_sp_mat2 = Faust::MatSparse<double, Cpu>::randMat(nnrows, nncols, .2);
	MatSparse<double, Cpu> cpu_sp_mat2_csc(*cpu_sp_mat2);
	auto nnz = cpu_sp_mat2->getNonZeros();
	cpu_sp_mat2_csc.transpose(); // equiv to making a CSR to CSC conversion (because set() works from CSC matrix)
	gpu_sp_mat.resize(nnz, nnrows, nncols);
	// set() doesn't change size of buffers if it is already adjusted properly (so it allows to test if resize worked)
	// int32_t nnz, int32_t nrows, int32_t ncols, @FAUST_SCALAR_FOR_GM@* values, int32_t* rowids, int32_t* colptr
	gpu_sp_mat.set(nnz, nnrows, nncols, cpu_sp_mat2_csc.getValuePtr(), cpu_sp_mat2_csc.getColInd(), cpu_sp_mat2_csc.getRowPtr());
	assert(gpu_sp_mat.getNbRow() == nnrows);
	assert(gpu_sp_mat.getNbCol() == nncols);
	assert(gpu_sp_mat.getNonZeros() == nnz);
	MatDense<double, GPU2> gpu_ds_mat(gpu_sp_mat);
	MatDense<double, Cpu> cpu_ds_mat2(*cpu_sp_mat2);
	test_ds_mat_eq(gpu_ds_mat, cpu_ds_mat2);
	cout << "OK" << endl;
	delete cpu_sp_mat;
	delete cpu_sp_mat2;
}

void test_scal_mul()
{
	cout << "test MatSparse<FPP,GPU2>::operator*=(const FPP &scal)" << endl;
	auto nrows = 5;
	auto ncols = 8;
	double scalar = 55.;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	MatDense<double, Cpu> cpu_ds_mat(*cpu_sp_mat);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	cpu_ds_mat *= scalar;
	gpu_sp_mat *= scalar;
	assert(std::abs(gpu_sp_mat.norm() - cpu_ds_mat.norm()) < 1e-3);
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_scal_add()
{
	cout << "test MatSparse<FPP,GPU2>::operator+=(const FPP &scal)" << endl;
	auto nrows = 5;
	auto ncols = 8;
	double scalar = 55.;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	MatDense<double, Cpu> cpu_ds_mat(*cpu_sp_mat);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	gpu_sp_mat += scalar;
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	for(int i=0;i<nrows;i++)
		for(int j=0;j<ncols;j++)
		{
			assert(std::abs(cpu_sp_mat2(i,j) - cpu_ds_mat(i,j) - 55 )< 1e-6 || cpu_sp_mat2(i,j) == 0);
		}
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_scal_sub()
{
	cout << "test MatSparse<FPP,GPU2>::operator-=(const FPP &scal)" << endl;
	auto nrows = 5;
	auto ncols = 8;
	double scalar = 55.;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	MatDense<double, Cpu> cpu_ds_mat(*cpu_sp_mat);
	Faust::MatSparse<double, Cpu> cpu_sp_mat2;
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	gpu_sp_mat -= scalar;
	gpu_sp_mat.tocpu(cpu_sp_mat2);
	for(int i=0;i<nrows;i++)
		for(int j=0;j<ncols;j++)
		{
			assert(std::abs(cpu_sp_mat2(i,j) -  cpu_ds_mat(i,j) + 55)<1e-6|| cpu_sp_mat2(i,j) == 0);
		}
	cout << "OK" << endl;
	delete cpu_sp_mat;
}

void test_is_equal()
{
	cout << "test MatSparse<FPP,GPU2>::operator==(const MatSparse<FPP,GPU2>& mat)" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	auto cpu_sp_mat2 = Faust::MatSparse<double, Cpu>::randMat(nrows+1, ncols+4, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	Faust::MatSparse<double, GPU2> gpu_sp_mat2(*cpu_sp_mat2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat3(*cpu_sp_mat2);
	assert(gpu_sp_mat == gpu_sp_mat);
	assert(gpu_sp_mat2 == gpu_sp_mat2);
	assert(gpu_sp_mat3 != gpu_sp_mat2);
	cout << "OK" << endl;
}

void test_get_device()
{
	cout << "test MatSparse<FPP,GPU2>::getDevice" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	Faust::MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	auto dev_id = gpu_sp_mat.getDevice();
	cout << "device id: " << dev_id << endl;
}

void test_spgemm()
{
	cout << "test MatSparse<double,GPU2>::test_spgemm" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_sp_mat = Faust::MatSparse<double, Cpu>::randMat(nrows, ncols, .2);
	auto cpu_ds_mat = Faust::MatDense<double, Cpu>::randMat(ncols, nrows);
	MatDense<double, Cpu> cpu_out;

	MatSparse<double, GPU2> gpu_sp_mat(*cpu_sp_mat);
	MatDense<double, GPU2> gpu_ds_mat(*cpu_ds_mat);
	MatDense<double, GPU2> gpu_out/*(5, 5)*/;

	spgemm(*cpu_sp_mat, *cpu_ds_mat, cpu_out, double(1.0), double(0), 'N', 'N');
	//cpu_out.Display();
	MatSparse<double, GPU2>::spgemm(gpu_sp_mat, gpu_ds_mat, gpu_out, double(1.0), double(0), 'N', 'N');
	//gpu_out.Display();
	test_ds_mat_eq(gpu_out, cpu_out);
	cout << "OK" << endl;
}

int main()
{
	Faust::enable_gpu_mod();
	test_gpu_norm();
	test_gpu_ctor_and_tocpu();
	test_gpu_ctor_and_tocpu();
	test_spgemm();
	test_eq_operator_rhs_cpu();
	test_transpose();
	test_adjoint();
	test_conjugate();
	test_resize_set();
	test_set_zeros();
	test_set_eyes();
	test_clone();
	test_copy();
	test_scal_mul();
	test_scal_add();
	test_scal_sub();
	test_set_id();
	test_move();
	test_is_equal();
	test_get_device();
}
