/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167958v1>                       */
/****************************************************************************/
#include "faust_TransformHelper.h"
#include "faust_MatDense.h"
#include <string>
#include <sstream>
#include <chrono>
#include <Eigen/Core>

#include <iostream>
#include <iomanip>

/** \brief unit test for testing multiplication by faust with parallel reduction on matrix products
*/

/** It was a kind of experiment to verify that parallelizing on columns/rows dot product as Eigen does is faster than doing a parallel reduction  on factors in addition to parallel dot product.
 * About comp. times: OMP/C++ threads works better than Eigen only if multithreading/OpenMP is disabled on eigen (see arg 1 of the program in main to disable dynamically).
 */

typedef @TEST_FPP@ FPP;


using namespace Faust;


void test_prod(RandFaustType mat_type)
{
	TransformHelper<FPP,Cpu>* th = TransformHelper<FPP,Cpu>::randFaust(mat_type, 12, 12, 1024, 1024, .05);
//	th->save_mat_file("test_faust.mat");
//	TransformHelper<FPP,Cpu>* th  = new TransformHelper<FPP, Cpu>();
//	th->read_from_mat_file("test_faust.mat");
	th->display();
	cout << "F norm:" << th->normFro() << endl;
	MatDense<FPP,Cpu>* M = MatDense<FPP,Cpu>::randMat(1024,1024);
//	MatDense<FPP, Cpu>* M = new MatDense<FPP, Cpu>(6, 6);
//	M->setOnes();
//	*M *= 2;
	auto start = std::chrono::system_clock::now();
	auto FM = th->multiply(*M);
	auto end = std::chrono::system_clock::now();
	std::chrono::duration<double> diff = end-start;
	std::cout << "Eigen Time "<< diff.count() << " s\n";
	FM.Display();
	cout << "FM norm: " << FM.norm() << endl;
	th->set_FM_mul_mode(CPP_PROD_PAR_REDUC);
	start = std::chrono::system_clock::now();
	auto FM3 = th->multiply(*M);
	end = std::chrono::system_clock::now();
	diff = end-start;
	std::cout << "C++ threads Time : "<< diff.count() << " s\n";
	FM3.Display();
	cout << "FM3 norm: " << FM3.norm() << endl;
	MatDense<FPP, Cpu> FM3_err = FM3;
	FM3_err -= FM;
	cout << "FM3 rel err:" << FM3_err.norm() / FM.norm() << endl;
	assert(FM3_err.norm() / FM.norm() < 1e-6);
	th->set_FM_mul_mode(OMP_PROD_PAR_REDUC);
	start = std::chrono::system_clock::now();
	auto FM2 = th->multiply(*M);
	end = std::chrono::system_clock::now();
	diff = end-start;
	std::cout << "OMP Time: "<< diff.count() << " s\n";
	FM2.Display();
	cout << "FM2 norm: " << FM2.norm() << endl;
	MatDense<FPP, Cpu> FM2_err = FM2;
	FM2_err -= FM;
	cout << "FM2 rel err:" << FM2_err.norm() / FM.norm() << endl;
	assert(FM2_err.norm() / FM.norm() < 1e-6);
	delete M;
	delete th;

}


int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
	{
		cout<<"floating point precision == double"<<endl;
	}

	if (typeid(FPP) == typeid(float))
	{
		cout<<"floating point precision == float"<<endl;
	}

	if(argc > 1)
	{
		std::cout << "WARNING: Eigen is monothreaded." << std::endl;
		Eigen::setNbThreads(1);
	}

	test_prod(DENSE);
	//test_prod(SPARSE); //TODO: debug

	return 0;
}
