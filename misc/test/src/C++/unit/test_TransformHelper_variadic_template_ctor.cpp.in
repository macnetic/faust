/****************************************************************************/
/*                              Description:                                */
/* unitary test for testing multiplication by faust with real  scalar       */
/*                                                                          */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         		*/
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2020):   Hakim HADJ-DJILANI									*/
/*  					Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************/
#include "faust_MatDense.h"
#include "faust_MatSparse.h"
#include "faust_Transform.h"
#include "faust_TransformHelper.h"
#include <string>



/** unit test for TransformHelper variadic template ctor
 * The goal is to test that factors are not duplicated in memory and it works when passing anything among a TransformHelper, Transform objects or a vector of MatGeneric<FPP,Cpu*> (anything that supports begin() and end() ops).
*/

typedef @TEST_FPP@ FPP;


using namespace Faust;

int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
	{
		cout<<"floating point precision == double"<<endl;
	}

	if (typeid(FPP) == typeid(float))
	{
		cout<<"floating point precision == float"<<endl;
	}

	int mat_nrows = 10;
	int mat_ncols = 10;
	int n_mats = 5;
	int n_sparse_mats = 2;

	vector<MatGeneric<FPP,Cpu>*> facts(n_mats);

	for(int i=0;i<n_sparse_mats;i++)
	{
		Faust::MatSparse<FPP,Cpu>* mat = Faust::MatSparse<FPP,Cpu>::randMat(mat_nrows, mat_ncols, .5);
		facts[i] = mat;
	}

	for(int i=n_sparse_mats;i<n_mats;i++)
	{
		MatDense<FPP,Cpu>* mat = MatDense<FPP,Cpu>::randMat(mat_nrows, mat_ncols);
		facts[i] = mat;
	}

	Faust::Transform<FPP,Cpu> t(facts, 1.0, false, false); //don't clone factors

	TransformHelper<FPP,Cpu> th(t);

	auto f = {facts[n_mats-1]}; //unfortunately TransformHelper ctor doesn't work directly with facts[n_mats-1]
	// we have to create the initalizer_list separately and pass it to the ctor after
	auto Mf = facts[n_mats-1];
	Faust::TransformHelper<FPP, Cpu> th_(th, t, facts, f);// {facts[n_mats-1]});
	th_.display();
	cout << "t=" << endl;
	t.Display();
	int i;
	for(i=0;i<th.size();i++)
	{
		assert(th.get_fact_addr(i) == th_.get_fact_addr(i));
	}
	// testing adding of t factors in th_
	int j;
	for(j=i;j<i+t.size();j++)
	{
		assert((*(t.begin()+j-i)) == facts[j-i]);
		cout << "orig ptr fact[" << i << "]: " << (void*)*(t.begin()+j-i) << " the copied one by ctor: " << ((void*)*(th_.begin()+j)) << "(equality tested)."<< endl;
		assert((*(t.begin()+j-i)) == *(th_.begin()+j));
	}
	// testing adding of facts in th_
	int k;
	for(k=j;k<j+t.size();k++)
	{
		assert(facts[k-j] == *(th_.begin()+k));
	}
	// testing f, last added factor in th_ // Faust::TransformHelper<FPP, Cpu> th_(th, t, facts, f);
	assert(facts[k-j-1] == *(th_.begin()+k));
}
