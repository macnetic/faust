/****************************************************************************/
/*                              Description:                                */
/* unitary test for testing multiplication by faust with real  scalar       */
/*                                                                          */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************/
#include "faust_MatSparse.h"
#include "faust_HierarchicalFact.h"
#include "faust_Timer.h"
#include "faust_Transform.h"
#include <string>
#include <sstream>


#include <iostream>
#include <iomanip>

/** \brief unitary test for testing multiplication by faust									
*/

typedef @TEST_FPP@ FPP;


//using namespace Faust;
using namespace std;

int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}

  	if (typeid(FPP) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}

	int dim1 = 38;
	int dim2 = 42;

	Faust::MatDense<FPP,Cpu> * M = Faust::MatDense<FPP,Cpu>::randMat(dim1, dim2);

	Faust::MatDense<FPP,Cpu> M_copy = *M;

	std::vector<faust_unsigned_int> m_vec = {5u, 12u, 25u, 38u};
	std::vector<faust_unsigned_int> n_vec = {9u, 18u, 32u, 42u};

	Faust::prox_blockdiag(M_copy, m_vec, n_vec, /* normalized */false); // normalized is true by default
	cout << "====================== M:" << endl;
	for(faust_unsigned_int i = 0; i < M->getNbRow(); i++)
	{
		for(faust_unsigned_int j = 0; j < M->getNbCol(); j++)
		{
			printf("%3.2f ", (*M)(i,j));
		}
		printf("\n");
	}
	cout << "====================== M_:"<< endl;
	for(faust_unsigned_int i = 0; i < M->getNbRow(); i++)
	{
		for(faust_unsigned_int j = 0; j < M->getNbCol(); j++)
		{
			printf("%3.2f ", M_copy(i,j));
			assert(M_copy(i,j) == FPP(0.0) || M_copy(i,j) == (*M)(i,j));
		}
		printf("\n");
	}
	return 0;
}
