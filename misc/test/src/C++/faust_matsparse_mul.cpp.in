#include "faust_MatSparse.h"
#include <iostream>

/** \brief unitary test for MatDense conjugate
*/

typedef @TEST_FPP@ FPP;


using namespace Faust;
using namespace std;

int main(int argc, char* argv[])
{
	faust_unsigned_int dim1 = 5;
	faust_unsigned_int dim2 = 5;



	/* initilisation of the factors of the Faust */

	// factor 1
	MatDense<FPP,Cpu> M2, M1;
	Faust::MatSparse<FPP,Cpu>* M_sp1, *M_sp2;
	M_sp1 = Faust::MatSparse<FPP,Cpu>::randMat(dim1,dim2, .5, false);
	M_sp2 = Faust::MatSparse<FPP, Cpu>::randMat(dim1, dim2, .6, false);
	M2 = *M_sp2;
	M1 = *M_sp1;
	cout<<"M_sp1"<<endl;
	M_sp1->Display();
	cout<<"M_sp2"<<endl;
	M_sp2->Display();
	M_sp1->multiply(*M_sp2, 'N');
	M2.multiplyLeft(M1);
	cout << "abs err:" << (M2.norm()-M_sp2->norm()) << endl;
	assert(Faust::abs(M2.norm()-M_sp2->norm()) < 1.0e-5);
	M2*=M2;
	M_sp2->multiplyRight(*M_sp2);
	assert(Faust::abs(M2.norm()-M_sp2->norm()) < 1.0e-5);
	cout << "abs err2:" << (M2.norm()-M_sp2->norm()) << endl;
	return 0;
}
