/*****************************************************************************//*{{{*/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2018):   Hakim Hadj-Djilani,                                 */
/*   					Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************//*}}}*//*}}}*//*}}}*/
#include "faust_MatDense.h"
#include "faust_Params.h"
#include "faust_ParamsPalmFGFT.h"
#include "faust_StoppingCriterion.h"
#include "faust_init_from_matio.h"
#include "faust_init_from_matio_mat.h"
#include "faust_Palm4MSAFGFT.h"
#include "faust_BlasHandle.h"

#include <iostream>

// modif AL AL
//#include "faust_ConstraintInt.h"
//#include "faust_ConstraintFPP.h"

using namespace std;
typedef @TEST_FPP@ FPP;
typedef @TEST_FPP2@ FPP2;
/** \brief Run a test of Faust::Palm4MSA
 */
int main()
{
	Faust::MatDense<FPP,Cpu> data, init_facts1, init_facts2, init_D, ref_Uhat1, ref_Uhat2, err_Uhat1, err_Uhat2;
	FPP tmp;


	string input_path = "@FAUST_DATA_MAT_DIR@/ref_test_PALM4SMA_FFT2.mat";

	const char *configPalm2Filename = input_path.c_str();
	cout << input_path << endl;

	// data is a Laplacian (symmetric matrix)
	init_faust_mat_from_matio(data, configPalm2Filename, "data");
	init_faust_mat_from_matio(ref_Uhat1, configPalm2Filename, "Uhat1");
	init_faust_mat_from_matio(ref_Uhat2, configPalm2Filename, "Uhat2");

	init_faust_mat_from_matio(init_facts1, configPalm2Filename, "p_init_facts1");
	init_faust_mat_from_matio(init_facts2, configPalm2Filename, "p_init_facts2");
	// init_D is the starting point for D (not the identity matrix)
	init_faust_mat_from_matio(init_D, configPalm2Filename, "p_init_D");

	int cons1Name, cons1Parameter, cons1Row, cons1Col;
	int cons2Name, cons2Row, cons2Col, cons2Parameter;
	int nfacts, niter;
	bool updateWay, verbose;
	FPP2 initLambda, step_size;

	cons1Name = init_int_from_matio(configPalm2Filename, "p_cons1_name");
	cons1Parameter = init_int_from_matio(configPalm2Filename, "p_cons1_val");
	cons1Row = init_facts1.getNbRow();
	cons1Col = init_facts1.getNbCol();

	cons2Name = init_int_from_matio(configPalm2Filename, "p_cons2_name");
	cons2Parameter = (FPP2) init_double_from_matio(configPalm2Filename, "p_cons2_val");
	cons2Row = init_facts2.getNbRow();
	cons2Col = init_facts2.getNbCol();

	initLambda = (FPP2) init_double_from_matio(configPalm2Filename, "p_init_lambda");
	step_size = (FPP2) init_double_from_matio(configPalm2Filename, "p_stepsize");
	nfacts = init_int_from_matio(configPalm2Filename, "p_nfacts");
	niter = init_int_from_matio(configPalm2Filename, "p_niter");

	updateWay = init_bool_from_matio(configPalm2Filename, "p_update_way");
	verbose = init_bool_from_matio(configPalm2Filename, "p_verbose");

	// Creation du vecteur de contrainte
	const Faust::ConstraintInt<FPP,Cpu> cons1(static_cast<faust_constraint_name>(cons1Name), cons1Parameter, cons1Row, cons1Col);

	const Faust::ConstraintInt<FPP,Cpu> cons2(static_cast<faust_constraint_name>(cons2Name), cons2Parameter, cons2Row, cons2Col);

	vector<const Faust::ConstraintGeneric*> cons;
	cons.push_back(&cons1);
	cons.push_back(&cons2);


	vector<Faust::MatDense<FPP,Cpu> > initFact;
	initFact.push_back(init_facts1);
	initFact.push_back(init_facts2);
	// initFact is U (matrix Fourier)

	Faust::StoppingCriterion<FPP2> crit(niter);

	Faust::ParamsPalmFGFT<FPP,Cpu,FPP2> params(data, nfacts, cons, initFact, init_D, crit, verbose, updateWay, initLambda, step_size);
	params.isVerbose = true;

#ifdef DEBUG
	params.Display();

	data.Display();
	cout << "init_facts1: " << endl;
	init_facts1.Display();
	cout << "init_facts2: " << endl;
	init_facts2.Display();
#endif

	Faust::BlasHandle<Cpu> blasHandle;

	Faust::Palm4MSAFGFT<FPP,Cpu,FPP2> palm2(params,blasHandle,true);



//	palm2.next_step();
	palm2.compute_facts();
    std::vector<Faust::MatDense<FPP,Cpu> >& full_facts = const_cast< std::vector<Faust::MatDense<FPP,Cpu> >&>(palm2.get_facts());

	FPP2 lambda = palm2.get_lambda();
	(full_facts[0]) *= FPP(lambda);

	err_Uhat1 = ref_Uhat1;
	err_Uhat1 -= full_facts[0];
	tmp = ref_Uhat1.norm();

	cout << "RE for Uhat1: " << err_Uhat1.norm()/tmp << endl;

	err_Uhat2 = ref_Uhat2;
	err_Uhat2 -= full_facts[1];
	tmp = ref_Uhat2.norm();

	cout << "RE for Uhat2: " << err_Uhat2.norm()/tmp << endl;



	Faust::Transform<FPP, Cpu>* t = new Faust::Transform<FPP, Cpu>(full_facts);
	//relativeError

	cout << "relative difference between init_D and D (must be small but not zero)" << endl;
	Faust::MatDense<FPP,Cpu> diff_D = init_D;
	diff_D -= palm2.get_D();
	cout << diff_D.norm()/init_D.norm() << endl;
	cout << "res. D.norm(): " <<  palm2.get_D().norm() << endl;
	cout << "Faust::Transform result approximating U:" << endl;
	t->Display();
	cout << "its norm: " <<  t->normFro() << endl;
	assert(t->get_fact(0)->getNonZeros() == cons1Parameter);
	assert(t->get_fact(1)->getNonZeros() == cons2Parameter);

	// calc Uhat*D*Uhat' and verify it's not too far from Laplacian
	Faust::MatDense<FPP,Cpu> mat = t->get_product(), mat2;
	mat.multiplyRight(palm2.get_D());
	mat2 = t->get_product();
	mat2.transpose();
	mat.multiplyRight(mat2);
	mat-= data;
	double relativeError = Faust::fabs(mat.norm()/data.norm());

	std::cout<<std::endl;
	std::cout<<"**************** RELATIVE ERROR BETWEEN FAUST_UHAT*D*Faust_UHAT.transpose AND DATA LAPLACIAN MATRIX **************** "<<std::endl;
	std::cout<< "\t\t" << relativeError<<std::endl<<std::endl;


	return 0;
}
