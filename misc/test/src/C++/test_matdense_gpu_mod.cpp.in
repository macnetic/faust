#include "faust_constant.h"

#include "faust_MatDense_gpu.h"
#include "faust_MatSparse.h"
#include "faust_MatSparse_gpu.h"
#include "faust_Vect_gpu.h"
#include "faust_gpu_mod_utils.h"
#include "faust_cuda_device.h"
#include <cstdlib>
#include <cmath>

typedef @TEST_FPP@ FPP;

using namespace std;
using namespace Faust;

template<typename U>
double calc_err(MatDense<U, GPU2> &gpu_mat, MatDense<U, Cpu> &cpu_mat)
{
	auto gpu_mat_to_cpu = gpu_mat.tocpu();
	auto err_diff = cpu_mat;
	err_diff -= gpu_mat_to_cpu;
	auto err = err_diff.norm()/cpu_mat.norm();
	if(err > 1e-6)
		cout << "calc_err > err: " << err << endl;
	return err;
}

void test_mul_gpu_dense()
{
	faust_unsigned_int nrows = 1024, ncols = 1024;
	faust_unsigned_int nrows2 = 1024, ncols2 = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	auto cpu_mat2 = Faust::MatDense<FPP,Cpu>::randMat(nrows2,ncols2);
	MatDense<FPP,GPU2> gpu_mat2(nrows2, ncols2, cpu_mat2->getData());
	// test MatDense<FPP,GPU2> * MatDense<FPP,GPU2>
	cout << "Mul. GPUDense*GPUDense in GPUDense" << endl;
	gpu_mat1.multiply(gpu_mat2);
	auto cpu_mat1_mat2_test = gpu_mat2.tocpu();
	auto cpu_mat1_mat2_ref = *cpu_mat2;
	cpu_mat1->multiply(cpu_mat1_mat2_ref, 'N');
	cout << "ref norm: " << cpu_mat1_mat2_ref.norm() << endl;
	cout << "test norm: " << cpu_mat1_mat2_test.norm() << endl;
	auto err_diff = cpu_mat1_mat2_ref;
	err_diff -= cpu_mat1_mat2_test;
	cout << "err mul.: " << err_diff.norm()/cpu_mat1_mat2_ref.norm() << endl;
	cout << "OK" << endl;
	cout << "Mul. GPUDense*CPUDense in CPUDense" << endl;
	cpu_mat1_mat2_test = *cpu_mat2;
	gpu_mat1.multiply(cpu_mat1_mat2_test);
	err_diff = cpu_mat1_mat2_ref;
	err_diff -= cpu_mat1_mat2_test;
	cout << "err mul.: " << err_diff.norm()/cpu_mat1_mat2_ref.norm() << endl;
	cout << "OK" << endl;
	cout << "Mul. GPUDense*CPUSparse in CPUDense" << endl;
	Faust::MatSparse<FPP,Cpu> cpu_mat2_sparse(*cpu_mat2);
//	cout << cpu_mat2_sparse.to_string(false, true) << endl;
//	cout << cpu_mat2->to_string(false, true) << endl;
	gpu_mat1.multiply(cpu_mat2_sparse, cpu_mat1_mat2_test);
	err_diff = cpu_mat1_mat2_ref;
	err_diff -= cpu_mat1_mat2_test;
	cout << "ref norm: " << cpu_mat1_mat2_ref.norm() << endl;
	cout << "test norm: " << cpu_mat1_mat2_test.norm() << endl;
//	cout << cpu_mat1_mat2_ref.to_string(false, true) << endl;
//	cout << cpu_mat1_mat2_test.to_string(false, true) << endl;
	cout << "err mul.: " << err_diff.norm()/cpu_mat1_mat2_ref.norm() << endl;
	cout << "OK" << endl;
	cout << "Mul. GPUDense*CPUSparse in GPUDense" << endl;
	MatDense<FPP, GPU2> gpu_mat1_mat2_test(nrows, ncols2);
	gpu_mat1.multiply(cpu_mat2_sparse, gpu_mat1_mat2_test);
	auto gpu_mat1_mat2_test_to_cpu = gpu_mat1_mat2_test.tocpu();
	err_diff = gpu_mat1_mat2_test_to_cpu;
	err_diff -= cpu_mat1_mat2_ref;
	cout << "err mul.: " << err_diff.norm()/cpu_mat1_mat2_ref.norm() << endl;
	cout << "OK" << endl;
	cout << "MatDense*cpu_vec" << endl;
	Faust::Vect<FPP, Cpu>* vec = Faust::Vect<FPP,Cpu>::rand(cpu_mat1->getNbCol());
	Faust::Vect<FPP, Cpu> vec_copy(*vec);
	cout << vec->norm() << endl;
	cout << vec_copy.norm() << endl;
	gpu_mat1.multiply(*vec);
	vec_copy = cpu_mat1->multiply(vec_copy);
//	cout << vec->size() << endl;
//	cout << vec_copy.size() << endl;
//	cout << vec->norm() << endl;
//	cout << vec_copy.norm() << endl;
	auto err_vec_diff = vec_copy;
	err_vec_diff -= *vec;
	assert(err_vec_diff.norm() / vec_copy.norm() < 1e-3);
	cout << "OK" << endl;
}

void test_mul_eq_op()
{
	cout << "test_mul_eq_op *=" << endl;
	// generate two random cpu dense mats: cpu_mat1 and cpu_mat2
	// convert the two cpu mats to gpu mats
	faust_unsigned_int nrows = 1024, ncols = 1024;
	faust_unsigned_int nrows2 = 1024, ncols2 = 784;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	auto cpu_mat2 = Faust::MatDense<FPP,Cpu>::randMat(nrows2,ncols2);
	MatDense<FPP,GPU2> gpu_mat2(nrows2, ncols2, cpu_mat2->getData());
	// test *=
	*cpu_mat1 *= *cpu_mat2;
	gpu_mat1 *= *cpu_mat2;
	assert(calc_err(gpu_mat1, *cpu_mat1) < 1e-6);
	cout << "OK" << endl;
}

void test_mul_spm()
{
	cout << "test_mul_spm()" << endl;
	faust_unsigned_int nrows = 1024, ncols = 784;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	Faust::MatSparse<FPP, Cpu> *cpu_mat2_sp = Faust::MatSparse<FPP, Cpu>::randMat(ncols, nrows, .2);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	gpu_mat1.multiplyLeft(*cpu_mat2_sp);
	cpu_mat1->multiplyLeft(*cpu_mat2_sp);
//	cout << gpu_mat1.tocpu().to_string(false, true) << endl;
//	cout << "---" << endl;
//	cout << cpu_mat1->to_string(false, true) << endl;
	assert(calc_err(gpu_mat1, *cpu_mat1) < 1e-6);
	cout << "OK" << endl;
}

void test_resize()
{
	cout << "Test resize()" << endl;
	faust_unsigned_int nrows = 1024, ncols = 784;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	gpu_mat1.resize(45, 12);
	cout << "OK" << endl;
}

void test_setones()
{
	cout << "Test setones()" << endl;
	faust_unsigned_int nrows = 1024, ncols = 784;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols);
	gpu_mat1.setOnes();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
//	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	cpu_mat1->setOnes();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err setones.: " << err_diff.norm()/cpu_mat1->norm() << endl;
	cout << "OK" << endl;
}

void test_setzeros()
{
	cout << "Test setzeros()" << endl;
	faust_unsigned_int nrows = 1024, ncols = 784;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols);
	gpu_mat1.setZeros();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
//	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	assert(gpu_mat1_to_cpu.norm() == 0.);
	cout << "OK" << endl;
}

void test_seteyes()
{
	cout << "Test seteyes()" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols);
	gpu_mat1.setEyes();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	cpu_mat1->setEyes();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err seteyes.: " << err_diff.norm()/cpu_mat1->norm() << endl;
	cout << "OK" << endl;
}

void test_clone()
{
	cout << "Test clone()" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto gpu_mat1_clone = gpu_mat1.clone();
	auto gpu_mat1_clone_to_cpu = gpu_mat1_clone->tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_clone_to_cpu;
//	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
//	cout << gpu_mat1_clone_to_cpu.to_string(false, true) << endl;
	cout << "err clone: " << err_diff.norm()/cpu_mat1->norm() << endl;
	delete gpu_mat1_clone; // matrix in heap
	cout << "OK" << endl;
}

void test_transpose()
{
	cout << "Test transpose" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
//	cout << cpu_mat1->to_string(false, true) << endl;
	cpu_mat1->transpose();
	gpu_mat1.transpose();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err transpose: " << err_diff.norm()/cpu_mat1->norm() << endl;
//	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	assert(nrows == cpu_mat1->getNbCol() &&  nrows == gpu_mat1_to_cpu.getNbCol() && ncols == gpu_mat1_to_cpu.getNbRow() && ncols == cpu_mat1->getNbRow());
	cout << "OK" << endl;
}

void test_adjoint()
{
	cout << "Test adjoint" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
//	cout << cpu_mat1->to_string(false, true) << endl;
	cpu_mat1->adjoint();
	gpu_mat1.adjoint();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err adjoint: " << err_diff.norm()/cpu_mat1->norm() << endl;
//	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	assert(nrows == cpu_mat1->getNbCol() &&  nrows == gpu_mat1_to_cpu.getNbCol() && ncols == gpu_mat1_to_cpu.getNbRow() && ncols == cpu_mat1->getNbRow());
	cout << "OK" << endl;
}

void test_conjugate()
{
	cout << "Test conjugate" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
//	cout << cpu_mat1->to_string(false, true) << endl;
	cpu_mat1->conjugate();
	gpu_mat1.conjugate();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err conjugate: " << err_diff.norm()/cpu_mat1->norm() << endl;
//	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	assert(ncols == cpu_mat1->getNbCol() &&  ncols == gpu_mat1_to_cpu.getNbCol() && nrows == gpu_mat1_to_cpu.getNbRow() && nrows == cpu_mat1->getNbRow());
	cout << "OK" << endl;
}

void test_norm()
{
	cout << "test spectral norm" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	int flag;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	auto gpu_norm = gpu_mat1.spectralNorm(1000, (float)1e-6);
	auto cpu_norm = cpu_mat1->spectralNorm(1000, 1e-6, flag);
//	cout << gpu_norm << endl;
//	cout << cpu_norm << endl;
	assert(abs(cpu_norm-gpu_norm) < 1e-6);
	cout << "OK" << endl;
	cout << "test frob norm" << endl;
	gpu_norm = gpu_mat1.norm();
	cpu_norm = cpu_mat1->norm();
	assert(abs(cpu_norm-gpu_norm) < 1e-6);
	cout << "OK" << endl;
	cout << "test l1 norm" << endl;
	gpu_norm = gpu_mat1.normL1();
	cpu_norm = cpu_mat1->normL1();
	cout << "gpu: " << gpu_norm << " cpu: " << cpu_norm << endl;
	assert(abs(cpu_norm-gpu_norm) < 1e-6);
	cout << "OK" << endl;
}

void test_normalize()
{
	cout << "test normalize" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	cpu_mat1->normalize();
	gpu_mat1.normalize();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err normalize: " << err_diff.norm()/cpu_mat1->norm() << endl;
	assert(abs(gpu_mat1.norm()-1) < 1e-6);
	cout << "OK" << endl;
}

void test_scalar_mul()
{
	cout << "test scalar mul" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto lambda = FPP(12.);
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	cpu_mat1->scalarMultiply(lambda);
	gpu_mat1.scalarMultiply(lambda);
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err scalar mul: " << err_diff.norm()/cpu_mat1->norm() << endl;
	cout << "OK" << endl;
}

void test_abs()
{
	cout << "test abs" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto lambda = 12.;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	cpu_mat1->scalarMultiply(FPP(-1));
	cout << cpu_mat1->to_string(false, true) << endl;
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	cpu_mat1->abs();
	gpu_mat1.abs();
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	cout << gpu_mat1_to_cpu.to_string(false, true) << endl;
	cout << cpu_mat1->to_string(false, true) << endl;
	err_diff -= gpu_mat1_to_cpu;
	cout << "err scalar mul: " << err_diff.norm()/cpu_mat1->norm() << endl;
	cout << "OK" << endl;
}

void test_add()
{
	cout << "test add" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto lambda = 12.;
	// test MatDense<FPP, GPU2> + MatDense<FPP, Cpu>
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	auto cpu_mat2 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	cpu_mat1->add(*cpu_mat2);
	gpu_mat1.add(*cpu_mat2);
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	auto err = err_diff.norm()/cpu_mat1->norm();
	assert(err < 1e-6);
	// test MatDense<FPP, GPU2> + MatSparse<FPP, Cpu>
	Faust::MatSparse<FPP, Cpu> *cpu_mat3_sp = Faust::MatSparse<FPP, Cpu>::randMat(nrows, ncols, .2);
//	cpu_mat3_sp->Display();
//	cout << cpu_mat3_sp->to_string(false, true) << endl;
	assert(calc_err(gpu_mat1, *cpu_mat1) < 1e-6);
//	cout << gpu_mat1.tocpu().to_string(false, true) << endl;
//	cout << cpu_mat1->to_string(false, true) << endl;
	cpu_mat1->add(*cpu_mat3_sp);
	gpu_mat1.add(*cpu_mat3_sp);
//	cout << cpu_mat1->to_string(false, true) << endl;
//	cout << gpu_mat1.tocpu().to_string(false, true) << endl;
	auto err_add_sp = calc_err(gpu_mat1, *cpu_mat1);
//	cout << err_add_sp << endl;
	assert(err_add_sp < 1e-6);
	cout << "OK" << endl;
}

void test_sub()
{
	cout << "test sub" << endl;
	faust_unsigned_int nrows = 1024, ncols = 1024;
	auto lambda = 12.;
	// test MatDense<FPP, GPU2> + MatDense<FPP, Cpu>
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	auto cpu_mat2 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	cpu_mat1->sub(*cpu_mat2);
	gpu_mat1.sub(*cpu_mat2);
	auto gpu_mat1_to_cpu = gpu_mat1.tocpu();
	auto err_diff = *cpu_mat1;
	err_diff -= gpu_mat1_to_cpu;
	auto err = err_diff.norm()/cpu_mat1->norm();
	assert(err < 1e-6);
	// test MatDense<FPP, GPU2> + MatSparse<FPP, Cpu>
	return;
	//TODO: fix below test error
	Faust::MatSparse<FPP, Cpu> *cpu_mat3_sp = Faust::MatSparse<FPP, Cpu>::randMat(nrows, ncols, .2);
//	cpu_mat3_sp->Display();
//	cout << cpu_mat3_sp->to_string(false, true) << endl;
	assert(calc_err(gpu_mat1, *cpu_mat1) < 1e-6);
//	cout << gpu_mat1.tocpu().to_string(false, true) << endl;
//	cout << cpu_mat1->to_string(false, true) << endl;
	cpu_mat1->sub(*cpu_mat3_sp);
	gpu_mat1.sub(*cpu_mat3_sp);
//	cout << cpu_mat1->to_string(false, true) << endl;
//	cout << gpu_mat1.tocpu().to_string(false, true) << endl;
	auto err_sub_sp = calc_err(gpu_mat1, *cpu_mat1);
//	cout << err_sub_sp << endl;
	assert(err_sub_sp < 1e-6);
	cout << "OK" << endl;
}

void test_get_device()
{
	cout << "test MatDense<FPP,GPU2>::getDevice" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_ds_mat = Faust::MatDense<FPP, Cpu>::randMat(nrows, ncols);
	Faust::MatDense<FPP, GPU2> gpu_ds_mat(nrows, ncols, cpu_ds_mat->getData());
	auto dev_id = gpu_ds_mat.getDevice();
	cout << "device id: " << dev_id << endl;
	delete cpu_ds_mat;
}

void test_move()
{
	cout << "test MatDense<FPP,GPU2>::move" << endl;
	auto nrows = 5;
	auto ncols = 8;
	auto cpu_ds_mat = Faust::MatDense<FPP, Cpu>::randMat(nrows, ncols);
	Faust::MatDense<FPP, GPU2> gpu_ds_mat(nrows, ncols, cpu_ds_mat->getData());
	auto ndevs = Faust::count_devices();
	cout << "device count: " << ndevs << endl;
	int32_t dest_dev = -1;
	if(ndevs > 1)
	{
		// use the last device as destination if more than one are available
		dest_dev = ndevs -1;
	}
	gpu_ds_mat.move(/*dev_id*/dest_dev, /*stream*/ nullptr);
	cout << "gpu_sp_mat.getDevice():" << gpu_ds_mat.getDevice() << endl;
	assert(dest_dev == -1 || gpu_ds_mat.getDevice() == dest_dev);
	cout << "new device id: " << gpu_ds_mat.getDevice() << endl;
	auto gpu_ds_mat_to_cpu = gpu_ds_mat.tocpu();
	auto err_diff = *cpu_ds_mat;
	err_diff -= gpu_ds_mat_to_cpu;
	auto err = err_diff.norm()/cpu_ds_mat->norm();
	assert(err < 1e-6);
	delete cpu_ds_mat;
}

void test_mul_vec()
{
	cout << "test MatDense<FPP,GPU2>::multiply(const Vect<FPP,GPU2> &vec, const Vect<FPP,GPU2> out_vec)" << endl;
	auto size = 2048;
	auto nrows = 1024;
	auto ncols = size;
	auto vec_mat = MatDense<FPP, Cpu>::randMat(size, 1);
	Faust::Vect<FPP, Cpu> v_cpu(size, vec_mat->getData());
	Faust::Vect<FPP, GPU2> v_gpu(size, vec_mat->getData());
	Faust::Vect<FPP, GPU2> v_gpu_out(nrows);
	auto cpu_mat = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat(nrows, ncols, cpu_mat->getData());
	gpu_mat.multiply(v_gpu, v_gpu_out);
	auto v_gpu_out_cpu = v_gpu_out.tocpu();
	v_gpu_out_cpu.Display();
	auto v_cpu_out = cpu_mat->multiply(v_cpu);
	v_cpu_out.Display();
	auto diff = v_cpu_out;
	diff -= v_gpu_out_cpu;
	auto err = diff.norm()/v_cpu_out.norm();
	assert(err < 1e-3);
}

void test_eltwise_mul_vec()
{
	cout << "test MatDense<FPP,GPU2>::eltwise_mul(const Vect<FPP,GPU2> &vec)" << endl;
	auto size = 2048;
	auto nrows = 1024;
	auto ncols = size;
	auto vec_mat = MatDense<FPP, Cpu>::randMat(size, 1);
	Faust::Vect<FPP, Cpu> v_cpu(size, vec_mat->getData());
	Faust::Vect<FPP, GPU2> v_gpu(size, vec_mat->getData());
	auto cpu_mat = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	MatDense<FPP,GPU2> gpu_mat(nrows, ncols, cpu_mat->getData());
	gpu_mat.eltwise_mul(v_gpu);
	auto cpu_mat_out = gpu_mat.tocpu();
	cpu_mat_out.Display();
	// test each element
	for(int i=0; i < cpu_mat->getNbRow();i++)
		for(int j=0; j < cpu_mat->getNbCol(); j++)
		{
			auto test_elt = cpu_mat_out.getData()[j*cpu_mat_out.getNbRow()+i];
			auto ref_elt = cpu_mat->getData()[j*cpu_mat_out.getNbRow()+i] * v_cpu[i];
			assert(std::abs(test_elt - ref_elt) < 1e-6);
		}
	delete cpu_mat;
	delete vec_mat;
}

void test_gpu_matsparse2matdense()
{
	cout << "test MatDense<FPP,GPU2>::MatDense<FPP,GPU2>(MatSparse<FPP,GPU2>&)" << endl;
	auto sM = Faust::MatSparse<FPP,Cpu>::randMat(22, 33, .2);
	Faust::MatSparse<FPP,GPU2> sM_gpu(*sM);
	MatDense<FPP,GPU2> dM_gpu(sM_gpu);
	cout << sM_gpu.norm() << " " << dM_gpu.norm() << endl;
	assert(abs(sM_gpu.norm()-dM_gpu.norm())< 1e-4);
	cout << "OK" << endl;
}

void test_gpu_gemm()
{
	cout << "test gemm" << endl;
}

void test_trace()
{
}

void test_real()
{
	cout << "test real()" << endl;
	faust_unsigned_int nrows = 10, ncols = 10;
	auto cpu_mat1 = Faust::MatDense<FPP,Cpu>::randMat(nrows,ncols);
	cout << "cpu_mat1" << endl;
	cpu_mat1->Display();
	MatDense<Real<FPP>, Cpu> cpu_mat_ref;
	cpu_mat1->real(cpu_mat_ref);
	cout << "cpu_mat_ref" << endl;
	cpu_mat_ref.Display();
	cout << cpu_mat_ref.norm() << endl;
	MatDense<FPP,GPU2> gpu_mat1(nrows, ncols, cpu_mat1->getData());
	MatDense<Real<FPP>, GPU2> gpu_mat2;
	gpu_mat1.real(gpu_mat2);
	cout << "gpu_mat2" << endl;
	gpu_mat2.Display();
	cout << gpu_mat2.norm() << endl;
	assert(calc_err<Real<FPP>>(gpu_mat2, cpu_mat_ref) < 1e-6);
}

int main(int argc, char** argv)
{
	Faust::enable_gpu_mod();
	test_eltwise_mul_vec();
	test_real();
	test_mul_gpu_dense();
	test_resize();
	test_setones();
	test_setzeros();
	test_seteyes();
	test_clone();
	test_transpose();
	test_conjugate();
	test_adjoint();
	test_norm();
	test_normalize();
	test_scalar_mul();
	test_abs();
	test_add();
	test_sub();
	test_mul_eq_op();
//	test_mul_spm(); //TODO: TOFIX
	test_get_device();
	test_move();
	test_mul_vec();
	test_gpu_matsparse2matdense();
	test_trace();
	return EXIT_SUCCESS;
}
