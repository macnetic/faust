#include "faust_MatDiag.h"
#include "faust_MatSparse.h"
#include <cstdlib>


#include <complex>

using namespace Faust;
typedef @TEST_FPP@ FPP;
typedef @TEST_FPP2@ FPP2;



void display_all_elts(MatDense<FPP,Cpu> matdense)
{
	for(int i=0;i<matdense.getNbRow();i++)
	{
		for(int j=0;j<matdense.getNbCol();j++)
			cout << matdense(i,j) << " ";
		cout << endl;
	}
}

void display_all_elts(Faust::MatSparse<FPP,Cpu> matsp)
{
	display_all_elts(MatDense<FPP,Cpu>(matsp));
}

void display_all_elts(MatDiag<FPP> matdiag)
{
	display_all_elts(Faust::MatSparse<FPP,Cpu>(matdiag));
}

int main()
{
	cout << "start of test_MatDiag" << endl;
	FPP data[10];
	for(int i=0; i < 10; i++)
#if(@TEST_IS_COMPLEX@==1)
		data[i] = FPP(i,i);
#else
		data[i] = FPP(i);
#endif
	data[4] = FPP(0);
	MatDiag<FPP> diagMat (10, data);
	cout << diagMat.to_string(false,true) << endl;
	cout << "test mul by scalar: 5" << endl;
	diagMat *= 5;
	cout << diagMat.to_string(false,true) << endl;
	cout << "try to convert to a MatSparse" << endl;
	Faust::MatSparse<FPP,Cpu> matsp(diagMat);
	cout << matsp.to_string(false,true) << endl;
	display_all_elts(diagMat);
	cout << "conjugate()" << endl;
	diagMat.conjugate();
	display_all_elts(diagMat);
	cout << "vec mul.:" << endl;
	FPP vec_data[diagMat.getNbCol()];
	for(int i=0;i<diagMat.getNbCol();i++)
		vec_data[i] = FPP(i);
	const Faust::Vect<FPP,Cpu> v(diagMat.getNbCol(), vec_data);
	Faust::Vect<FPP,Cpu> vr = diagMat.multiply(v);
	vr.Display();
	cout << "mat. mul.:" << endl;
	MatDense<FPP,Cpu>* M = MatDense<FPP,Cpu>::randMat(diagMat.getNbCol(), 4);
	cout << "matrix to mul." << endl;
	*M *= FPP(20);
	display_all_elts(*M);
	diagMat.multiply(*M, 'N');
	cout << "matrix multiplied:" << endl;
	display_all_elts(*M);
	cout << "Clone()" << endl;
	MatGeneric<FPP,Cpu>* diagMatClone = diagMat.Clone();
	display_all_elts(diagMat);
	FPP n = diagMat.normL1();
	cout << "1-norm:" << n << endl;
	n = diagMat.norm();
	cout << "fro-norm:" << n << endl;
	cout << "getcol(3)" << endl;
	diagMat.get_col(3).Display();
	cout << "getcol(5)" << endl;
	diagMat.get_col(5).Display();
	cout << "getcols(2,5)" << endl;
	MatGeneric<FPP,Cpu>* cols = diagMat.get_cols(2,5);
	display_all_elts(*dynamic_cast<MatDiag<FPP>*>(cols));
	cout << "getrows(2,5)" << endl;
	MatGeneric<FPP,Cpu>* rows = diagMat.get_rows(2,5);
	display_all_elts(*dynamic_cast<MatDiag<FPP>*>(rows));
	cout << "get_rows unordered 2, 3, 8" << endl;
	faust_unsigned_int rids[3] = {2, 3, 8};
	MatGeneric<FPP,Cpu>* sprows = diagMat.get_rows(rids, 3);
	display_all_elts(*dynamic_cast<Faust::MatSparse<FPP,Cpu>*>(sprows));
	cout << "get_cols unordered 2, 3, 8" << endl;
	faust_unsigned_int cids[3] = {2, 3, 8};
	MatGeneric<FPP,Cpu>* spcols = diagMat.get_cols(cids, 3);
	display_all_elts(*dynamic_cast<Faust::MatSparse<FPP,Cpu>*>(spcols));
	cout << "end of test_MatDiag" << endl;
	return EXIT_SUCCESS;
}
