#include "faust_EigTJ.h"
#include "faust_MatDense.h"
#include "faust_init_from_matio_params.h"
#include "faust_init_from_matio_core.h"
#include "faust_Transform.h"
#include "faust_MatSparse.h"
#include "EigTJUtilReal.h"

#include <complex>

using namespace Faust;
typedef @TEST_FPP@ FPP;
typedef @TEST_FPP2@ FPP2;

/***
 * This test results have to be compared with what misc/test/src/Matlab/test_GivensDiag.m outputs.
 * That's a way to validate the C++ impl. of EigTJ.
 */


int main()
{
	Faust::MatDense<FPP,Cpu> Lap, U;
	int J;
	const char * conf_file = "@FAUST_DATA_MAT_DIR@/test_GivensDiag_Lap_U_J.mat";

	init_faust_mat_from_matio(Lap,conf_file,"Lap");
	J = init_int_from_matio(conf_file, "J");

	Faust::MatSparse<FPP,Cpu> spLap(Lap);
	// Execute the algorithm
	EigTJ<FPP,Cpu,FPP> algo(spLap, J);
	algo.compute_facts();

	// Compare pivot choices along the iterations (between matlab ref and C++ impl.)
	test_pivot_choices(&algo, conf_file);

	test_eigenvalues<FPP,Cpu,FPP2>(&algo, conf_file);

	test_eigentransform<FPP,Cpu,FPP2>(&algo, conf_file);

	// Compare iteration errors from Matlab with errors from C++
	test_ite_errors<FPP,Cpu,FPP2>(&algo, conf_file);

	test_err_against_Laplacian<FPP,Cpu,FPP2>(&algo, conf_file);

	return 0;
}

