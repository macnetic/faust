/****************************************************************************//*{{{*/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************//*}}}*/
#include "faust_MatDense.h"
#include "faust_Params.h"
#include "faust_ParamsPalm.h"
#include "faust_StoppingCriterion.h"
#include "faust_init_from_matio.h"
#include "faust_init_from_matio_mat.h"
#include "faust_Palm4MSA.h"
#include "faust_BlasHandle.h"

#include <iostream>

// modif AL AL
//#include "faust_ConstraintInt.h"
//#include "faust_ConstraintFPP.h"

using namespace std;
typedef @TEST_FPP@ FPP;
typedef @TEST_FPP2@ FPP2;


void create_matrix(Faust::MatDense<complex<FPP2>,Cpu>& data, Faust::MatDense<complex<FPP2>,Cpu>& idata)
{
	idata = data;
	idata.scalarMultiply(complex<FPP2>(0,1));
	data += idata;
}

void create_matrix(Faust::MatDense<FPP2,Cpu>& data, Faust::MatDense<FPP2,Cpu>& idata)
{
	//nothing todo
}

/** \brief Run a test of Faust::Palm4MSA
 */
int main()
{
	Faust::MatDense<FPP,Cpu> data, idata, initFacts1, initFacts2;

	char configPalm2Filename[] = "@FAUST_DATA_MAT_DIR@/config_compared_palm2.mat";

	init_faust_mat_from_matio(data, configPalm2Filename, "data");
	create_matrix(data, idata);
	init_faust_mat_from_matio(initFacts1, configPalm2Filename, "init_facts1");
	init_faust_mat_from_matio(initFacts2, configPalm2Filename, "init_facts2");

	int cons1Name, cons1Parameter, cons1Row, cons1Col;
	int cons2Name, cons2Row, cons2Col;
	FPP2 cons2Parameter;
	int nfacts, niter;
	bool updateWay, verbose;
	FPP2 initLambda;

	cons1Name = init_int_from_matio(configPalm2Filename, "cons1_name");
	cons1Parameter = init_int_from_matio(configPalm2Filename, "cons1_parameter");
	cons1Row = init_int_from_matio(configPalm2Filename, "cons1_row");
	cons1Col = init_int_from_matio(configPalm2Filename, "cons1_col");

	cons2Name = init_int_from_matio(configPalm2Filename, "cons2_name");
	cons2Parameter = (FPP2) init_double_from_matio(configPalm2Filename, "cons2_parameter");
	cons2Row = init_int_from_matio(configPalm2Filename, "cons2_row");
	cons2Col = init_int_from_matio(configPalm2Filename, "cons2_col");


	initLambda = (FPP2) init_double_from_matio(configPalm2Filename, "init_lambda");
	nfacts = init_int_from_matio(configPalm2Filename, "nfacts");
	niter = init_int_from_matio(configPalm2Filename, "niter");

	updateWay = init_bool_from_matio(configPalm2Filename, "update_way");
	verbose = init_bool_from_matio(configPalm2Filename, "verbose");

	// Creation du vecteur de contrainte
	const Faust::ConstraintInt<FPP,Cpu> cons1(static_cast<faust_constraint_name>(cons1Name), cons1Parameter, cons1Row, cons1Col);
	const Faust::ConstraintFPP<FPP,Cpu,FPP2> cons2(static_cast<faust_constraint_name>(cons2Name), cons2Parameter, cons2Row, cons2Col);

	vector<const Faust::ConstraintGeneric*> cons;
	cons.push_back(&cons1);
	cons.push_back(&cons2);


	// Creation du vecteur de matrice initFact;
	vector<Faust::MatDense<FPP,Cpu> > initFact;
	initFact.push_back(initFacts1);
	initFact.push_back(initFacts2);

	// Creation du critere d'arret
	Faust::StoppingCriterion<FPP2> crit(niter);

	Faust::ParamsPalm<FPP,Cpu,FPP2> params(data, nfacts, cons, initFact, crit, verbose, updateWay, initLambda);
	Faust::BlasHandle<Cpu> blasHandle;

	Faust::Palm4MSA<FPP,Cpu,FPP2> palm2(params,blasHandle,true);

//	palm2.next_step();
	palm2.compute_facts();
    std::vector<Faust::MatDense<FPP,Cpu> >& full_facts = const_cast< std::vector<Faust::MatDense<FPP,Cpu> >&>(palm2.get_facts());
	FPP2 lambda = palm2.get_lambda();
	(full_facts[0]) *= FPP(lambda);

	Faust::Transform<FPP, Cpu>* t = new Faust::Transform<FPP, Cpu>(full_facts);
	//relativeError
	Faust::MatDense<FPP,Cpu> faustProduct;
	faustProduct=t->get_product();
	faustProduct-=data;
	FPP2 relativeError = Faust::fabs(faustProduct.norm()/data.norm());

	std::cout<<std::endl;
	std::cout<<"**************** RELATIVE ERROR BETWEEN FAUST AND DATA MATRIX **************** "<<std::endl;
	std::cout<< "\t\t" << relativeError<<std::endl<<std::endl;


	return 0;
}
