#include "faust_TransformHelperButterfly.h"
#include "faust_MatButterfly.h"
#include <cstdio>

typedef @TEST_FPP@ FPP;

using namespace Faust;
using namespace std;

bool verifyVecEq(Vect<FPP, Cpu> refv, Vect<FPP, Cpu> testv, double tol)
{
	auto err = refv;
	err -= testv;
	return err.norm() <= 1e-6;
}


bool verifyMatEq(MatDense<FPP, Cpu> refm, MatDense<FPP, Cpu> testm, double tol)
{
	auto err = refm;
	err -= testm;
	return err.norm() <= 1e-6;
}

void testClone(MatButterfly<FPP, Cpu>& butterflyMat)
{
	auto size = butterflyMat.getNbRow();
	auto clone = butterflyMat.Clone();
	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	MatDense<FPP, Cpu> refY_(*X);
	MatDense<FPP, Cpu> testY_(*X);

	butterflyMat.multiply(refY_, 'N');
	clone->multiply(testY_, 'N');

	assert(verifyMatEq(refY_, testY_, 1e-6));

	std::cout << "MatButterfly cloning OK" << std::endl;
	delete X;
	delete clone;
}

void testTranspose(MatButterfly<FPP, Cpu>& butterflyMat, MatSparse<FPP, Cpu>& spButterflyMat)
{
	auto size = butterflyMat.getNbRow();
	MatSparse<FPP, Cpu> trefsp(spButterflyMat);
	MatButterfly<FPP, Cpu> ttest(butterflyMat);

	auto X = MatDense<FPP, Cpu>::randMat(size, size);

	trefsp.transpose();
	ttest.transpose();

	MatDense<FPP, Cpu> refY_(*X);
	MatDense<FPP, Cpu> testY_(*X);

	trefsp.multiply(refY_, 'N');
	ttest.multiply(testY_, 'N');

	auto errY_ = testY_;
	errY_ -= refY_;
	assert(errY_.norm() <= 1e-6);

	// test transpose of transpose
	trefsp.transpose();
	ttest.transpose();

	refY_ = *X;
	testY_ = *X;

	trefsp.multiply(refY_, 'N');
	ttest.multiply(testY_, 'N');

	errY_ = testY_;
	errY_ -= refY_;
	assert(errY_.norm() <= 1e-6);

	// test mul of transpose by a vector
	Vect<FPP, Cpu> refy(X->getNbRow(), X->getData());
	Vect<FPP, Cpu> testy(X->getNbRow(), X->getData());

	trefsp.transpose();
	ttest.transpose();

	trefsp.multiply(refy, 'N');
	ttest.multiply(testy, 'N');

	auto erry = refy;
	erry -= testy;
	assert(erry.norm() <= 1e-6);

	// test mul of transpose of transpose by a vector
	Vect<FPP, Cpu> refy2(X->getNbRow(), X->getData());
	Vect<FPP, Cpu> testy2(X->getNbRow(), X->getData());

	trefsp.transpose();
	ttest.transpose();

	trefsp.multiply(refy2, 'N');
	ttest.multiply(testy2, 'N');

	erry = refy2;
	erry -= testy2;
	assert(erry.norm() <= 1e-6);

	delete X;


	std::cout << "MatButterfly transpose OK" << std::endl;
}

void testNNZSize(MatButterfly<FPP, Cpu>& butterflyMat, MatSparse<FPP, Cpu>& spButterflyMat)
{

	assert(butterflyMat.getNonZeros() == spButterflyMat.getNonZeros());
//	cout << "nbytes sp, butter:" << spButterflyMat.getNBytes() << " " << butterflyMat.getNBytes()  << endl;
	assert(butterflyMat.getNBytes() == (butterflyMat.getNbRow() * (2 * sizeof(FPP) + sizeof(int))));
	MatButterfly<FPP, Cpu> tbutterflyMat(butterflyMat);
	tbutterflyMat.transpose();
//	cout << "nbytes sp, tbutter:" << spButterflyMat.getNBytes() << " " << tbutterflyMat.getNBytes()  << endl;
	assert(tbutterflyMat.getNBytes() == (tbutterflyMat.getNbRow() * (3 * sizeof(FPP) + sizeof(int))));
	std::cout << "MatButterfly getNonZeros() and getNBytes() OK" << std::endl;
}

void testType(MatButterfly<FPP, Cpu>& butterflyMat)
{
	assert(butterflyMat.getType() == Butterfly);
	std::cout << "MatButterfly getType() OK" << std::endl;
}

void testScalMul(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{

	auto size = spButterflyMat.getNbRow();
	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	auto alpha = FPP(2.0);

	MatButterfly<FPP, Cpu> mButterflyMat(butterflyMat);
	MatSparse<FPP, Cpu> mspButterflyMat(spButterflyMat);

	mButterflyMat *= alpha;
	mspButterflyMat *= alpha;

	Vect<FPP, Cpu> refy(X->getNbRow(), X->getData());
	Vect<FPP, Cpu> testy(X->getNbRow(), X->getData());

	mButterflyMat.multiply(refy, 'N');
	mspButterflyMat.multiply(testy, 'N');

	assert(verifyVecEq(refy, testy, 1e-6));

	delete X;

	std::cout << "MatButterfly scal. mul OK" << std::endl;
}

void testNorm2(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
//	cout << butterflyMat.norm()  << endl;
//	cout << spButterflyMat.norm()  << endl;
	assert(std::abs(butterflyMat.norm() - spButterflyMat.norm()) < 1e-6);
	std::cout << "MatButterfly fro-norm OK" << std::endl;
}

void testNorm1(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
//	cout << butterflyMat.normL1()  << endl;
//	cout << spButterflyMat.normL1()  << endl;
	assert(std::abs(butterflyMat.normL1() - spButterflyMat.normL1()) < 1e-6);
	std::cout << "MatButterfly norm-1 OK" << std::endl;
}
void testToMatSparse(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
	auto convSpButterflyMat = butterflyMat.toMatSparse();

//	convSpButterflyMat.Display();
	assert(verifyMatEq(MatDense<FPP, Cpu>(convSpButterflyMat), MatDense<FPP, Cpu>(spButterflyMat), 1e-6));

	std::cout << "MatButterfly::toMatSparse OK" << std::endl;
}

void testGetCoeff(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
	for(int i=0;i < spButterflyMat.getNbRow(); i++)
		for(int j=0;j < spButterflyMat.getNbCol(); j++)
		{
//			cout << butterflyMat(i, j) << " " << spButterflyMat(i, j) << endl;
			assert(std::abs(butterflyMat(i, j) - spButterflyMat(i, j)) < 1e-6);
		}

	std::cout << "MatButterfly::operator() OK" << std::endl;
}


void testNZinds(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
	auto ref_indices = spButterflyMat.nonzeros_indices(1e-16);
	auto test_indices = butterflyMat.nonzeros_indices(1e-16);
//	std::cout << "sizes: " << ref_indices.size() << " " <<  test_indices.size() << std::endl;
	assert(ref_indices.size() == test_indices.size());
	for(auto rit=ref_indices.begin(); rit != ref_indices.end(); rit++)
	{
		auto ref_ind = *rit;
		bool ind_found = false;
		for(auto tit = test_indices.begin(); tit != test_indices.end(); tit++)
		{
			auto test_ind = *tit;
			if(ref_ind.first == test_ind.first && ref_ind.second == test_ind.second)
			{
				ind_found = true;
			}
		}
		assert(ind_found);
	}
	std::cout << "MatButterfly::nonzeros_indices() OK" << std::endl;
}

void testHasNaN(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
	assert(butterflyMat.containsNaN() == spButterflyMat.containsNaN());
	std::cout << "MatButterfly::containsNaN OK" << std::endl;
}

void testGemm(const MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
	auto size = butterflyMat.getNbRow();
	auto B = MatDense<FPP, Cpu>::randMat(size, size);
	auto C = MatDense<FPP, Cpu>::randMat(size, size);

	MatDense<FPP, Cpu> Cr(*C); // ref
	MatDense<FPP, Cpu> Ct(*C); // test

	const char *Aops = "NTH";
	const char *Bops = "NTH";

	FPP* scal = new FPP[3];
	scal[0] = FPP(0);
	scal[1] = FPP(1);
	scal[2] = FPP(2);

	for(int i = 0; i < std::strlen(Aops); i++)
	{
		auto Aop = Aops[i];
		for(int j = 0; j < std::strlen(Bops); j++)
		{
			auto Bop = Bops[j];
			for(int k = 0; k < 3; k++)
			{

				FPP alpha = scal[k];
				for(int l = 0; l < 3; l++)
				{
					FPP beta = scal[k];
//					cout << "Aop: " << Aop << " Bop: " << Bop << endl;
//					cout << "alpha: " << alpha << " beta: " << beta << endl;
					spButterflyMat.faust_gemm(*B, Cr, alpha, beta, Aop, Bop);
					butterflyMat.faust_gemm(*B, Ct, alpha, beta, Aop, Bop);
					assert(verifyMatEq(Cr, Ct, 1e-6));
				}
			}
		}
	}
	std::cout << "MatButterfly::testGemm OK" << std::endl;
}

void testCloneTranspConj(MatButterfly<FPP, Cpu>& butterflyMat,  const MatSparse<FPP, Cpu>& spButterflyMat)
{
	// it is equivalent to test MatButterfly::adjoint
	auto size = butterflyMat.getNbRow();

	auto clone = butterflyMat.Clone();
	clone->transpose();
	clone->conjugate();

	MatSparse<FPP, Cpu> spMat = spButterflyMat;
	spMat.transpose();
	spMat.conjugate();

	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	MatDense<FPP, Cpu> refY_(*X);
	MatDense<FPP, Cpu> testY_(*X);

	spMat.multiply(refY_, 'N');
	clone->multiply(testY_, 'N');

	assert(verifyMatEq(refY_, testY_, 1e-6));

	std::cout << "MatButterfly clone+transpose+conjugate OK" << std::endl;
	delete X;
	delete clone;
}

int main(int argc, char** argv)
{
	int log2size = 4;
	if(argc > 1)
		log2size = std::atoi(argv[1]);
	std::cout << "log2size: " << log2size << std::endl;

	int size = 1 << log2size;
	auto F = TransformHelper<FPP, Cpu>::fourierFaust(log2size, false);
	auto dsButterflyMat = F->get_fact(0);
	MatSparse<FPP, Cpu> spButterflyMat(dsButterflyMat);
	MatButterfly<FPP, Cpu> butterflyMat(spButterflyMat, /* level */ 0);

	Vect<FPP, Cpu> x(size);
	x.setRand();
	const Vect<FPP, Cpu> x_(x);
//	x.setOnes();

	Vect<FPP, Cpu> ref_v = spButterflyMat.multiply(x_);
	Vect<FPP, Cpu> test_v = butterflyMat.multiply(x_);

	ref_v.Display();
	test_v.Display();
	auto err = test_v;
	err -= ref_v;
	assert(err.norm() <= 1e-6);
	std::cout << "butterfly-vector product OK" << std::endl;


	// test multiplying a MatDense
	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	MatDense<FPP, Cpu> refY(*X);
	MatDense<FPP, Cpu> testY(*X);

	spButterflyMat.multiply(refY, 'N');
	butterflyMat.multiply(testY, 'N');

	auto errY = testY;
	errY -= refY;
	assert(errY.norm() <= 1e-6);

	std::cout << "Faust-dense matrix product OK" << std::endl;

	// test multiplying a MatSparse
	auto spX = MatSparse<FPP, Cpu>::randMat(size, size, .2);
	MatSparse<FPP, Cpu> refYsp(*spX);
	MatSparse<FPP, Cpu> testYsp(*spX);
	//	 X->setOnes();

	spButterflyMat.multiply(refYsp, 'N');
	butterflyMat.multiply(testYsp, 'N');

	MatDense<FPP, Cpu> errYsp = testYsp;
	errYsp -= refYsp;
	assert(errYsp.norm() <= 1e-6);

	std::cout << "Faust-sparse matrix product OK" << std::endl;

	testClone(butterflyMat);

	testTranspose(butterflyMat, spButterflyMat);
	testNNZSize(butterflyMat, spButterflyMat);
	testType(butterflyMat);

	testScalMul(butterflyMat, spButterflyMat);
	testNorm2(butterflyMat, spButterflyMat);
	testToMatSparse(butterflyMat, spButterflyMat);
	testGetCoeff(butterflyMat, spButterflyMat);
	testHasNaN(butterflyMat, spButterflyMat);
	testNZinds(butterflyMat, spButterflyMat);
	testNorm1(butterflyMat, spButterflyMat);
	testGemm(butterflyMat, spButterflyMat);
	testCloneTranspConj(butterflyMat, spButterflyMat);
	return EXIT_SUCCESS;
}
