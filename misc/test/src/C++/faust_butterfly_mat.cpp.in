#include "faust_TransformHelperButterfly.h"
#include "faust_MatButterfly.h"
#include <cstdio>

typedef @TEST_FPP@ FPP;

using namespace Faust;

void testClone(MatButterfly<FPP, Cpu>& butterflyMat)
{
	auto size = butterflyMat.getNbRow();
	auto clone = butterflyMat.Clone();
	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	MatDense<FPP, Cpu> refY_(*X);
	MatDense<FPP, Cpu> testY_(*X);

	butterflyMat.multiply(refY_, 'N');
	clone->multiply(testY_, 'N');


	auto errY_ = testY_;
	errY_ -= refY_;
	assert(errY_.norm() <= 1e-6);

	std::cout << "MatButterfly cloning OK" << std::endl;
	delete X;
	delete clone;
}


void testTranspose(MatButterfly<FPP, Cpu>& butterflyMat, MatSparse<FPP, Cpu>& spButterflyMat)
{
	auto size = butterflyMat.getNbRow();
	MatSparse<FPP, Cpu> trefsp(spButterflyMat);
	trefsp.transpose();
	MatButterfly<FPP, Cpu> ttest(butterflyMat);
	ttest.transpose();

	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	MatDense<FPP, Cpu> refY_(*X);
	MatDense<FPP, Cpu> testY_(*X);

	trefsp.multiply(refY_, 'N');
	ttest.multiply(testY_, 'N');

	auto errY_ = testY_;
	errY_ -= refY_;
	assert(errY_.norm() <= 1e-6);

	std::cout << "MatButterfly transpose OK" << std::endl;
	delete X;
}

int main(int argc, char** argv)
{
	int log2size = 4;
	if(argc > 1)
		log2size = std::atoi(argv[1]);
	std::cout << "log2size: " << log2size << std::endl;

	int size = 1 << log2size;
	auto F = TransformHelper<FPP, Cpu>::fourierFaust(log2size, false);
	auto dsButterflyMat = F->get_fact(0);
	MatSparse<FPP, Cpu> spButterflyMat(dsButterflyMat);
	MatButterfly<FPP, Cpu> butterflyMat(spButterflyMat, /* level */ 0);

	Vect<FPP, Cpu> x(size);
	x.setRand();
	const Vect<FPP, Cpu> x_(x);
//	x.setOnes();

	Vect<FPP, Cpu> ref_v = spButterflyMat.multiply(x_);
	Vect<FPP, Cpu> test_v = butterflyMat.multiply(x_);

	ref_v.Display();
	test_v.Display();
	auto err = test_v;
	err -= ref_v;
	assert(err.norm() <= 1e-6);
	std::cout << "butterfly-vector product OK" << std::endl;


	// test multiplying a MatDense
	auto X = MatDense<FPP, Cpu>::randMat(size, size);
	MatDense<FPP, Cpu> refY(*X);
	MatDense<FPP, Cpu> testY(*X);

	spButterflyMat.multiply(refY, 'N');
	butterflyMat.multiply(testY, 'N');


	auto errY = testY;
	errY -= refY;
	assert(errY.norm() <= 1e-6);

	std::cout << "Faust-dense matrix product OK" << std::endl;

	// test multiplying a MatSparse
	auto spX = MatSparse<FPP, Cpu>::randMat(size, size, .2);
	MatSparse<FPP, Cpu> refYsp(*spX);
	MatSparse<FPP, Cpu> testYsp(*spX);
	//	 X->setOnes();

	spButterflyMat.multiply(refYsp, 'N');
	butterflyMat.multiply(testYsp, 'N');

	MatDense<FPP, Cpu> errYsp = testYsp;
	errYsp -= refYsp;
	assert(errYsp.norm() <= 1e-6);

	std::cout << "Faust-sparse matrix product OK" << std::endl;

	testClone(butterflyMat);

	testTranspose(butterflyMat, spButterflyMat);

	return EXIT_SUCCESS;
}
