#include "faust_TransformHelper.h"
#include "faust_constant.h"
#include "faust_MatDense.h"
#include "faust_MatSparse.h"
#include "faust_MatBSR.h"
#include <cstdlib>
#include <algorithm>


typedef @TEST_FPP@ FPP;

using namespace std;
using namespace Faust;

double tol()
{
	if(is_same<FPP, complex<double>>::value)
		return 1e-4;
	else if(is_same<FPP, complex<float>>::value || is_same<FPP,float>::value)
		return 1e-3;
	else // double
		return 1e-6;
}

void test_fro_norm(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::norm:" << std::endl;
	auto dmat = bmat.to_dense();
	cout << "bsr mat fro-norm:" << bmat.norm() << std::endl;
	cout << "dense mat fro-norm:" << dmat.norm() << std::endl;
	cout << "error:" << std::abs(bmat.norm()-dmat.norm()) << std::endl;
	assert(std::abs(bmat.norm()-dmat.norm()) < tol());
	cout << "OK." << std::endl;
}

void test_1_norm(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::normL1:" << std::endl;
	auto dmat = bmat.to_dense();
	cout << "bsr mat fro-normL1:" << bmat.normL1() << std::endl;
	cout << "dense mat fro-normL1:" << dmat.normL1() << std::endl;
	assert(std::abs(bmat.normL1()-dmat.normL1()) < tol());
	cout << "OK." << std::endl;
}

void test_clone(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::clone" << endl;
	auto clone = bmat.Clone();
	cout << "bsr mat fro-norm:" << bmat.norm() << std::endl;
	cout << "clone bsr mat fro-norm:" << clone->norm() << std::endl;
	assert(std::abs(bmat.norm()-clone->norm()) < tol());
	cout << "OK" << std::endl;
}

void test_mul_vec(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(Vect)" << endl;
	Vect<FPP, Cpu> vec(bmat.getNbCol());
	vec.setRand();
	Vect<FPP, Cpu> vec_cpy(bmat.getNbCol(), vec.getData());
	Vect<FPP, Cpu> vec_t(bmat.getNbRow());
	vec_t.setRand();
	Vect<FPP, Cpu> vec_t_cpy(bmat.getNbRow(), vec_t.getData());
	Vect<FPP, Cpu> vec_h(bmat.getNbRow());
	vec_h.setRand();
	Vect<FPP, Cpu> vec_h_cpy(bmat.getNbRow(), vec_h.getData());
	auto dmat = bmat.to_dense();
	bmat.multiply(vec, 'N');
	dmat.multiply(vec_cpy, 'N');
//	cout << "ref vec:";vec_cpy.Display(); cout << "norm: " << vec_cpy.norm() << std::endl;
//	cout << "test vec:";vec.Display(); cout << "norm: " << vec.norm() << std::endl;
	assert(std::abs(vec.norm()-vec_cpy.norm()) < tol());
	cout << "MatBSR::multiply(Vect, 'N') OK" << endl;
	bmat.multiply(vec_t, 'T');
	dmat.multiply(vec_t_cpy, 'T');
//	cout << "ref vec_t:";vec_t_cpy.Display(); cout << "norm: " << vec_t_cpy.norm() << std::endl;
//	cout << "test vec_t:";vec_t.Display(); cout << "norm: " << vec_t.norm() << std::endl;
	assert(std::abs(vec_t.norm()-vec_t_cpy.norm()) < tol());
	cout << "MatBSR::multiply(Vect, 'T') OK" << endl;
	bmat.multiply(vec_h, 'H');
	dmat.multiply(vec_h_cpy, 'H');
//	cout << "ref vec:";vec_h_cpy.Display(); cout << "norm: " << vec_h_cpy.norm() << std::endl;
//	cout << "test vec_h:";vec_h.Display(); cout << "norm: " << vec_h.norm() << std::endl;
	assert(std::abs(vec_h.norm()-vec_h_cpy.norm()) < tol());
	cout << "MatBSR::multiply(Vect, 'H') OK" << endl;
	cout << "OK" << endl;
}

void test_mul_vec2(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing Vect MatBSR::multiply(Vect)" << endl;
	auto md = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 1);
	Vect<FPP, Cpu> vec(bmat.getNbCol(), md->getData());
	auto dmat = bmat.to_dense();
	Vect<FPP, Cpu> test_vec = bmat.multiply(vec);
	Vect<FPP, Cpu> ref_vect = dmat.multiply(vec);
	assert(std::abs(test_vec.norm()-ref_vect.norm()) < tol());
	delete md;
	cout << "OK" << endl;
}

void test_mul_dense(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(MatDense)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 32);
	MatDense<FPP, Cpu> rmd_copy(*rmd);
	auto dmat = bmat.to_dense();
	dmat.multiply(*rmd, 'N');
	bmat.multiply(rmd_copy, 'N');
	assert((*rmd).getNbRow() == rmd_copy.getNbRow() && (*rmd).getNbCol() == rmd_copy.getNbCol());
	rmd_copy -= *rmd;
	assert(rmd_copy.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_mul_dense_transp(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(MatDense, T)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbRow(), 32);
	MatDense<FPP, Cpu> rmd_copy(*rmd);
	rmd->Display();
	rmd_copy.Display();
	auto dmat = bmat.to_dense();
	dmat.multiply(*rmd, 'T');
	bmat.multiply(rmd_copy, 'T');
	rmd->Display();
	rmd_copy.Display();
	assert((*rmd).getNbRow() == rmd_copy.getNbRow() && (*rmd).getNbCol() == rmd_copy.getNbCol());
	rmd_copy -= *rmd;
	assert(rmd_copy.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_mul_dense_transconj(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(MatDense, H)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbRow(), 32);
	MatDense<FPP, Cpu> rmd_copy(*rmd);
	auto dmat = bmat.to_dense();
	dmat.multiply(*rmd, 'H');
	bmat.multiply(rmd_copy, 'H');
	assert((*rmd).getNbRow() == rmd_copy.getNbRow() && (*rmd).getNbCol() == rmd_copy.getNbCol());
	rmd_copy -= *rmd;
	assert(rmd_copy.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_mul_sparse(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(MatSparse, N)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 32);
	MatSparse<FPP, Cpu> rms(*rmd);
	std::cout << "sp has nan:" << rms.containsNaN() << std::endl;
	MatSparse<FPP, Cpu> rms_copy(rms);
	auto dmat = bmat.to_dense();
	dmat.multiply(rms, 'N');
	bmat.multiply(rms_copy, 'N');
	assert(rms.getNbRow() == rms_copy.getNbRow() && rms.getNbCol() == rms_copy.getNbCol());
	*rmd = rms;
	MatDense<FPP, Cpu> rmd_copy(rms_copy);
	rmd_copy -= *rmd;
	assert(rmd_copy.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_mul_sparse_transp(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(MatSparse, T)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbRow(), 32);
	MatSparse<FPP, Cpu> rms(*rmd);
	MatSparse<FPP, Cpu> rms_copy(rms);
	auto dmat = bmat.to_dense();
	dmat.multiply(rms, 'T');
	bmat.multiply(rms_copy, 'T');
	assert(rms.getNbRow() == rms_copy.getNbRow() && rms.getNbCol() == rms_copy.getNbCol());
	*rmd = rms;
	MatDense<FPP, Cpu> rmd_copy(rms_copy);
	rmd_copy -= *rmd;
	assert(rmd_copy.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_mul_sparse_transconj(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::multiply(MatSparse, H)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbRow(), 32);
	MatSparse<FPP, Cpu> rms(*rmd);
	MatSparse<FPP, Cpu> rms_copy(rms);
	auto dmat = bmat.to_dense();
	dmat.multiply(rms, 'H');
	bmat.multiply(rms_copy, 'H');
	assert(rms.getNbRow() == rms_copy.getNbRow() && rms.getNbCol() == rms_copy.getNbCol());
	*rmd = rms;
	MatDense<FPP, Cpu> rmd_copy(rms_copy);
	rmd_copy -= *rmd;
	assert(rmd_copy.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_mul_sparse_right(const MatBSR<FPP, Cpu>& bmat_orig)
{
	cout << "=== Testing MatBSR::multiplyRight(MatSparse)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat_orig.getNbCol(), 32);
	MatSparse<FPP, Cpu> rms(*rmd);
	auto dmat = bmat_orig.to_dense();
	MatBSR<FPP, Cpu> bmat(bmat_orig);
	dmat.multiplyRight(rms);
	bmat.multiplyRight(rms);
	auto dmat_copy = bmat.to_dense();
//	dmat.Display();
//	bmat.Display();
	assert(bmat.getNbRow() == dmat.getNbRow() && bmat.getNbCol() == dmat.getNbCol());
	dmat -= dmat_copy;
	assert(dmat.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_gemm_NN(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::faust_gemmNN" << endl;
	auto B = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 32);
	auto C = MatDense<FPP, Cpu>::randMat(bmat.getNbRow(), 32);
	MatDense<FPP, Cpu> C_copy(*C);
	auto dmat = bmat.to_dense();
	bmat.faust_gemm(*B, *C, (*B)(0,0), (*C)(0,0), 'N', 'N');
	dmat.faust_gemm(*B, C_copy, (*B)(0,0), C_copy(0,0), 'N', 'N');
	MatDense<FPP, Cpu> test = *C;
	test -= C_copy;
	assert(test.norm() < tol());
	delete B;
	delete C;
	cout << "OK" << endl;
}

void test_gemm_NT(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::faust_gemmNT" << endl;
	auto B = MatDense<FPP, Cpu>::randMat(32, bmat.getNbCol());
	auto C = MatDense<FPP, Cpu>::randMat(bmat.getNbRow(), 32);
	std::cout << "ds has nan:" << B->containsNaN() << std::endl;
	MatDense<FPP, Cpu> C_copy(*C);
	auto dmat = bmat.to_dense();
	bmat.faust_gemm(*B, *C, (*B)(0,0), (*C)(0,0), 'N', 'T');
	dmat.faust_gemm(*B, C_copy, (*B)(0,0), C_copy(0,0), 'N', 'T');
	MatDense<FPP, Cpu> test = *C;
	test -= C_copy;
	assert(test.norm() < tol());
	delete B;
	delete C;
	cout << "OK" << endl;
}

void test_gemm_TT(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::faust_gemmTT" << endl;
	auto B = MatDense<FPP, Cpu>::randMat(32, bmat.getNbRow());
	auto C = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 32);
	MatDense<FPP, Cpu> C_copy(*C);
	auto dmat = bmat.to_dense();
	bmat.faust_gemm(*B, *C, (*B)(0,0), (*C)(0,0), 'T', 'T');
	dmat.faust_gemm(*B, C_copy, (*B)(0,0), C_copy(0,0), 'T', 'T');
	MatDense<FPP, Cpu> test = *C;
	test -= C_copy;
	assert(test.norm() < tol());
	delete B;
	delete C;
	cout << "OK" << endl;
}

void test_gemm_HH(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::faust_gemmHH" << endl;
	auto B = MatDense<FPP, Cpu>::randMat(32, bmat.getNbRow());
	auto C = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 32);
	MatDense<FPP, Cpu> C_copy(*C);
	auto dmat = bmat.to_dense();
	bmat.faust_gemm(*B, *C, (*B)(0,0), (*C)(0,0), 'H', 'H');
	dmat.faust_gemm(*B, C_copy, (*B)(0,0), C_copy(0,0), 'H', 'H');
	MatDense<FPP, Cpu> test = *C;
	test -= C_copy;
	assert(test.norm() < tol());
	delete B;
	delete C;
	cout << "OK" << endl;
}

void test_transpose(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::transpose" << endl;
	auto dmat = bmat.to_dense();
	MatBSR<FPP, Cpu> bmat_t = bmat;
	bmat.to_dense().print_file("bmat.txt");
	bmat_t.transpose();
	dmat.transpose();
	assert(bmat_t.getNbRow() == dmat.getNbRow() && bmat_t.getNbCol() == dmat.getNbCol());
	MatDense<FPP, Cpu> test = bmat_t.to_dense();
	test -= dmat;
	dmat.print_file("dmat.txt");
	bmat_t.to_dense().print_file("bmat_t.txt");
	assert(test.norm() < tol());
	cout << "OK" << endl;
}

void test_conjugate(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::conjugate" << endl;
	auto dmat = bmat.to_dense();
	MatBSR<FPP, Cpu> bmat_c = bmat;
	bmat_c.conjugate();
	dmat.conjugate();
	assert(bmat_c.getNbRow() == dmat.getNbRow() && bmat_c.getNbCol() == dmat.getNbCol());
	MatDense<FPP, Cpu> test = bmat_c.to_dense();
	test -= dmat;
	assert(test.norm() < tol());
	cout << "OK" << endl;
}

void test_adjoint(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::adjoint" << endl;
	auto dmat = bmat.to_dense();
	MatBSR<FPP, Cpu> bmat_a = bmat;
	bmat_a.adjoint();
	dmat.adjoint();
	assert(bmat_a.getNbRow() == dmat.getNbRow() && bmat_a.getNbCol() == dmat.getNbCol());
	MatDense<FPP, Cpu> test = bmat_a.to_dense();
	test -= dmat;
	assert(test.norm() < tol());
	cout << "OK" << endl;
}

void test_nnz(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::getNonZeros" << endl;
	auto dmat = bmat.to_dense();
	assert(bmat.getNonZeros() == dmat.getNonZeros());
	cout << "OK" << endl;
}

void test_nbytes(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::getNBytes" << endl;
	auto dmat = bmat.to_dense();
	assert(bmat.getNBytes() == bmat.getNBlocks()*bmat.getNbBlockRow()*bmat.getNbBlockCol()*sizeof(FPP)+(bmat.getNbBlocksPerDim(0)+1+bmat.getNBlocks())*sizeof(int));
	cout << "OK" << endl;
}

void test_get_type(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::getType" << endl;
	assert(bmat.getType() == BSR);
	cout << "OK" << endl;
}

void test_mul_scal(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::operator*=(FPP)" << endl;
	auto rmd = MatDense<FPP, Cpu>::randMat(bmat.getNbCol(), 32);
	MatBSR<FPP, Cpu> bmat_copy(bmat);
	auto dmat = bmat.to_dense();
	FPP scal = (*rmd)(0,0);
	dmat *= scal;
	bmat_copy *= scal;
	MatDense<FPP, Cpu> test(dmat);
	test -= bmat_copy.to_dense();
	assert(test.norm() < tol());
	delete rmd;
	cout << "OK" << endl;
}

void test_get_col(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::get_col" << endl;
	int n = bmat.getNbRow();
	Vect<FPP, Cpu> bcol(n);
	Vect<FPP, Cpu> dcol(n);
	Vect<FPP, Cpu> test(n);
	auto dmat = bmat.to_dense();
	for(int j=0;j<bmat.getNbCol(); j++)
	{
		dcol = dmat.get_col(j);
		bcol = bmat.get_col(j);
		test = dcol;
		test -= bcol;
		assert(test.norm() < tol());
	}
	cout << "OK" << endl;
}


void test_get_cols(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::get_cols(faust_unsigned_int, faust_unsigned_int)" << endl;
	int n = bmat.getNbRow();
	MatDense<FPP, Cpu> test;
	auto dmat = bmat.to_dense();
	for(int j=0;j<bmat.getNbCol()-1; j++)
	{
		auto ncols = bmat.getNbCol()-j;
		auto dcols = dmat.get_cols(j, ncols);
		auto bcols = bmat.get_cols(j, ncols);
//		bcols->Display();
//		dcols->Display();
		assert(dcols->getNbCol() == bcols->getNbCol());
		assert(dcols->getNbRow() == bcols->getNbRow());
//		cout << bcols->norm() << " " << dcols->norm() << endl;
		test = *dcols;
		test -= MatDense<FPP, Cpu>(*bcols);
		delete dcols;
		delete bcols;
		assert(test.norm() < tol());
	}
	cout << "OK" << endl;
}

void test_get_rows(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::get_rows(faust_unsigned_int, faust_unsigned_int)" << endl;
	int n = bmat.getNbRow();
	MatDense<FPP, Cpu> test;
	auto dmat = bmat.to_dense();
	for(int i=0;i<bmat.getNbRow()-1; i++)
	{
		auto nrows = bmat.getNbRow()-i;
		auto drows = dmat.get_rows(i, nrows);
		auto brows = bmat.get_rows(i, nrows);
//		brows->Display();
//		drows->Display();
		assert(drows->getNbCol() == brows->getNbCol());
		assert(drows->getNbRow() == brows->getNbRow());
//		cout << brows->norm() << " " << drows->norm() << endl;
		test = *drows;
		test -= MatDense<FPP, Cpu>(*brows);
		delete drows;
		delete brows;
		assert(test.norm() < tol());
	}
	cout << "OK" << endl;
}

void test_get_cols2(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::get_cols(faust_unsigned_int, faust_unsigned_int)" << endl;
	int n = bmat.getNbRow();
	MatDense<FPP, Cpu> test;
	auto dmat = bmat.to_dense();
	for(int j=0;j<bmat.getNbCol()-1; j++)
	{
		unsigned int ncols = bmat.getNbCol()-j;
		auto col_ids = new unsigned long int[ncols];
		for(int k=0;k<ncols;k++)
			col_ids[k] = rand()*(ncols-1)/RAND_MAX;
		auto dcols = dmat.get_cols(col_ids, ncols);
		auto bcols = bmat.get_cols(col_ids, ncols);
//		bcols->Display();
//		dcols->Display();
		assert(dcols->getNbCol() == bcols->getNbCol());
		assert(dcols->getNbRow() == bcols->getNbRow());
//		cout << bcols->norm() << " " << dcols->norm() << endl;
		test = *dcols;
		test -= MatDense<FPP, Cpu>(*bcols);
		delete dcols;
		delete bcols;
		delete []col_ids;
		assert(test.norm() < tol());
	}
	cout << "OK" << endl;
}

void test_get_rows2(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::get_rows(faust_unsigned_int, faust_unsigned_int)" << endl;
	int n = bmat.getNbRow();
	MatDense<FPP, Cpu> test;
	auto dmat = bmat.to_dense();
	for(int i=0;i<bmat.getNbRow()-1; i++)
	{
		unsigned int nrows = bmat.getNbRow()-i;
		auto row_ids = new unsigned long int[nrows];
		for(int k=0;k<nrows;k++)
			row_ids[k] = rand()*(nrows-1)/RAND_MAX;
		auto drows = dmat.get_rows(row_ids, nrows);
		auto brows = bmat.get_rows(row_ids, nrows);
//		brows->Display();
//		drows->Display();
		assert(drows->getNbCol() == brows->getNbCol());
		assert(drows->getNbRow() == brows->getNbRow());
//		cout << brows->norm() << " " << drows->norm() << endl;
		test = *drows;
		test -= MatDense<FPP, Cpu>(*brows);
		delete drows;
		delete brows;
		delete []row_ids;
		assert(test.norm() < tol());
	}
	cout << "OK" << endl;
}

void test_nonzero_indices(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::nonzeros_indices" << endl;
	MatDense<FPP, Cpu> dmat = bmat.to_dense();
	auto dnzi = dmat.nonzeros_indices();
	auto bnzi = bmat.nonzeros_indices();
	for(auto p: dnzi)
	{
		assert(find(begin(bnzi), end(bnzi), p) != end(bnzi));
	}
	assert(bnzi.size() == dnzi.size());
	cout << "OK" << endl;
}

void test_set_zeros(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::nonzeros_indices" << endl;
	MatBSR<FPP, Cpu> bmat_z(bmat);
	assert(bmat_z.norm() != FPP(0));
	bmat_z.setZeros();
	assert(bmat_z.norm() == FPP(0));
	cout << "OK" << endl;
}


void test_has_nan(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::containsNaN" << endl;
	assert(!bmat.containsNaN());
	// generate a randome MatBSR and put a NaN in data
	auto browptr = new int[bmat.getNbBlocksPerDim(0)+1];
	browptr[0] = 0;
	for(int i=1;i<bmat.getNbBlocksPerDim(0)+1;i++)
	{
		auto nblocks = rand()*(bmat.getNbBlocksPerDim(1))/RAND_MAX;
		browptr[i] = browptr[i-1] + nblocks;
	}
	auto nblocks = browptr[bmat.getNbBlocksPerDim(0)];
	auto bcolinds = new int[nblocks];
	auto data = new FPP[nblocks*bmat.getNbBlockRow()*bmat.getNbBlockCol()];
	for(int i=0;i<nblocks;i++)
	{
		bcolinds[i] = rand()*(bmat.getNbBlocksPerDim(1)-1)/RAND_MAX;
	}
	for(int i=0;i<bmat.getNbBlockRow()*bmat.getNbBlockCol()*nblocks;i++)
	{
		data[i] = FPP(rand());
	}
	data[0] = FPP(NAN);
	cout << data[0] << std::endl;
	MatBSR<FPP, Cpu> bmat_copy(bmat.getNbRow(), bmat.getNbCol(), bmat.getNbBlockRow(), bmat.getNbBlockCol(), bmat.getNBlocks(), data, browptr, bcolinds);
	assert(bmat_copy.containsNaN());
	delete[] browptr;
	delete[] bcolinds;
	delete[] data;
	cout << "OK" << endl;
}

void test_getitem(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::operator(int,int)" << endl;
	auto dmat = bmat.to_dense();
	assert(abs(dmat.norm()-bmat.norm()) < tol());
	for(int i=0;i < bmat.getNbRow();i++)
	{
		for(int j=0;j < bmat.getNbCol();j++)
		{
//			cout << dmat(i,j) << "==" << bmat(i,j) <<" ?" << endl;
			assert(abs(dmat(i,j)-bmat(i,j)) < tol());
		}
	}
	cout << "OK" << endl;
}

void test_tosparse(const MatBSR<FPP, Cpu>& bmat)
{
	cout << "=== Testing MatBSR::to_sparse" << endl;
	auto smat = bmat.to_sparse();
	MatDense<FPP, Cpu> test(smat);
	auto dmat = bmat.to_dense();
	test -= dmat;
	cout << test.norm() << endl;
	assert(test.norm() < tol());
	cout << "OK" << endl;
}

void test_faust()
{
	int faust_nrows = 1024;
	int faust_ncols = 1024;
	RandFaustType t = SPARSE;
	unsigned int min_num_factors = 5;
	unsigned int max_num_factors = 10;
	unsigned int min_dim_size = 1024;
	unsigned int max_dim_size = 1024;
	float density=.001f;
	bool per_row=true;
	auto F = TransformHelper<FPP, Cpu>::randFaust(faust_nrows, faust_ncols, t, min_num_factors, max_num_factors, min_dim_size, max_dim_size, density, per_row);
	auto rep_id = F->size()-2;
	auto f_nrows = F->get_fact_nb_rows(rep_id);
	auto f_ncols = F->get_fact_nb_cols(rep_id);
	auto rand_bmat = MatBSR<FPP, Cpu>::randMat(f_nrows, f_ncols, 64, 64, 20);
//	F->display();
	cout << "replace factor of index: " << F->size()-3 << " by a rand BSRMat:" << std::endl;
	F->replace(rand_bmat, rep_id);
	F->display();
	auto start = std::chrono::steady_clock::now();
	auto toarray = F->get_product();
	auto end = std::chrono::steady_clock::now();
	std::chrono::duration<double> elapsed_seconds = end-start;
	std::cout << "Faust with BSR matrix time: " << elapsed_seconds.count() << "s\n";
	cout << endl;
	auto rand_dmat = new MatDense<FPP, Cpu>(rand_bmat->to_dense());
	F->replace(rand_dmat, rep_id);
	F->display();
	start = std::chrono::steady_clock::now();
	auto toarray_ref = F->get_product();
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	std::cout << "Faust with dense matrix time: " << elapsed_seconds.count() << "s\n";
	cout << endl;
	toarray_ref -= toarray;
	assert(toarray_ref.norm() < tol());
	MatSparse<FPP, Cpu> *rand_smat = new MatSparse<FPP, Cpu>(*rand_dmat);
	F->replace(rand_smat, rep_id);
	F->display(); 
	start = std::chrono::steady_clock::now();
	auto toarray_sp = F->get_product();
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	std::cout << "Faust with sparse matrix time: " << elapsed_seconds.count() << "s\n";
	cout << endl;
}

void test_faust2()
{
	int faust_nrows = 1024;
	int faust_ncols = 1024;
	RandFaustType t = SPARSE;
	unsigned int min_num_factors = 10;
	unsigned int max_num_factors = 10;
	unsigned int min_dim_size = 1024;
	unsigned int max_dim_size = 1024;
	float density=.078f;
	auto nruns = 10;
	auto bsrF = TransformHelper<FPP, Cpu>::randBSRFaust(faust_nrows, faust_ncols, min_num_factors, max_num_factors, 64, 64, density);
	vector<MatGeneric<FPP, Cpu>*> data;
	for(int i=0;i<bsrF->size();i++)
	{
		data.push_back((MatGeneric<FPP, Cpu>*)bsrF->get_fact_addr(i));
	}
	TransformHelper<FPP, Cpu> *spF = new TransformHelper<FPP, Cpu>(data, 1.0, false, true, false);
	spF->convertToSparse();
	auto dsF = new TransformHelper<FPP, Cpu>(data, 1.0, false, true, false);
	dsF->convertToDense();
	cout << "BSR Faust:" << endl;
	bsrF->display();
	cout << "Dense Faust:" << endl;
	dsF->display();
	cout << "Sparse Faust:" << endl;
	spF->display();
	auto mat_dense = MatDense<FPP, Cpu>::randMat(faust_nrows, faust_ncols);
//	auto toarray = bsrF->get_product();
	MatDense<FPP, Cpu> bsr_prod, sp_prod, ds_prod;
	std::cout << "cumulative times for " << nruns << " runs." << std::endl;
	auto start = std::chrono::steady_clock::now();
	for(int i=0;i<nruns;i++)
		bsr_prod = bsrF->multiply(*mat_dense);
	auto end = std::chrono::steady_clock::now();
	std::chrono::duration<double> elapsed_seconds = end-start;
	std::cout << "BSR Faust-dense matrix mul time: " << elapsed_seconds.count() << "s\n";
	start = std::chrono::steady_clock::now();
//	auto toarray_ref = spF->get_product();
	for(int i=0;i<nruns;i++)
		sp_prod = spF->multiply(*mat_dense);
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	std::cout << "Sparse Faust-dense matrix mul time: " << elapsed_seconds.count() << "s\n";
	start = std::chrono::steady_clock::now();
//	auto toarray_sp = dsF->get_product();
	for(int i=0;i<nruns;i++)
		ds_prod = dsF->multiply(*mat_dense);
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	auto test = bsr_prod;
	test -= ds_prod;
	assert(test.norm()/bsr_prod.norm() < tol());
	std::cout << "Dense Faust-dense matrix mul time: " << elapsed_seconds.count() << "s\n";
	/**************** test prod by mat_sparse */
	auto mat_sparse = MatDense<FPP, Cpu>::randMat(faust_nrows, faust_ncols, .02);
//	auto toarray = bsrF->get_product();
	start = std::chrono::steady_clock::now();
	for(int i=0;i<nruns;i++)
		bsr_prod = bsrF->multiply(*mat_sparse);
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	std::cout << "BSR Faust-sparse matrix mul time: " << elapsed_seconds.count() << "s\n";
	start = std::chrono::steady_clock::now();
//	auto toarray_ref = spF->get_product();
	for(int i=0;i<nruns;i++)
		sp_prod = spF->multiply(*mat_sparse);
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	std::cout << "Sparse Faust-sparse matrix mul time: " << elapsed_seconds.count() << "s\n";
	start = std::chrono::steady_clock::now();
//	auto toarray_sp = dsF->get_product();
	for(int i=0;i<nruns;i++)
		ds_prod = dsF->multiply(*mat_sparse);
	end = std::chrono::steady_clock::now();
	elapsed_seconds = end-start;
	test = bsr_prod;
	test -= ds_prod;
	assert(test.norm()/bsr_prod.norm() < tol());
	std::cout << "Dense Faust-sparse matrix mul time: " << elapsed_seconds.count() << "s\n";

	delete mat_sparse;
	delete mat_dense;
	std::cout << "BSR Faust size (bytes): " << bsrF->getNBytes() << std::endl;
	std::cout << "Dense Faust size (bytes): " << dsF->getNBytes() << std::endl;
	std::cout << "Sparse Faust size (bytes): " << spF->getNBytes() << std::endl;

}

void test_faust3()
{
	int faust_nrows = 1024;
	int faust_ncols = 1024;
	RandFaustType t = SPARSE;
	unsigned int min_num_factors = 10;
	unsigned int max_num_factors = 10;
	unsigned int min_dim_size = 1024;
	unsigned int max_dim_size = 1024;
	float density=.078f;
	auto bsrF = TransformHelper<FPP, Cpu>::randBSRFaust(faust_nrows, faust_ncols, min_num_factors, max_num_factors, 64, 64, density);
	auto randDsMat = MatDense<FPP, Cpu>::randMat(faust_ncols, faust_nrows);
	bsrF->push_back(randDsMat, false, false);
	auto randSpMat = MatSparse<FPP, Cpu>::randMat(faust_ncols, faust_nrows, .2);
	bsrF->push_back(randSpMat, false, false);
	bsrF->save_mat_file("test_bsr_faust.mat");
}

int main(int argc, char** argv)
{
	int m, n, bm, bn, bnnz;
	srand(time(NULL));
	m = 1024;
	n = 512;
	bm = 64;
	bn = 32;
	bnnz = 22;
	auto bmat = MatBSR<FPP, Cpu>::randMat(m, n, bm, bn, bnnz);
	bmat->Display();
	test_fro_norm(*bmat);
	test_1_norm(*bmat);
	test_clone(*bmat);
	test_mul_vec(*bmat);
	test_mul_vec2(*bmat);
	test_mul_dense(*bmat);
	test_mul_dense_transp(*bmat);
	test_mul_dense_transconj(*bmat);
	test_mul_sparse(*bmat);
	test_mul_sparse_transp(*bmat);
	test_mul_sparse_transconj(*bmat);
	test_mul_sparse_right(*bmat);
	test_transpose(*bmat);
	test_conjugate(*bmat);
	test_adjoint(*bmat);
	test_gemm_NN(*bmat);
	test_gemm_NT(*bmat);
	test_gemm_TT(*bmat);
	test_gemm_HH(*bmat);
	test_nnz(*bmat);
	test_nbytes(*bmat);
	test_get_type(*bmat);
	test_mul_scal(*bmat);
	test_get_col(*bmat);
	test_get_cols(*bmat);
	test_get_rows(*bmat);
	test_get_cols2(*bmat);
	test_get_rows2(*bmat);
	test_nonzero_indices(*bmat);
	test_set_zeros(*bmat);
	test_has_nan(*bmat);
	test_getitem(*bmat);
	test_tosparse(*bmat);
	delete bmat;
	test_faust();
	test_faust2();
	test_faust3();
	return EXIT_SUCCESS;
}


