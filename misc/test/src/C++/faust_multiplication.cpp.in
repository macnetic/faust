/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************/

#include "faust_Timer.h"
#include "faust_Transform.h"
#include "faust_init_from_matio_core.h"
#include <string>
#include <sstream>


#include <iostream>
#include <iomanip>

/** \brief Time Measurement between a given matrix and its Faust factorization
* \param MatrixFilename : a dense matrix is loaded from this file
* \param transposedMatrix : -value 'N' (default value),  the  matrix stored in MatrixFilename is factorized
			    -value 'T' , the transposed matrix is factorized
* \param FaustFilename : a .mat (MATLAB file) where a Faust representing the dense matrix (or its transposed cf transposeMatrix)
		      (you can passed as many FaustFilename as you want
example : faust_multiplication_@TEST_FPP@ matrix.mat N faust1.mat faust2.mat

**/


typedef @TEST_FPP@ FPP;

int main(int argc, char* argv[])
{
	if (typeid(FPP) == typeid(double))
  	{
		cout<<"floating point precision == double"<<endl;
  	}

  	if (typeid(FPP) == typeid(float))
  	{
		cout<<"floating point precision == float"<<endl;
  	}

	if (argc <= 2)
	{
		cerr << "At least 2 input arguments must be given " << endl;
		cerr << "a .mat file storing a matrix and a parameter (value N or T) " << endl;
		exit(EXIT_FAILURE);
	}

	// initialisation of the dense matrix
	std::cout<<"loading dense matrix"<<std::endl;
	string matDenseFilename = argv[1];
	Faust::MatDense<FPP,Cpu> M;
	init_faust_mat_from_matio(M,matDenseFilename.c_str(),"matrix");


	char transposedMatrix = argv[2][0];
	if ((transposedMatrix != 'N') && (transposedMatrix != 'T'))
	{
		cerr << "transposedMatrix value is "<<transposedMatrix<< endl;
		cerr << "transposedMatrix parameter must be equal to N or T " << endl;
		exit(EXIT_FAILURE);
	}

	// transposed the matrix if needed
	if (transposedMatrix == 'T')
		M.transpose();


	int nbRow=M.getNbRow();
	int nbCol=M.getNbCol();






	// initialisation of the different Faust
	std::vector<Faust::Transform<FPP,Cpu> > listFaust;
	int nbFaust = argc - 3;
	std::vector<string> faustFilename(nbFaust);
	std::cout<<"loading "<<nbFaust<<" Faust"<<std::endl;
	listFaust.resize(nbFaust);
	for (int i=0;i<nbFaust;i++)
	{
		faustFilename[i]=argv[3+i];
		std::cout<<"loading faust from "<<faustFilename[i].c_str()<<std::endl;
		init_faust_core_from_matiofile(listFaust[i],faustFilename[i].c_str(),"facts");
		if ((listFaust[i].getNbRow() != nbRow) || (listFaust[i].getNbCol() != nbCol))
		{
			cerr << "imported Faust doesn't have the same size as the Dense matrix it represents" << endl;
			exit(EXIT_FAILURE);
		}
	}


	/****          MULTIPLICATION     ******/
	//int nbMultiplication = 10000;
	int nbMultiplication = 100;

	float percentage = 0;

	Faust::Timer t_dense;
	std::cout<<std::endl<<" multiplication "<<std::endl;
	std::vector<Faust::Timer> t_faust;
	t_faust.resize(nbFaust);

	for (int i=0;i<nbMultiplication;i++)
	{
		if (float(i)/float(nbMultiplication) > percentage)
		{
			percentage+=0.1;
			std::cout<<"%"<<percentage*100<<std::endl;
		}
		//std::cout<<i+1<<"/"<<nbMultiplication<<std::endl;
	 	Faust::Vect<FPP,Cpu> x(nbCol);
		Faust::Vect<FPP,Cpu> y;
		for (int k=0;k<nbCol;k++)
			x[k]=k;


		t_dense.start();
	 	y=M*x;
		t_dense.stop();


		for (int l=0;l<nbFaust;l++)
		{
			t_faust[l].start();
				y=listFaust[l]*x;
			t_faust[l].stop();
		}

	}

	std::cout<<std::endl<<"DENSE tps : "<<t_dense.get_time()<<std::endl;



	std::cout<<" FAUST : "<<std::endl;

	for (int i=0;i<listFaust.size();i++)
	{
		std::cout<<"Faust : "<<faustFilename[i]<<std::endl;
		std::cout<<"total tps : "<<t_faust[i].get_time()<<" speed-up "<< t_dense.get_time()/t_faust[i].get_time()<<std::endl;
		#ifdef __COMPILE_TIMERS__
			listFaust[i].print_timers();
		#endif
		std::cout<<std::endl<<std::endl;
	}


}
