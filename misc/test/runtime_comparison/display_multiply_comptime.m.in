%% this function displays the resulting C++ computed times between the 2 different
% multiplication (faust vs dense matrix) for different RCG, dimension and
% matrix
%% WARNING this script must be run after @FAUST_SRC_TEST_DIR@/gen_artificial_faust.m
% which store some Faust::Transform example with different dimensions RCG and
% number of factors in
% after run the executable
% @FAUST_TEST_BIN_DIR@/multiply_compare_time that will do some time
% comparison between dense mat-vector product and faust-vector product
%
% example of inputfile and outputdir
%inputfile='@FAUST_TESTOUTPUT_BIN_DIR@/multiply_compare_time.mat';
%outputdir='@FAUST_TESTFIG_BIN_DIR@';

function display_multiply_comptime(inputfile,outputdir)


close all;





load(inputfile);
nDIMS=length(DIMS);
nRCGS=length(RCGS);
nNB_FACTS=length(NB_FACTS);
if ((NB_RUN*nRCGS)~=size(tdense,1)) | ((NB_RUN*nRCGS)~=size(tfaust,1)) | ((nDIMS*nNB_FACTS)~=size(tdense,2)) | ((nDIMS*nNB_FACTS)~=size(tfaust,2))
    error('invalid input file');
end

%% average the multiplication according to the number of run
tdense=reshape(tdense,NB_RUN*nRCGS,nDIMS,nNB_FACTS);
tdense=mean(tdense,1);
tdense=mean(tdense,3);
mean_tdense=repmat(tdense,nRCGS,1,nNB_FACTS);

tfaust=reshape(tfaust,NB_RUN,nRCGS,nDIMS,nNB_FACTS);
mean_tfaust=squeeze(mean(tfaust,1));
tdense=mean(tdense,3);
mean_tdense=repmat(tdense,nRCGS,1,nNB_FACTS);







%% plot the time computed in logscale with a fix number of factor in a given figure
% in each figure we have in x-axis the log2(dimension) of the square matrix
%                         in y-axis the time
% all time for faust multiplication with different RCG (density)
% and the time for dense matrix multiplication are plotted

legend_curve=cell(1,nRCGS+1);
thickness_curve = 2;



%% hold the different figure are in the same box (scale)
ymin=min([min(mean_tdense(:)),min(mean_tfaust(:))]);
ymax=max([max(mean_tdense(:)),max(mean_tfaust(:))]);

for nfact=1:nNB_FACTS
    fighandle=figure;


    for k=nRCGS:-1:1
        semilogy(log2(DIMS),mean_tfaust(k,:,nfact),'LineWidth',thickness_curve);
        legend_curve{k}=['Faust RCG ' num2str(RCGS(nRCGS-k+1))];
        hold on;

    end

    %LA boucle fait remettre les compteurs a zero, que ce soit des
    %numero de courbes ou des couleurs, c'est pourquoi il faut la
    %mettre en premier et
    %forcer la couleur du dense (voire ci dessous).

    semilogy(log2(DIMS),squeeze(mean_tdense(1,:,:)),'Color',[0 0.8 0.8],'LineWidth',thickness_curve);
    legend_curve{nRCGS+1}=['Dense '];


    % legend the figure,title, font ...
    grid on;
    axis([log2(DIMS(1)) log2(DIMS(end)) ymin ymax]);
    legend(legend_curve{:},'Location', 'SouthEast');
    title (['Dense multiplication vs Faust multiplication (nb factor : ' ,int2str(NB_FACTS(nfact)), ' )' ] );
    xlabel('log2(Dimension)');
    ylabel('Time');
    set(gca,'FontWeight','Bold');


    % save the current figure
    saveas(fighandle,[outputdir filesep 'fig_FAUST_nbfact_' int2str(NB_FACTS(nfact)) '.jpeg']);
end


