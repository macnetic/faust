if(WIN32)
	set(SH_CMD git-bash)
else()
	set(SH_CMD bash)
endif()

function (archive_tutos faust_pkg tuto_type file_ext)
	# Creates a zip archive of notebooks/livescripts
	#example 1: archive_tutos(pyfaust notebook ipynb)
	#example 2: archive_tutos(matfaust livescript mlx)
	#TODO: rename variable IPYNB_FILES etc
	if(UNIX)
		file(GLOB IPYNB_FILES "${FAUST_DOC_SRC_DIR}" "*.${file_ext}")
		foreach(NB IN LISTS IPYNB_FILES)
			get_filename_component(NB ${NB} NAME)
			#message(STATUS ${NB})
			if(${NB} MATCHES ".*[.]${file_ext}")
				set(IPYNB_ZIP_ARG ${IPYNB_ZIP_ARG};${NB})
			endif()
		endforeach()
		add_custom_target(zip_${tuto_type}s ALL zip ${faust_pkg}_${tuto_type}s.zip -b ${PROJECT_BINARY_DIR}/doc/html ${IPYNB_ZIP_ARG} WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doc/html COMMENT "Archiving the ${tuto_type}s in a zip file" VERBATIM)
	endif(UNIX)
endfunction()

##Generation of the documentation using doxygen
# add a target to generate API documentation with Doxygen
if(BUILD_DOCUMENTATION)
	find_package(Doxygen)
	if(DOXYGEN_FOUND)
		if(NOT ${EXCLUDE_FAUST_LIB_INSTALL})
			string(CONCAT DOXYGEN_FILE_PATTERNS "*.cpp *.hpp *.h *.cu *.hu")
		endif()
		if(BUILD_WRAPPER_MATLAB)
			string(CONCAT DOXYGEN_FILE_PATTERNS ${DOXYGEN_FILE_PATTERNS} " Faust.m FaustMulMode.m StoppingCriterion.m ConstraintGeneric.m ConstraintMat.m ConstraintReal.m ConstraintInt.m ConstraintName.m ParamsFact.m ParamsHierarchical.m ParamsPalm4MSA.m FaustFactory.m hadamard.m quickstart.m fft.m bsl.m runtimecmp.m runall.m version.m faust_fact.m ParamsHierarchicalSquareMat.m ParamsHierarchicalRectMat.m license.m omp.m wht.m dft.m eye.m rand.m  eigtj.m hierarchical.m fact.m palm4msa.m fgft_givens.m fgft_palm.m svdtj.m splin.m spcol.m proj_gen.m sp.m const.m supp.m hankel.m toeplitz.m circ.m normcol.m normlin.m splincol.m blockdiag.m skperm.m enable_gpu_mod.m isFaust.m poly.m basis.m next.m  expm_multiply.m FaustPoly.m MHTPParams.m palm4msa_mhtp.m hierarchical_mhtp.m ") # warning: the space on the end matters
		endif()
		if(BUILD_WRAPPER_PYTHON)
			string(CONCAT DOXYGEN_FILE_PATTERNS ${DOXYGEN_FILE_PATTERNS} "__init__.py factparams.py demo.py tools.py fact.py proj.py poly.py")
		endif()
		#message(STATUS DOXYGEN_FILE_PATTERNS=${DOXYGEN_FILE_PATTERNS})
		configure_file(${FAUST_DOC_SRC_DIR}/Doxyfile.in ${PROJECT_BINARY_DIR}/doc/Doxyfile @ONLY)
		# ./gen_doc/images/* files is duplicated in doc/html/ to call images documentation in the source code with relative path of image's files, from build directory.
		configure_file(${FAUST_DOC_SRC_DIR}/py_filterout_namespace.py ${PROJECT_BINARY_DIR}/doc/py_filterout_namespace.py @ONLY)
		configure_file(${FAUST_DOC_SRC_DIR}/filterout_excluded_classes.py ${PROJECT_BINARY_DIR}/doc/filterout_excluded_classes.py @ONLY)
		if(UNIX)
			configure_file(${FAUST_DOC_SRC_DIR}/py_filter.sh.in ${PROJECT_BINARY_DIR}/doc/py_filter @ONLY)
			configure_file(${FAUST_DOC_SRC_DIR}/doxymatlab/m2cpp.pl ${PROJECT_BINARY_DIR}/doc/m2cpp @ONLY)
		elseif(WIN32)
			configure_file(${FAUST_DOC_SRC_DIR}/py_filter.bat.in ${PROJECT_BINARY_DIR}/doc/py_filter.bat @ONLY)
			configure_file(${FAUST_DOC_SRC_DIR}/doxymatlab/m2cpp.pl ${PROJECT_BINARY_DIR}/doc/m2cpp.pl @ONLY)
		endif()
		configure_file(${FAUST_DOC_SRC_DIR}/doxymatlab/m2cpp.bat ${PROJECT_BINARY_DIR}/doc/m2cpp.bat @ONLY)
		file(COPY ${FAUST_DOC_SRC_DIR}/images/ DESTINATION ${PROJECT_BINARY_DIR}/doc/html/ )
		if(WIN32)
			add_custom_target(doc ALL ${DOXYGEN_EXECUTABLE} ${PROJECT_BINARY_DIR}/doc/Doxyfile WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doc COMMENT "Generating API documentation with Doxygen" VERBATIM)
		else()
			add_custom_target(doc ALL ${DOXYGEN_EXECUTABLE} ${PROJECT_BINARY_DIR}/doc/Doxyfile DEPENDS zip_notebooks zip_livescripts WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doc COMMENT "Generating API documentation with Doxygen" VERBATIM)
			if(BUILD_WRAPPER_MATLAB)
				add_dependencies(doc PREPARE_MATFAUST_FOR_DOXYDOC)
			endif()
		endif()
        #list(GET <list> <element index> [<index> ...] <out-var>)
        list(GET PYTHON_EXES -1 PY3_EXE)
        set(GLOB_PATTS "'${PROJECT_BINARY_DIR}/doc/html/namespacepyfaust_*.html';'${PROJECT_BINARY_DIR}/doc/html/namespacematfaust_*.html'")
	if(NOT PY3_EXE)
		# workaround in case BUILD_WRAPPER_PYTHON is OFF which implies PY3_EXE is not set
		set(PY3_EXE python3)
	endif()
        add_custom_target(doc_exclu_class_filtering ALL ${PY3_EXE}
            ${PROJECT_BINARY_DIR}/doc/filterout_excluded_classes.py ${GLOB_PATTS} DEPENDS doc WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doc COMMENT "Filter out the non-documented classes")
    	if(BUILD_WRAPPER_MATLAB)
		if(UNIX)
			add_custom_target(filterout_formfeeds ALL find ${PROJECT_BINARY_DIR}/wrapper/matlab/+matfaust/ -name '*.m' -exec sed -i 's/\\f//g' '{}' \\\; DEPENDS doc WORKING_DIRECTORY ${PROJECT_BINARY_DIR} COMMENT "Filtering out the formfeeds characters.")
		elseif(WIN32)
			add_custom_target(filterout_formfeeds ALL ${SH_CMD} -c "find ${PROJECT_BINARY_DIR}/wrapper/matlab/+matfaust/ -name '*.m' -exec sed -i 's/\\f//g' '{}' \\\;" DEPENDS doc WORKING_DIRECTORY ${PROJECT_BINARY_DIR} COMMENT "Filtering out the formfeeds characters.")
		endif(UNIX)
        endif(BUILD_WRAPPER_MATLAB)
		#install(DIRECTORY ${PROJECT_BINARY_DIR}/doc/html DESTINATION doc/share/doc)
		#file(MAKE_DIRECTORY ${FAUST_INSTALL_DOC})
		#install(DIRECTORY ${PROJECT_BINARY_DIR}/doc/html DESTINATION ${FAUST_INSTALL_DOC} FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_WRITE WORLD_EXECUTE)
		string(TIMESTAMP DOXYGEN_CURRENT_DATE "%Y-%m-%d - %H:%M")
		if(EXCLUDE_FAUST_LIB_INSTALL)
		    file(READ mainpage_wrappers_inc.md INCLUDE_SPECIFIC_DOC)
		    configure_file(${FAUST_DOC_SRC_DIR}/install_pyfaust_in_venv.md ${PROJECT_BINARY_DIR}/doc//install_pyfaust_in_venv.md)
		else()
		    file(READ mainpage_cpp_inc.md INCLUDE_SPECIFIC_DOC)
		endif()
		configure_file(${FAUST_DOC_SRC_DIR}/mainpage.md ${PROJECT_BINARY_DIR}/doc/mainpage.md)

	else()
		message(WARNING "Doxygen not found, cannot generate the documentation")
	endif(DOXYGEN_FOUND)

	if(INCLUDE_ALL_SYS_INSTALL_INSTRUCS)
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/macosx/README_install_part.html ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
		file(READ ${PROJECT_BINARY_DIR}/doc/README_install_part.html OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS1)
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/linux/README_install_part.html ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
		file(READ ${PROJECT_BINARY_DIR}/doc/README_install_part.html OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS2)
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/win/README_install_part.html ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
		file(READ ${PROJECT_BINARY_DIR}/doc/README_install_part.html OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS3)
		string(CONCAT OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS ${OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS1} ${OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS2} ${OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS3})
		# only online doc include all sys instructions
		if(NOT API_DOC_BASE_URL)
			set(API_DOC_BASE_URL "https://faustgrp.gitlabpages.inria.fr/faust/last-doc")
		endif()
	else()
		if(NOT API_DOC_BASE_URL)
			set(API_DOC_BASE_URL "file://${CMAKE_INSTALL_PREFIX}/doc")
		endif()
	endif()

	SET(FAUST_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}") # needed for windows because the install prefix could be not set on gitlab-runner
	if(APPLE)
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/macosx/installer_readme.html.in ${PROJECT_BINARY_DIR}/doc/installer_readme.html @ONLY)
		file(COPY ${FAUST_DOC_SRC_DIR}/bin_pkgs/macosx/licenses.html DESTINATION ${PROJECT_BINARY_DIR}/doc/)
		if(NOT DEFINED OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS)
		    configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/macosx/README_install_part.html ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
		    file(READ ${PROJECT_BINARY_DIR}/doc/README_install_part.html OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS)
		endif()
		#file(COPY ${FAUST_DOC_SRC_DIR}/bin_pkgs/macosx/README.html DESTINATION ${PROJECT_BINARY_DIR}/doc/html/)
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/README_template.html ${PROJECT_BINARY_DIR}/doc/html/README.html @ONLY)
	elseif(UNIX)
		#file(COPY ${FAUST_DOC_SRC_DIR}/bin_pkgs/linux/README.html DESTINATION ${PROJECT_BINARY_DIR}/doc/html/)
		if(NOT DEFINED OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS)
		    configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/linux/README_install_part.html ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
		    file(READ ${PROJECT_BINARY_DIR}/doc/README_install_part.html OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS)
		endif()
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/README_template.html ${PROJECT_BINARY_DIR}/doc/html/README.html @ONLY)
	elseif(WIN32)
		SET(FAUST_INSTALL_PATH "C:/Program Files/Faust") # path of installation is always this on Windows
		if(NOT DEFINED OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS)
		    configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/win/README_install_part.html ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
		    file(READ ${PROJECT_BINARY_DIR}/doc/README_install_part.html OS_SPECIFIC_INSTALL_GUIDE_INSTRUCS)
		endif()
		configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/README_template.html ${PROJECT_BINARY_DIR}/doc/html/README.html @ONLY)

	endif()
	file(REMOVE ${PROJECT_BINARY_DIR}/doc/README_install_part.html)
	configure_file(${FAUST_DOC_SRC_DIR}/bin_pkgs/README_template.md ${PROJECT_BINARY_DIR}/doc/README.md)
	configure_file(${FAUST_DOC_SRC_DIR}/faq.md ${PROJECT_BINARY_DIR}/doc/faq.md)
	# pyfaust jupyter notebooks (ipynb and html)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_creation.ipynb ${PROJECT_BINARY_DIR}/doc/html/Faust_creation.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_creation.html ${PROJECT_BINARY_DIR}/doc/html/Faust_creation.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_manipulation.ipynb ${PROJECT_BINARY_DIR}/doc/html/Faust_manipulation.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_manipulation.html ${PROJECT_BINARY_DIR}/doc/html/Faust_manipulation.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_factorization.ipynb ${PROJECT_BINARY_DIR}/doc/html/Faust_factorization.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_factorization.html ${PROJECT_BINARY_DIR}/doc/html/Faust_factorization.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Use_of_Faust_objects_in_algorithms.ipynb ${PROJECT_BINARY_DIR}/doc/html/Use_of_Faust_objects_in_algorithms.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Use_of_Faust_objects_in_algorithms.html ${PROJECT_BINARY_DIR}/doc/html/Use_of_Faust_objects_in_algorithms.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/faust_projectors.ipynb ${PROJECT_BINARY_DIR}/doc/html/faust_projectors.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/faust_projectors.html ${PROJECT_BINARY_DIR}/doc/html/faust_projectors.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/using_gpu_pyfaust.ipynb ${PROJECT_BINARY_DIR}/doc/html/using_gpu_pyfaust.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/using_gpu_pyfaust.html ${PROJECT_BINARY_DIR}/doc/html/using_gpu_pyfaust.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/pyfaust_poly.ipynb ${PROJECT_BINARY_DIR}/doc/html/pyfaust_poly.ipynb COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/pyfaust_poly.html ${PROJECT_BINARY_DIR}/doc/html/pyfaust_poly.html COPYONLY)
	# matfaust matlab livescripts (mlx and html)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_creation.mlx ${PROJECT_BINARY_DIR}/doc/html/Faust_creation.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_creation.mlx.html ${PROJECT_BINARY_DIR}/doc/html/Faust_creation.mlx.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_manipulation.mlx ${PROJECT_BINARY_DIR}/doc/html/Faust_manipulation.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_manipulation.mlx.html ${PROJECT_BINARY_DIR}/doc/html/Faust_manipulation.mlx.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/tomp.mlx ${PROJECT_BINARY_DIR}/doc/html/tomp.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_factorization.mlx ${PROJECT_BINARY_DIR}/doc/html/Faust_factorization.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Faust_factorization.mlx.html ${PROJECT_BINARY_DIR}/doc/html/Faust_factorization.mlx.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Use_of_Faust_objects_in_algorithms.mlx ${PROJECT_BINARY_DIR}/doc/html/Use_of_Faust_objects_in_algorithms.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/Use_of_Faust_objects_in_algorithms.mlx.html ${PROJECT_BINARY_DIR}/doc/html/Use_of_Faust_objects_in_algorithms.mlx.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/using_gpu_matfaust.html ${PROJECT_BINARY_DIR}/doc/html/using_gpu_matfaust.html COPYONLY)

	configure_file(${FAUST_DOC_SRC_DIR}/faust_projectors.mlx ${PROJECT_BINARY_DIR}/doc/html/faust_projectors.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/faust_projectors.mlx.html ${PROJECT_BINARY_DIR}/doc/html/faust_projectors.mlx.html COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/matfaust_poly.mlx ${PROJECT_BINARY_DIR}/doc/html/matfaust_poly.mlx COPYONLY)
	configure_file(${FAUST_DOC_SRC_DIR}/matfaust_poly.html ${PROJECT_BINARY_DIR}/doc/html/matfaust_poly.html COPYONLY)

	configure_file(${FAUST_SRC_TEST_SRC_PYTHON_DIR}/test_svd_rc_vs_err.py ${PROJECT_BINARY_DIR}/doc/html/test_svd_rc_vs_err.py COPYONLY)
	archive_tutos(pyfaust notebook ipynb)
	archive_tutos(matfaust livescript mlx)
	# filter out the HTML tags in pyfaust doc strings
	add_custom_target(filter_html_tag_in_pyfaust ALL ${PYTHON3_EXE} ${FAUST_DOC_SRC_DIR}/post_docgen_html_tags_filter.py ${FAUST_PYTHON_BIN_DIR}/pyfaust WORKING_DIRECTORY ${PROJECT_BINARY_DIR} COMMENT "Filtering out HTML tags from pyfaust modules" VERBATIM)
endif(BUILD_DOCUMENTATION)





#IF (DOXYGEN_FOUND)
#    IF (NOT DOXY_IN_FILE_UPDATED)
#		IF(DOXYGEN_DOT_FOUND)
#    		IF(BUILD_DOCUMENTATION_GUI)
#				CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/doxygen_configGUIWITHDOT.in ${PROJECT_BINARY_DIR}/doc/doxygen_config.in @ONLY) 
#			ELSE(BUILD_DOCUMENTATION_GUI)
#				CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/doxygen_configSTDWITHDOT.in ${PROJECT_BINARY_DIR}/doc/doxygen_config.in @ONLY)    
#			ENDIF(BUILD_DOCUMENTATION_GUI)
#		ELSE(DOXYGEN_DOT_FOUND)
#			IF(BUILD_DOCUMENTATION_GUI)
#				CONFIGURE_FILE(${PROJECT_BINARY_DIR}/doc/doxygen_configGUI.in ${PROJECT_BINARY_DIR}/doc/doxygen_config.in @ONLY) 
#			ELSE(BUILD_DOCUMENTATION_GUI)
#				CONFIGURE_FILE(${PROJECT_BINARY_DIR}/doc/doxygen_configSTD.in ${PROJECT_BINARY_DIR}/doc/doxygen_config.in @ONLY) 
#			ENDIF(BUILD_DOCUMENTATION_GUI)
#		ENDIF(DOXYGEN_DOT_FOUND)
#		SET(DOXY_IN_FILE_UPDATED 1 INTERNAL) 
#	ENDIF (NOT DOXY_IN_FILE_UPDATED)
#	ADD_CUSTOM_TARGET(refman_doxygen ALL echo DEPENDS faust)
#	ADD_CUSTOM_COMMAND(
#  		TARGET refman_doxygen
#		COMMAND   ${DOXYGEN}
#		ARGS "${PROJECT_BINARY_DIR}/doc/doxygen_config.in"
#		COMMENT   "Doxygen generate the documentation")
#ELSE (DOXYGEN_FOUND)
#	MESSAGE(STATUS "Doxygen not found, cannot generate the documentation")
#ENDIF (DOXYGEN_FOUND)
