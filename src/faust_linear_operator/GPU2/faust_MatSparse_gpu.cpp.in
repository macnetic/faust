//TODO: move to cpp.in
#include "faust_MatSparse_gpu.h"
#include "faust_MatDense_gpu.h"
#ifndef _FSFG_
#define _FSFG_
typedef @FAUST_SCALAR_FOR_GM@ FSFG;
#endif
namespace Faust
{
	template<>
		int32_t Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::getNbRow() const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			int32_t nbRow;
			spm_funcs->info(gpu_mat, &nbRow, nullptr, nullptr); //TODO gpu_mod: add get_nnz, get_nrows, get_ncols
			return nbRow;
		}

	template<>
		int32_t Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::getNbCol() const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			int32_t nbCol;
			spm_funcs->info(gpu_mat, nullptr, &nbCol, nullptr); //TODO gpu_mod: add get_nnz, get_nrows, get_ncols
			return nbCol;
		}


	template<>
	MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::MatSparse(
			const faust_unsigned_int nbRow,
			const faust_unsigned_int nbCol,
			const int32_t nnz, /*= 0,*/
			const @FAUST_SCALAR_FOR_GM@* values, /*= nullptr,*/
			const int32_t* rowptr, /*= nullptr,*/
			const int32_t* colinds, /*= nullptr,*/
			const int32_t dev_id,/*=-1,*/
			const void* stream,/*=nullptr)*/
			const bool no_zero/*=false*/)
	{
		auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
		auto gp_funcs = GPUModHandler::get_singleton()->gp_funcs();
		auto cur_dev_id = gp_funcs->cur_dev();
		gp_funcs->set_dev(dev_id);
		if(values != nullptr)
		{
			if(rowptr == nullptr || colinds == nullptr)
				throw std::runtime_error("All GPU buffers or none must be defined to instantiate a MatSparse<FPP,GPU2>.");
			gpu_mat = spm_funcs->togpu_stream(nbRow, nbCol, nnz, rowptr, colinds, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(values), stream);
		}
		else if(!no_zero)
		{ // no values given, set the matrix as a zero matrix
			gpu_mat = spm_funcs->create_zero(nbRow, nbCol);
		}
		else
			gpu_mat = nullptr;
		//		else gpu_mat = nullptr;
		gp_funcs->set_dev(cur_dev_id);
	}

	template<>
		Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::~MatSparse()
		{
			if(gpu_mat != nullptr)
			{
				auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
				spm_funcs->free(gpu_mat);
			}
		}

	template<>
	Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::MatSparse() : MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>(0,0, /* nnz=*/ 0, /* values=*/ nullptr, /* rowptr=*/nullptr, /*colinds=*/nullptr, /*dev_id=*/-1, /* stream=*/ nullptr, /* nozero=*/false)
	{
	}

	// must be after the called ctor and the dtor to avoid an error "specialization after instantiation"
	template<>
	MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::MatSparse(
			const MatSparse<@FAUST_SCALAR_FOR_GM@, Cpu>& M,
			const int32_t dev_id/*=-1*/,
			const void* stream/*=nullptr*/) : MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>(M.getNbRow(),
				M.getNbCol(), M.getNonZeros(), M.getValuePtr(), M.getRowPtr(), M.getColInd(),  dev_id, stream)
	{
	}

	template<>
	MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::MatSparse(
			const MatDense<@FAUST_SCALAR_FOR_GM@, Cpu>& M,
			const int32_t dev_id,
			const void* stream) : MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>(MatSparse<@FAUST_SCALAR_FOR_GM@, Cpu>(M), dev_id, stream)
	{
	}

	template<>
	MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>& MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator=(const MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>& mat)
	{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			spm_funcs->copy(mat.gpu_mat, gpu_mat);
			return *this;
	}


	template<>
		faust_unsigned_int Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::getNonZeros() const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(gpu_mat != nullptr)
				return spm_funcs->get_nnz(gpu_mat);
			throw std::runtime_error("gpu_mat is nullptr");
		}

	template<>
	MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::MatSparse(const MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2> &M, int32_t dev_id/*=-1*/, const void* stream/*=nullptr*/ ) : MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>(M.getNbRow(), M.getNbCol(), M.getNonZeros())
	{
		//TODO: use dev_id and stream ?
		*this = M;
	}

	template<>
	bool MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator==(const MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>& mat) const
	{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return spm_funcs->is_equal(gpu_mat, mat.gpu_mat);
	}

	template<>
	bool MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator!=(const MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>& mat) const
	{
		return ! ((*this) == mat);
	}

	template<>
	void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator*=(const @FAUST_SCALAR_FOR_GM@& scalar)
	{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(gpu_mat != nullptr)
				spm_funcs->mul_scalar(gpu_mat, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&scalar));
	}

	template<>
	void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator/=(const @FAUST_SCALAR_FOR_GM@& scalar)
	{
		*this *= ((@FAUST_SCALAR_FOR_GM@)1)/scalar;
	}

	template<>
	void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator+=(const @FAUST_SCALAR_FOR_GM@& scalar)
	{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			spm_funcs->add_scalar(gpu_mat, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&scalar));
	}

	template<>
	void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator-=(const @FAUST_SCALAR_FOR_GM@& scalar)
	{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			spm_funcs->sub_scalar(gpu_mat, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&scalar));
	}

	template<>
	void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::operator=(const MatSparse<@FAUST_SCALAR_FOR_GM@, Cpu>& mat)
	{
		// copy on current device
		MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2> gmat(mat);
		auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
		spm_funcs->free(this->gpu_mat);
		this->gpu_mat = gmat.gpu_mat;
		gmat.gpu_mat = nullptr; // to avoid freeing the new gpu_mat when leaving this scope
	}

	template<>
		void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::tocpu(int* row_ptr, int* col_ind, @FAUST_SCALAR_FOR_GM@* value_ptr, int* nrows/*=nullptr*/, int* ncols/*=nullptr*/, int* nnz/*=nullptr*/) const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(nrows != nullptr)
				*nrows = getNbRow();
			if(ncols != nullptr)
				*ncols = getNbCol();
			if(nnz != nullptr)
				*nnz = getNonZeros();
			spm_funcs->tocpu(gpu_mat, row_ptr, col_ind, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(value_ptr));
		}

	template<>
		void MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::tocpu(MatSparse<@FAUST_SCALAR_FOR_GM@, Cpu> & sp_mat) const
		{
			int32_t nrows = getNbRow(), ncols = getNbCol(), nnz = getNonZeros();
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(sp_mat.getNonZeros() != nnz || sp_mat.getNbRow() != nrows || sp_mat.getNbCol() != ncols)
			{
				sp_mat.resize(nnz, nrows, ncols);
			}
			tocpu(sp_mat.getRowPtr(), sp_mat.getColInd(), sp_mat.getValuePtr());
			// although the above tocpu copy works perfectly if sp_mat is copied later with the MatSparse Cpu copy ctor
			// then there is a segfault on the underlying SparseMatrix eigen object (why?)
			// workaround: copy the buffer in a clean new MatSparse to avoid later issues
			// mitigations: normally the copy to cpu is just to verify what's on the GPU memory so the performance is not so important
			//TOFIX
			sp_mat = MatSparse<@FAUST_SCALAR_FOR_GM@,Cpu>(nnz, nrows, ncols, sp_mat.getValuePtr(), sp_mat.getRowPtr(), sp_mat.getColInd());
		}



	template<>
		Real<@FAUST_SCALAR_FOR_GM@> Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::norm() const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return spm_funcs->norm_frob(gpu_mat);
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::transpose()
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
		    spm_funcs->transpose(gpu_mat);
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::adjoint()
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
		    spm_funcs->adjoint(gpu_mat);
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::conjugate()
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
		    spm_funcs->conjugate(gpu_mat);
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::setEyes()
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
		    spm_funcs->set_eyes(gpu_mat);
		}


	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::resize(int32_t nnz, int32_t nrows, int32_t ncols)
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			spm_funcs->resize(gpu_mat, nnz, nrows, ncols);
		}


	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::setIdentity(int32_t dim)
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			resize(dim, dim, dim);
			setEyes();
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::setZeros()
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(gpu_mat != nullptr)
				spm_funcs->set_zeros(gpu_mat);
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::set(int32_t nnz, int32_t nrows, int32_t ncols, @FAUST_SCALAR_FOR_GM@* values, int32_t* rowptr, int32_t* colids)
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(gpu_mat != nullptr)
				spm_funcs->cpu_set(gpu_mat, nnz, nrows, ncols, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(values), rowptr, colids);
		}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::set(int32_t nnz, int32_t nrows, int32_t ncols, @FAUST_SCALAR_FOR_GM@* values, size_t* rowptr, size_t* colids)
		{
			int32_t* rowptr2 = new int32_t[nrows+1];
			int32_t* colids2 = new int32_t[nnz];
			
			for(int32_t i=0;i < nrows+1; i++)
			{
				//TODO: verify if rowptr[i] is not larger than int32_t capability
				// if not raise an exception
				rowptr2[i] = (int32_t) rowptr[i];
			}

			for(int32_t i=0;i < nnz; i++)
			{
				//TODO: verify if colids[i] is not larger than int32_t capability
				colids2[i] = (int32_t) colids[i];
			}
			set(nnz, nrows, ncols, values, rowptr2, colids2);
			delete [] rowptr2;
			delete [] colids2;
		}

	template<>
		MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>* MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::clone(const int32_t dev_id/*=-1*/, const void* stream/*=nullptr*/) const
	{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gp_funcs = GPUModHandler::get_singleton()->gp_funcs();
			auto cur_dev_id = gp_funcs->cur_dev();
			// change to device where to create the clone
			gp_funcs->set_dev(dev_id);
			// use a stream (nullptr means default)
			spm_funcs->set_stream(this->gpu_mat, stream);
			auto gpu_mat = spm_funcs->clone(this->gpu_mat);
			auto clone_mat = new Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>(getNbRow(), getNbCol(), /*nnz*/ 0, /*values*/ nullptr, /*rowptr */ nullptr, /*colinds*/ nullptr, dev_id, stream, true);
			clone_mat->gpu_mat = gpu_mat;
			// return to previous device
			gp_funcs->set_dev(cur_dev_id);
			// disable the stream
			spm_funcs->set_stream(this->gpu_mat, nullptr);
			return clone_mat;
	}

	template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::move(const int32_t dev_id/*=-1*/, const void* stream/*=nullptr*/)
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			//TODO: backup possible pre-existing stream to restore it afterward
			spm_funcs->set_stream(gpu_mat, stream);
			spm_funcs->mv_to_gpu(gpu_mat, dev_id);
			spm_funcs->set_stream(gpu_mat, nullptr);
		}




	template<>
		int32_t Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::getDevice() const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			int32_t dev_id = spm_funcs->get_dev(gpu_mat);
			return dev_id;
		}

	    template<>
		std::string Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::to_string(const bool transpose/*=false*/, const bool displaying_small_mat_elts/*=false*/) const
		{
			MatSparse<@FAUST_SCALAR_FOR_GM@, Cpu> sp_mat;
			tocpu(sp_mat);
			//TODO: rely on gpu_mod display function (yet to write)
		    return "(on GPU device: " + std::to_string(getDevice())+ ") "+ sp_mat.to_string();
		}

	    template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::Display() const
		{
		    std::cout << this->to_string();
		}

		template<>
			void* Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::get_gpu_mat_ptr() const
		{
			return this->gpu_mat;
		}

		template<>
			void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::set_gpu_mat_ptr(void* gpu_mat)
		{
			this->gpu_mat = gpu_mat;
		}

		template<>
			MatType MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::getType() const
			{
				return Sparse;
			}

	template<>
		MatSparse<FSFG,GPU2>& MatSparse<FSFG,GPU2>::operator=(MatSparse<FSFG,GPU2>&& mat)
		{
			if(this->gpu_mat != nullptr)
			{

				auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs(FSFG(0));
				spm_funcs->free(this->gpu_mat);
			}
			this->gpu_mat = mat.gpu_mat;
			mat.gpu_mat = nullptr;
			return *this;
		}

		template<>
			MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::MatSparse(const MatDense<@FAUST_SCALAR_FOR_GM@,GPU2>& mat) : MatSparse<FSFG, GPU2>()
			{
				//TODO: process the copy totally on gpu side
				if(mat.get_gpu_mat_ptr() != nullptr)
				{
					auto cpu_dmat = mat.tocpu();
					MatSparse<@FAUST_SCALAR_FOR_GM@,Cpu> cpu_smat(cpu_dmat);
					MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2> gpu_smat(cpu_smat);
					*this = std::move(gpu_smat);
					gpu_smat.gpu_mat = nullptr;
				}
			}

		template<>
			void MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::operator=(const MatDense<@FAUST_SCALAR_FOR_GM@,GPU2>& mat)
			{
				*this = std::move(MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>(mat));
			}

	template<>
		MatSparse<FSFG,GPU2>::MatSparse(MatSparse<FSFG,GPU2>&& mat)
		{
			if(this->gpu_mat != nullptr)
			{

				auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs(FSFG(0));
				spm_funcs->free(this->gpu_mat);
			}
			this->gpu_mat = mat.gpu_mat;
			mat.gpu_mat = nullptr;
		}

	template<>
		Faust::MatSparse<FSFG,GPU2>* Faust::MatSparse<FSFG,GPU2>::get_rows(faust_unsigned_int row_id_start, faust_unsigned_int num_rows) const
		{
			//TODO: pure GPU impl.
			MatSparse<FSFG,Cpu> cpu_copy;
			tocpu(cpu_copy);
			auto cpu_rows = cpu_copy.get_rows(row_id_start, num_rows);
			auto gpu_rows = new MatSparse<FSFG,GPU2>(*cpu_rows);
			delete cpu_rows;
			return gpu_rows;
		}

	template<>
		Faust::MatSparse<FSFG,GPU2>* Faust::MatSparse<FSFG,GPU2>::get_rows(faust_unsigned_int* row_ids, faust_unsigned_int num_rows) const
		{
			//TODO: pure GPU impl.
			MatSparse<FSFG,Cpu> cpu_copy;
			tocpu(cpu_copy);
			auto cpu_rows = cpu_copy.get_rows(row_ids, num_rows);
			auto gpu_rows = new MatSparse<FSFG,GPU2>(*cpu_rows);
			delete cpu_rows;
			return gpu_rows;
		}

	template<>
		Faust::MatSparse<FSFG,GPU2>* Faust::MatSparse<FSFG,GPU2>::get_cols(faust_unsigned_int col_id_start, faust_unsigned_int num_cols) const
		{
			//TODO: pure GPU impl.
			MatSparse<FSFG,Cpu> cpu_copy;
			tocpu(cpu_copy);
			auto cpu_cols = cpu_copy.get_cols(col_id_start, num_cols);
			auto gpu_cols = new MatSparse<FSFG,GPU2>(*cpu_cols);
			delete cpu_cols;
			return gpu_cols;
		}

	template<>
		Faust::MatSparse<FSFG,GPU2>* Faust::MatSparse<FSFG,GPU2>::get_cols(faust_unsigned_int* col_ids, faust_unsigned_int num_cols) const
		{
			//TODO: pure GPU impl.
			MatSparse<FSFG,Cpu> cpu_copy;
			tocpu(cpu_copy);
			auto cpu_cols = cpu_copy.get_cols(col_ids, num_cols);
			auto gpu_cols = new MatSparse<FSFG,GPU2>(*cpu_cols);
			delete cpu_cols;
			return gpu_cols;
		}

	template<>
		void MatSparse<FSFG, GPU2>::multiply(Vect<FSFG,GPU2>& vec, char opThis/*='N'*/) const
		{
			gm_Op gop_this;
			char2gm_Op(opThis, gop_this);
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gpu_dmat = spm_funcs->mul_gpu_dsm_ext(gpu_mat, vec.gpu_mat, nullptr, gop_this, OP_NOTRANSP);
			dsm_funcs->free(vec.gpu_mat);
			vec.gpu_mat = gpu_dmat;
		}

	template<>
		void MatSparse<FSFG, GPU2>::multiply(MatDense<FSFG,GPU2>& mat, char opThis/*='N'*/) const
		{
			gm_Op gop_this;
			char2gm_Op(opThis, gop_this);
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gpu_dmat = spm_funcs->mul_gpu_dsm_ext(gpu_mat, mat.gpu_mat, nullptr, gop_this, OP_NOTRANSP);
			dsm_funcs->free(mat.gpu_mat);
			mat.gpu_mat = gpu_dmat;
		}

	template<>
		size_t Faust::MatSparse<FSFG,GPU2>::getNBytes() const
		{
			return this->getNonZeros()*(sizeof(FSFG)+sizeof(int))+(this->getNbRow()+1)*sizeof(int);
		}

		template<>
		void Faust::MatSparse<@FAUST_SCALAR_FOR_GM@,GPU2>::real(Faust::MatSparse<Real<@FAUST_SCALAR_FOR_GM@>, GPU2>& real_mat) const
		{
			auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			auto real_gpu_mat = spm_funcs->real(gpu_mat);
			if(real_mat.gpu_mat != nullptr)
				spm_funcs->free(real_mat.gpu_mat);
			real_mat.gpu_mat = real_gpu_mat;
		}

		template<>
			MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2> MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2>::to_bsr(int bsize) const
			{
				auto spm_funcs = GPUModHandler::get_singleton()->spm_funcs(@FAUST_SCALAR_FOR_GM@(0));
				MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2> bsr_mat;
				bsr_mat.set_gpu_mat_ptr(spm_funcs->to_bsr(this->gpu_mat, bsize));
				return bsr_mat;
			}
};
