#include "faust_Transform_gpu.h"
namespace Faust
{

	template<>
		gm_MatArray_t Transform<@FAUST_SCALAR_FOR_GM@,GPU2>::asGMObj() const
		{
			auto marr_funcs = GPUModHandler::get_singleton()->marr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			gm_MatArray_t gpu_mat_arr;
			gpu_mat_arr = marr_funcs->create();
			//TODO: if not MatDense/MatSparse/MatBSR the matrix must be converted to MatSparse before creating gpu_mat_arr
			//TODO: this function will be deleted when sliceMultiply and indexMultiply will be implemented as MatGeneric abstract method for all subclasses
			for(auto M: data)
			{
				auto pushed_M = const_cast<MatGeneric<@FAUST_SCALAR_FOR_GM@,GPU2>*>(M);
				marr_funcs->addgpu_anymat(gpu_mat_arr, pushed_M->get_gpu_mat_ptr());
			}
			return gpu_mat_arr;
		}

	template<>
		MatDense<@FAUST_SCALAR_FOR_GM@, GPU2> Transform<@FAUST_SCALAR_FOR_GM@,GPU2>::sliceMultiply(const Slice s[2], MatDense<@FAUST_SCALAR_FOR_GM@, GPU2>& gpu_X, const char opThis) const
		{
			auto marr_funcs = GPUModHandler::get_singleton()->marr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gpu_mat_arr = asGMObj();	
			//TODO: refactor this code with other functions doing the same about op
			gm_Op op;
			faust_unsigned_int out_nrows, out_ncols;
			if(opThis == 'N')
			{
				op = OP_NOTRANSP;
				out_nrows = getNbRow();
				out_ncols = getNbCol();
			}
			else if(opThis == 'T')
				op = OP_TRANSP;
			else if(opThis == 'H')
				op = OP_CONJTRANSP;
			else
				throw std::runtime_error("Invalid opThis");
			int rs_size, cs_size;
			if(s[0].start_id != 0 || s[0].end_id != getNbRow())
				rs_size = s[0].end_id-s[0].start_id; // end_id is not included in the slice
			else
				rs_size = 0;
			if(s[1].start_id != 0 || s[1].end_id != getNbRow())
				cs_size = s[1].end_id-s[1].start_id; // end_id is not included in the slice
			else
				cs_size = 0;
			MatDense<@FAUST_SCALAR_FOR_GM@,GPU2> out(out_nrows, out_ncols, nullptr, /*no_alloc*/true);
			// if both cs_size and rs_size are null the following call will call chain_matmul_by_dsm_one
			out.gpu_mat = marr_funcs->sliced_chain_matmul_by_dsm_one(gpu_mat_arr, (int) s[0].start_id, (int) rs_size, (int) s[1].start_id, (int) cs_size, op, gpu_X.gpu_mat);
			if(gpu_mat_arr != nullptr)
				marr_funcs->free(gpu_mat_arr, /* del mats*/ false); // remove gpu mats individually
			return out;
		}

	template<>
		MatDense<@FAUST_SCALAR_FOR_GM@, GPU2> Transform<@FAUST_SCALAR_FOR_GM@,GPU2>::indexMultiply(faust_unsigned_int* ids[2], size_t id_lens[2], MatDense<@FAUST_SCALAR_FOR_GM@, GPU2>& gpu_X, const char opThis) const
		{
			auto marr_funcs = GPUModHandler::get_singleton()->marr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gpu_mat_arr = asGMObj();	
			//TODO: refactor this code with other functions doing the same about op
			gm_Op op;
			faust_unsigned_int out_nrows, out_ncols;
			if(opThis == 'N')
			{
				op = OP_NOTRANSP;
				out_nrows = getNbRow();
				out_ncols = getNbCol();
			}
			else if(opThis == 'T')
				op = OP_TRANSP;
			else if(opThis == 'H')
				op = OP_CONJTRANSP;
			else
				throw std::runtime_error("Invalid opThis");

			MatDense<@FAUST_SCALAR_FOR_GM@,GPU2> out(out_nrows, out_ncols, nullptr, /*no_alloc*/true);
			// if both cs_size and rs_size are null the following call will call chain_matmul_by_dsm_one
			//TODO: change ids faust_unsigned_int type to size_t to avoid the casting
			out.gpu_mat = marr_funcs->indexed_chain_matmul_by_dsm_one(gpu_mat_arr, (size_t **)ids, id_lens, op, gpu_X.gpu_mat);
			if(gpu_mat_arr != nullptr)
				marr_funcs->free(gpu_mat_arr, /* del mats*/ false); // remove gpu mats individually
			return out;
		}

	template<>
		RefManager Transform<@FAUST_SCALAR_FOR_GM@,GPU2>::ref_man([](void *fact)
				{
#ifdef DEBUG
				std::cout << "Transform delete_fact" << std::endl;
#endif
				delete static_cast<MatGeneric<@FAUST_SCALAR_FOR_GM@, GPU2>*>(fact);
				});
}
