#include "faust_Vect_gpu.h"
#ifndef _FSFG_
#define _FSFG_
typedef @FAUST_SCALAR_FOR_GM@ FSFG;
#endif
namespace Faust
{

	template<>
		Vect<FSFG,GPU2>::Vect():MatDense<FSFG,GPU2>()
	{
	}

	template<>
		Vect<FSFG,GPU2>::Vect(const faust_unsigned_int size,
				const FSFG* cpu_data/*=nullptr*/,
				const bool no_alloc/*=false*/,
				const int32_t dev_id/*=-1*/,
				const void* stream/*=nullptr*/): MatDense<FSFG,GPU2>(size, 1, cpu_data, no_alloc, dev_id, stream)
	{
	}

	template<>
		Vect<FSFG,GPU2>::Vect(const Vect<FSFG, Cpu>& vec,
					const int32_t dev_id/*=-1*/,
					const void* stream/*=nullptr*/): Vect(vec.size(), vec.getData(), /*no_alloc*/ false, dev_id, stream)
	{
	}

	template<>
	faust_unsigned_int Vect<FSFG,GPU2>::size() const
	{
		return this->getNbRow();
	}

	template<>
		void Vect<FSFG,GPU2>::resize(const faust_unsigned_int size)
		{
			MatDense<FSFG, GPU2>::resize(size, 1); 
		}

	template<>
		void Vect<FSFG,GPU2>::operator=(const Vect<FSFG,GPU2> & v)
		{
			MatDense<FSFG, GPU2>::operator=(v); // TODO: remove it (in fact the function should be redefined because it does nothing more than the parent)
		}

	template<>
		void Vect<FSFG,GPU2>::operator=(const Vect<FSFG,Cpu> & v)
		{
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			auto gpu_mat = dsm_funcs->togpu(this->getNbRow(), 1, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(v.getData()));
			if(this->gpu_mat != nullptr)
				dsm_funcs->free(this->gpu_mat);
			this->gpu_mat = gpu_mat;
		}

	template<>
		FSFG Vect<FSFG,GPU2>::max_coeff()
		{
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			FSFG _max_coeff;
			dsm_funcs->max(this->gpu_mat, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&_max_coeff));
			return _max_coeff;
		}

		template<>
		FSFG Vect<FSFG,GPU2>::min_coeff()
		{
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			FSFG _min_coeff;
			dsm_funcs->min(this->gpu_mat, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&_min_coeff));
			return _min_coeff;
		}

		template<>
		FSFG Vect<FSFG,GPU2>::dot(const Vect<FSFG,GPU2> &v)
		{
			FSFG alpha;
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			dsm_funcs->dot(this->gpu_mat, v.gpu_mat, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&alpha));
			return alpha;
		}

		template<>
		FSFG Vect<FSFG,GPU2>::sum() const
		{
			FSFG s;
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			dsm_funcs->sum(this->gpu_mat, (@GM_SCALAR@*) reinterpret_cast<@GM_REINTERPRET_CAST_SCALAR@*>(&s));
			return s;
		}

		template<>
			FSFG Vect<FSFG,GPU2>::mean() const
			{
				//				return sum()/size();
				FSFG m;
				auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
				dsm_funcs->mean(this->gpu_mat, (@GM_SCALAR@*) reinterpret_cast<@GM_REINTERPRET_CAST_SCALAR@*>(&m));
				return m;
			}

		template<>
		void Vect<FSFG,GPU2>::multiplyLeft(MatSparse<FSFG,GPU2> const& S, const char transS)
		{
			S.multiply(*this);
		}

		template<>
		void Vect<FSFG,GPU2>::operator*=(const Vect<FSFG,GPU2> &v)
		{
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			dsm_funcs->elt_wise_mul(this->gpu_mat, v.gpu_mat);
		}

		template<>
		void Vect<FSFG,GPU2>::operator/=(const Vect<FSFG,GPU2> &v)
		{
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
			dsm_funcs->elt_wise_div(this->gpu_mat, v.gpu_mat);
		}

		template<>
			bool Vect<FSFG,GPU2>::operator==(const Vect<FSFG,GPU2> &v) const
			{
				return this->get_gpu_mat_ptr() == v.get_gpu_mat_ptr();
			}

		template<>
			bool Vect<FSFG,GPU2>::operator!=(const Vect<FSFG,GPU2> &v) const
			{
				return ! (*this==v);
			}

		template<>
			Vect<FSFG,Cpu> Vect<FSFG,GPU2>::tocpu(const void* stream/*=nullptr*/) const
			{
				auto matvec = MatDense<FSFG,GPU2>::tocpu(stream);
				return Vect<FSFG, Cpu>(size(), matvec.getData());
			}

		template<>
			void Vect<FSFG,GPU2>::tocpu(FSFG* cpu_buf, const void* stream/*=nullptr*/) const
			{
				MatDense<FSFG,GPU2>::tocpu(cpu_buf, stream);
			}

		template<>
			void Vect<FSFG,GPU2>::Display() const
			{
				Vect<FSFG, Cpu> v = tocpu();
				v.Display();
			}

		template<>
			void Vect<FSFG,GPU2>::setValues(const FSFG& val)
			{
				auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
				dsm_funcs->setval(this->gpu_mat, (@GM_SCALAR@*) reinterpret_cast<@GM_REINTERPRET_CAST_SCALAR@*>(const_cast<FSFG*>(&val)));
			}

		template<>
			FSFG Vect<FSFG,GPU2>::mean_relative_error(const Vect<FSFG,GPU2>& ref_vec) const
			{

				FSFG e;
				auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
				dsm_funcs->mean_relerr(this->get_gpu_mat_ptr(), ref_vec.get_gpu_mat_ptr(), (@GM_SCALAR@*) reinterpret_cast<@GM_REINTERPRET_CAST_SCALAR@*>(&e));
				return e;
			}

		template<>
			FSFG Vect<FSFG,GPU2>::operator[](faust_unsigned_int i)
			{
				FSFG coeff;
				auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
				dsm_funcs->coeff(this->gpu_mat, i, 0, (@GM_SCALAR@*) reinterpret_cast<@GM_REINTERPRET_CAST_SCALAR@*>(&coeff));
				return coeff;
			}


		template<>
			void Vect<FSFG,GPU2>::set_coeff(faust_unsigned_int i, const FSFG& val)
			{
				auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs(@FAUST_SCALAR_FOR_GM@(0));
				dsm_funcs->set_coeff(this->gpu_mat, i, 0, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&val));
			}
}
