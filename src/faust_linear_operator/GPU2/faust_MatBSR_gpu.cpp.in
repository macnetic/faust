#include "faust_MatBSR_gpu.h"
namespace Faust
{
	template<>
		MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::MatBSR(
				const faust_unsigned_int nrows,
				const faust_unsigned_int ncols,
				const faust_unsigned_int bnrows,
				const faust_unsigned_int bncols,
				const faust_unsigned_int bnnz,
				const @FAUST_SCALAR_FOR_GM@* bdata,
				const int32_t* browptr,
				const int32_t* bcolinds,
				const int32_t dev_id/*=-1*/,
				const void* stream/*=nullptr*/) : MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>()
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gp_funcs = GPUModHandler::get_singleton()->gp_funcs();
			auto cur_dev_id = gp_funcs->cur_dev();
			gp_funcs->set_dev(dev_id);
			//TODO: gpu_stream
			//	gpu_mat = spm_funcs->togpu_stream();
			gpu_mat = bsr_funcs->togpu(nrows, ncols, bnrows, bncols,  (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(bdata), browptr, bcolinds, bnnz);
			gp_funcs->set_dev(cur_dev_id);
		}

	template<>
		MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::MatBSR(const MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>& src) : MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>()
		{
			if(src.gpu_mat != nullptr)
			{
				auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
				gpu_mat = bsr_funcs->clone(src.gpu_mat, /* dev_id */ -1, /* stream */ nullptr);
			}
		}

	template<>
		MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>* MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::clone(const int32_t dev_id/*=*-1*/, const void* stream/*=*nullptr*/) const
		{
			auto mat = new MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>();
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			if(gpu_mat != nullptr)
				mat->gpu_mat = bsr_funcs->clone(gpu_mat, dev_id, stream);
			return mat;
		}

	template<>
		int32_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNbRow() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			int32_t nbRow;
			bsr_funcs->info(gpu_mat, &nbRow, nullptr, nullptr, nullptr, nullptr); //TODO gpu_mod: add get_nrows, get_ncols
			return nbRow;
		}

	template<>
		int32_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNbCol() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			int32_t nbCol;
			bsr_funcs->info(gpu_mat, nullptr, &nbCol, nullptr, nullptr, nullptr); //TODO gpu_mod: add  get_nrows, get_ncols
			return nbCol;
		}

	template<>
		faust_unsigned_int MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNonZeros() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->get_nnz(gpu_mat);
		}

	template<>
		size_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNBytes() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->get_nbytes(gpu_mat);
		}

	template<>
		size_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNbBlockRow() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->get_bnrows(gpu_mat);
		}

	template<>
		size_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNbBlockCol() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->get_bncols(gpu_mat);
		}

	template<>
		size_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getNBlocks() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->get_bnnz(gpu_mat);
		}


	template<>
		int32_t MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::getDevice() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->get_dev(gpu_mat);
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::multiply(MatDense<@FAUST_SCALAR_FOR_GM@,GPU2>& M, char opThis/*='N'*/) const
		{
			gm_Op gop_this;
			char2gm_Op(opThis, gop_this);
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gpu_dmat = bsr_funcs->mul_gpu_dsm_ext(gpu_mat, M.gpu_mat, nullptr, gop_this, OP_NOTRANSP, /*alpha*/ nullptr, /*beta*/ nullptr);
			dsm_funcs->free(M.get_gpu_mat_ptr());
			M.gpu_mat = gpu_dmat;
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::bsrgemm(const MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>& A, const MatDense<@FAUST_SCALAR_FOR_GM@,GPU2>& B, MatDense<@FAUST_SCALAR_FOR_GM@,GPU2>& C, const @FAUST_SCALAR_FOR_GM@& alpha, const @FAUST_SCALAR_FOR_GM@& beta, const char opA/*='N'*/, const char opB /*= 'N'*/)
		{
			gm_Op gop_A;
			gm_Op gop_B;
			char2gm_Op(opA, gop_A);
			char2gm_Op(opB, gop_B);
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto gpu_dmat = bsr_funcs->mul_gpu_dsm_ext(A.gpu_mat, B.gpu_mat, C.gpu_mat, gop_A, gop_B, (const @GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&alpha), (const @GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(&beta));
			dsm_funcs->free(C.get_gpu_mat_ptr());
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::multiply(Vect<@FAUST_SCALAR_FOR_GM@,GPU2>& vec, char opThis/*='N'*/) const
		{
			gm_Op gop_this;
			char2gm_Op(opThis, gop_this);
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			auto dsm_funcs = GPUModHandler::get_singleton()->dsm_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			// the backend code is specialized for vector (the number of columns is tested to call another function, see gpu_mod)
			auto gpu_dmat = bsr_funcs->mul_gpu_dsm_ext(gpu_mat, vec.gpu_mat, nullptr, gop_this, OP_NOTRANSP, nullptr, nullptr);
			dsm_funcs->free(vec.get_gpu_mat_ptr());
			vec.gpu_mat = gpu_dmat;
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::tocpu(int32_t* browptr, int32_t* bcolinds, @FAUST_SCALAR_FOR_GM@* bdata, int32_t* nrows/*=nullptr*/, int32_t* ncols/*=nullptr*/, int32_t *bnrows/*=nullptr*/, int32_t *bncols/*=nullptr*/, int32_t* bnnz/*=nullptr*/) const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			bsr_funcs->tocpu(gpu_mat, browptr, bcolinds, (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(bdata), nrows, ncols, bnrows, bncols, bnnz);
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::tocpu(MatBSR<@FAUST_SCALAR_FOR_GM@, Cpu> &cpu_mat) const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			int32_t nrows, ncols, bnrows, bncols, bnnz;
			bsr_funcs->info(gpu_mat, &nrows, &ncols, &bnrows, &bncols, &bnnz);
			MatBSR<@FAUST_SCALAR_FOR_GM@, Cpu> M(nrows, ncols, bnrows, bncols, bnnz);
			bsr_funcs->tocpu(gpu_mat, const_cast<int*>(M.get_browptr()), const_cast<int*>(M.get_bcolinds()), (@GM_SCALAR@*) reinterpret_cast<const @GM_REINTERPRET_CAST_SCALAR@*>(const_cast<@FAUST_SCALAR_FOR_GM@*>(M.get_bdata())), nullptr, nullptr, nullptr, nullptr, nullptr);
			cpu_mat = std::move(M);
		}

	template<>
		MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2> MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::to_sparse() const
		{
			MatSparse<@FAUST_SCALAR_FOR_GM@, GPU2> spm;
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			spm.set_gpu_mat_ptr(bsr_funcs->to_csr(gpu_mat));
			return spm;
		}

	template<>
		MatDense<@FAUST_SCALAR_FOR_GM@, GPU2> MatBSR<@FAUST_SCALAR_FOR_GM@,GPU2>::to_dense() const
		{
			MatDense<@FAUST_SCALAR_FOR_GM@, GPU2> dsm;
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			dsm.set_gpu_mat_ptr(bsr_funcs->bsr2dense(gpu_mat, OP_NOTRANSP));
			return dsm;
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::transpose()
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			bsr_funcs->transpose(gpu_mat);
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::adjoint()
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			bsr_funcs->adjoint(gpu_mat);
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::conjugate()
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			bsr_funcs->conjugate(gpu_mat);
		}

	template<>
		Real<@FAUST_SCALAR_FOR_GM@> MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::norm() const
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			return bsr_funcs->norm_frob(gpu_mat);
		}

	template<>
		void MatBSR<@FAUST_SCALAR_FOR_GM@, GPU2>::setZeros()
		{
			auto bsr_funcs = GPUModHandler::get_singleton()->bsr_funcs((@FAUST_SCALAR_FOR_GM@)(0));
			bsr_funcs->set_zeros(gpu_mat);
		}

}

