/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2019):    Hakim Hadj-Djilani, Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Hakim H. hakim.hadj-djilani@inria.fr                                */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */
/****************************************************************************/
#ifndef FAUST_CONSTANT_H
#define FAUST_CONSTANT_H


#define FAUST_VERSION @CPACK_PACKAGE_VERSION@ 

///if defined, compilation with openblas for dense algebra
#cmakedefine __GEMM_WITH_OPENBLAS__

/*! \brief If defined, faust uses single precision for the the algebra (Faust::MatDense, Faust::MatSparse, Faust::Transform). <br>
* If not, it's used double precision.
*\warning Only useful for the mexfunction (MATLAB wrapper) since the Faust::MatDense ... classes are template
*/
#cmakedefine FAUST_SINGLE

//if defined, print debug message (useful for debugging)
#cmakedefine FAUST_VERBOSE

//if defined, print timers (profile the code)
#cmakedefine __COMPILE_TIMERS__


/// Value of FFPP (faust floating point precision)
#ifdef FAUST_SINGLE
	typedef float FFPP; ///single precision
#else
	typedef double FFPP; ///double precision
#endif

enum FDevice
{
   Cpu, /* Central Process Unit */
#ifdef __COMPILE_GPU__
   Gpu, /* Graphic Process Unit */
#endif
   GPU2
};
typedef unsigned long int faust_unsigned_int;
typedef long int faust_int;

const double FAUST_PRECISION = 1e-6;
const faust_unsigned_int FAUST_NORM2_MAX_ITER = 100;

#include "Eigen/Core"
template<typename FPP>
using Real = typename Eigen::NumTraits<FPP>::Real; //TODO: should be in a hpp


// Use Eigen library only under Mozilla Public License 2.0 (MPL 2.0) or less restrictive licenses
#define EIGEN_MPL2_ONLY

// WARNING only useful for the getType method of the class getType
// must be deleted in future release
enum MatType
{
   Dense, 
   Sparse, 
   Diag
};



///// #define FAUST_GPU_ALREADY_SET -3
///// #define FAUST_DEFAULT_CUDA_DEVICE 0

#endif
