# The code below is generic through cmake variables:
# TYPE_NAME can be Cplx or Real
# TYPE can be double or complex,
# CORE_CLASS can be FaustCore or FaustCoreCplx
# CORE_OBJ can be core_faust_cplx or core_faust_dbl

"""
This class groups all Givens related algorithms wrappers.
"""
cdef class FaustAlgoGenGivens@TYPE_NAME@:

    @staticmethod
    def fact_givens_fgft@FUNC_TYPE_SUFFIX@(Lap, J, t, verbosity=0, stoppingError = 0.0,
                         errIsRel=True, order=1, enable_large_Faust=False):
        if(order == 'ascend'): order = 1
        elif(order == 'descend'): order = -1
        elif(order == 'undef'): order = 0
        else: raise ValueError('order argument must be something among'
                               '\'ascend\', \'descend\' or \'undef\'')

        cdef unsigned int Lap_num_rows=Lap.shape[0]
        cdef unsigned int Lap_num_cols=Lap.shape[1]

        cdef @TYPE@[:,:] Lap_view
        cdef @REAL_TYPE@[:] D_view

        Lap_view = Lap
        D = np.empty(Lap.shape[0], dtype=type2dtype('@REAL_TYPE@'))
        D_view = D

        core = @CORE_CLASS@(core=True)
        core.@CORE_OBJ@ = FaustCoreCy.fact_givens_fgft@FUNC_TYPE_SUFFIX@[@TYPE@,@REAL_TYPE@](&Lap_view[0,0],
                                                                      Lap_num_rows,
                                                                      Lap_num_cols, J, t,
                                                                      &D_view[0], verbosity,
                                                                      stoppingError,
                                                                      errIsRel,
                                                                      int(order),
                                                                      enable_large_Faust)

        #from scipy.sparse import spdiags
        #D_spdiag = spdiags(D, [0], Lap.shape[0], Lap.shape[0])
        #return core, D_spdiag
        if core.@CORE_OBJ@ == NULL:
            raise Exception("Empty transform (nGivens is too big ? Set"
                            " enable_large_Faust to True to force the computation).")

        return core, D

    @staticmethod
    def fact_givens_fgft_sparse(Lap, J, t, verbosity=0, stoppingError = 0.0,
                                     errIsRel=True, order='ascend',
                                     enable_large_Faust=False):
        from scipy.sparse import spdiags
        cdef @TYPE@[:] data1d #only for csr mat factor
        cdef int [:] indices # only for csr mat
        cdef int [:] indptr # only for csr mat
        cdef unsigned int Lap_num_rows=Lap.shape[0]
        cdef unsigned int Lap_num_cols=Lap.shape[1]
        cdef @REAL_TYPE@[:] D_view

        if(order == 'ascend'): order = 1
        elif(order == 'descend'): order = -1
        elif(order == 'undef'): order = 0

        data1d=Lap.data.astype('@TYPE@','F')
        indices=Lap.indices.astype(np.int32, 'F')
        indptr=Lap.indptr.astype(np.int32, 'F')

        D = np.empty(Lap.shape[0], dtype=type2dtype('@TYPE@'))
        D_view = D

        core = @CORE_CLASS@(core=True)
        core.@CORE_OBJ@ = \
        FaustCoreCy.fact_givens_fgft_sparse@FUNC_TYPE_SUFFIX@[@TYPE@, @REAL_TYPE@](&data1d[0],
                                                                  &indices[0],
                                                                  &indptr[0],
                                                                  Lap.nnz,
                                                                  Lap_num_rows,
                                                                  Lap_num_cols, J, t,
                                                                  &D_view[0],
                                                                  verbosity,
                                                                  stoppingError,
                                                                  errIsRel,
                                                                  int(order),
                                                                  enable_large_Faust)

        #D_spdiag = spdiags(D, [0], Lap.shape[0], Lap.shape[0])
        #return core, D_spdiag
        if core.@CORE_OBJ@ == NULL:
            raise Exception("Empty transform (nGivens is too big ? Set"
                            " enable_large_Faust to True to force the computation).")

        return core, D

    @staticmethod
    def eigtj(M, nGivens=None, tol=0, relerr=True,  nGivens_per_fac=None, verbosity=0,
          order='ascend', enable_large_Faust=False):
        if nGivens == None:
            if tol == 0:
                raise Exception("You must specify nGivens or tol argument"
                        " (to define a stopping  criterion)")
            nGivens = 0
        if nGivens_per_fac == None: nGivens_per_fac = int(M.shape[0]/2)
        if isinstance(M, np.ndarray) and \
            not np.allclose(np.matrix(M, copy=False).H, M) or M.shape[0] != M.shape[1]:
            raise ValueError(" the matrix/array must be symmetric or hermitian.")
        if not isinstance(nGivens, int): raise TypeError("nGivens must be a int")
        if not isinstance(nGivens_per_fac, int): raise TypeError("nGivens_per_fac must be a int")
        nGivens_per_fac = max(nGivens_per_fac, 1)
        if nGivens > 0: nGivens_per_fac = min(nGivens_per_fac, nGivens)
        tol *= tol # the C++ impl. works on squared norms to measure errors

        if isinstance(M, np.ndarray):
            core_obj,D = FaustAlgoGenGivens@TYPE_NAME@.fact_givens_fgft@FUNC_TYPE_SUFFIX@(M, nGivens, nGivens_per_fac,
                    verbosity, tol,
                    relerr, order, enable_large_Faust)
        elif isinstance(M, csr_matrix):
            core_obj,D = FaustAlgoGenGivens@TYPE_NAME@.fact_givens_fgft_sparse@FUNC_TYPE_SUFFIX@(M, nGivens, nGivens_per_fac,
                    verbosity, tol,
                    relerr, order, enable_large_Faust)
        else:
            raise TypeError("The matrix to diagonalize must be a"
                            " scipy.sparse.csr_matrix or a numpy array.")
        return D, core_obj

    @staticmethod
    def svdtj_Jt_to_J1J2_t1t2(J, t):
        # J and t should have been verified in fact.svdtj
        if isinstance(J, (tuple, list)):
            J1 = J[0]
            J2 = J[1]
        else:
            # J is an integer
            J1 = J2 = J

        if isinstance(t, (tuple, list)):
            t1 = t[0]
            t2 = t[1]
        else:
            # t is an integer
            t1 = t2 = t
        return J1, J2, t1, t2

    @staticmethod
    def svdtj(M, J, t, verbosity=0, stoppingError = 0.0,
              errIsRel=True, enable_large_Faust=False):

        cdef unsigned int M_num_rows=M.shape[0]
        cdef unsigned int M_num_cols=M.shape[1]

        cdef @TYPE@[:,:] M_view
        cdef @TYPE@[:] S_view

        M_view = M
        S = np.empty(M.shape[0], dtype=M.dtype)
        S_view = S

        J1, J2, t1, t2 = FaustAlgoGenGivens@TYPE_NAME@.svdtj_Jt_to_J1J2_t1t2(J, t)

        coreU = @CORE_CLASS@(core=True)
        coreV = @CORE_CLASS@(core=True)
        FaustCoreCy.svdtj@FUNC_TYPE_SUFFIX@[@TYPE@,@REAL_TYPE@](&(coreU.@CORE_OBJ@),
                                                                &(coreV.@CORE_OBJ@),
                                                                &S_view[0],
                                                                &M_view[0,0],
                                                                M_num_rows,
                                                                M_num_cols,
                                                                J1, J2, t1, t2,
                                                                verbosity,
                                                                stoppingError,
                                                                errIsRel, enable_large_Faust)

        #from scipy.sparse import spdiags
        #S_spdiag = spdiags(S, [0], M.shape[0], M.shape[0])
        #return core, S_spdiag
        if coreU.@CORE_OBJ@ == NULL:
            raise Exception("Empty transform (nGivens is too big ? Set"
                            " enable_large_Faust to True to force the computation).")
        return coreU, S, coreV

    @staticmethod
    def svdtj_sparse(M, J, t, verbosity=0, stoppingError = 0.0,
                     errIsRel=True, enable_large_Faust=False):
        from scipy.sparse import spdiags
        cdef @TYPE@ [:] data1d #only for csr mat factor
        cdef int [:] indices # only for csr mat
        cdef int [:] indptr # only for csr mat
        cdef unsigned int M_num_rows=M.shape[0]
        cdef unsigned int M_num_cols=M.shape[1]
        cdef @TYPE@[:] S_view


        data1d = M.data.astype('@TYPE@','F')
        indices = M.indices.astype(np.int32, 'F')
        indptr = M.indptr.astype(np.int32, 'F')

        S = np.empty(M.shape[0], dtype=M.dtype)
        S_view = S

        J1, J2, t1, t2 = FaustAlgoGenGivens@TYPE_NAME@.svdtj_Jt_to_J1J2_t1t2(J, t)

        coreU = @CORE_CLASS@(core=True)
        coreV = @CORE_CLASS@(core=True)
        FaustCoreCy.svdtj_sparse@FUNC_TYPE_SUFFIX@[@TYPE@, @REAL_TYPE@](
            &(coreU.@CORE_OBJ@),
            &(coreV.@CORE_OBJ@),
            &S_view[0],
            &data1d[0],
            &indices[0],
            &indptr[0],
            M.nnz,
            M_num_rows,
            M_num_cols,
            J1, J2, t1, t2,
            verbosity,
            stoppingError,
            errIsRel, enable_large_Faust)

        coreU._isReal = coreV._isReal = False
        #D_spdiag = spdiags(D, [0], M.shape[0], M.shape[0])
        #return core, D_spdiag

        if coreU.@CORE_OBJ@ == NULL:
            raise Exception("Empty transform (nGivens is too big ? Set"
                            " enable_large_Faust to True to force the computation).")
        return coreU, S, coreV
