#include "FaustCoreCpp.h"
using namespace std;
template<>
void FaustCoreCpp<@TYPE@, GPU2>::multiply(@TYPE@* y_data, int y_nrows, int y_ncols, @TYPE@* x_data, int* x_row_ptr, int* x_id_col, int x_nnz, int x_nrows, int x_ncols)
{
    Faust::MatSparse<@TYPE@, GPU2> X(x_nrows, x_ncols, x_nnz, x_data, x_row_ptr, x_id_col);
    Faust::MatDense<@TYPE@, GPU2> Y;
    Y = this->transform->multiply(X);
	Faust::MatDense<@TYPE@, Cpu> Y_cpu;
	Y.tocpu(Y_cpu);
    memcpy(y_data, Y_cpu.getData(), sizeof(@TYPE@)*y_ncols*y_nrows);
}

template<>
void FaustCoreCpp<@TYPE@,GPU2>::multiply(@TYPE@* value_y,int nbrow_y,int nbcol_y, const @TYPE@* value_x,int nbrow_x,int nbcol_x)const
{
    unsigned int nbRowThis,nbColThis;


    nbRowThis = this->getNbRow();
    nbColThis = this->getNbCol();

    if ( (nbrow_y != nbRowThis) | (nbrow_x != nbColThis) | (nbcol_y != nbcol_x) )
    {
        std::cout<<"nbRowThis "<<nbRowThis<<" must be equal to nb row y  "<<nbrow_y<<std::endl;
        std::cout<<"nbColThis "<<nbColThis<<" must be equal to nb row x  "<<nbrow_x<<std::endl;
        std::cout<<"nbcol_y "<<nbcol_y<<" must be equal to nbcol_x  "<<nbcol_x<<std::endl;
        handleError("FaustCpp"," multiply : invalid dimension");
    }
    if (nbcol_x == 1)
    {
        // assuming that x and y are pointers to memory allocated to the proper
        // sizes
        //            Y = this->transform->multiply(value_x);
        this->transform->multiply(value_x, value_y);
    }
    else
    {
        if(this->transform->get_mul_order_opt_mode() == Faust::DEFAULT_L2R)
        {
            //assuming that value_x and value_y are allocated properly (to the good
            //sizes) in numpy world
            this->transform->multiply(value_x, nbcol_x, value_y);
        }
        else
        { // for other ways to multiply, it is not handled yet
            Faust::MatDense<@TYPE@,Cpu> X(value_x,nbrow_x,nbcol_x);
            Faust::MatDense<@TYPE@,Cpu> Y;

            Y = this->transform->multiply(X);
            memcpy(value_y,Y.getData(),sizeof(@TYPE@)*nbrow_y*nbcol_y);
        }
    }
}

template<>
void FaustCoreCpp<@TYPE@, GPU2>::get_product(@TYPE@* y_data, int y_nrows, int y_ncols)
{
    Faust::MatDense<@TYPE@, Cpu> Y = this->transform->get_product().tocpu();
    memcpy(y_data, Y.getData(), sizeof(@TYPE@)*y_ncols*y_nrows);
}

template<>
FaustCoreCpp<@TYPE@,GPU2>* FaustCoreCpp<@TYPE@, GPU2>::polyCoeffs(const @TYPE@* coeffs)
{
    throw std::runtime_error("Not implemented on GPU");
}

template<>
FaustCoreCpp<@TYPE@,GPU2>* FaustCoreCpp<@TYPE@, GPU2>::polyNext() const
{
    throw std::runtime_error("Not implemented on GPU");
}

template<>
void FaustCoreCpp<@TYPE@,GPU2>::get_fact(const unsigned int& i, @TYPE@* fact_ptr) const
{
    throw std::runtime_error("Not implemented on GPU");
}

template<>
void  FaustCoreCpp<@TYPE@,GPU2>::device(char* dev) const
{
	std::strncpy(dev, "gpu", 4);
}

template<>
FaustCoreCpp<@TYPE@,GPU2>* FaustCoreCpp<@TYPE@,GPU2>::clone(int dev_id/*=-1*/) const
{
    Faust::TransformHelper<@TYPE@, GPU2>* th = this->transform->clone(dev_id);
    FaustCoreCpp<@TYPE@, GPU2>* core = new FaustCoreCpp<@TYPE@, GPU2>(th);
    return core;
}

template<>
FaustCoreCpp<Real<@TYPE@>,GPU2>* FaustCoreCpp2<@TYPE@,Real<@TYPE@>,GPU2>::real(FaustCoreCpp<@TYPE@,GPU2>* core)
{
    return core->real();
}

template<>
FaustCoreCpp<@TYPE@,GPU2>* FaustCoreCpp<@TYPE@,GPU2>::read_from_mat_file(const char* filepath)
{
    throw std::runtime_error("A .mat file is always read from CPU code not GPU's.");
    return nullptr;
}

template<>
  FaustCoreCpp<@TYPE@, GPU2>* FaustCoreCpp<@TYPE@,GPU2>::fourierFaust(unsigned int n, const bool norma, const bool diag_opt)
{
    Faust::TransformHelper<@TYPE@,GPU2>* th;
    if(diag_opt)
        throw std::runtime_error("Diagonal Optimization of DFT isn't yet supported on GPU.");
    else
        th = Faust::TransformHelper<@TYPE@,GPU2>::fourierFaust(n, norma);
    if(!th) return NULL;
    FaustCoreCpp<@TYPE@,GPU2>* core = new FaustCoreCpp<@TYPE@,GPU2>(th);
    return core;
}
