
cdef class FaustAlgoGen@PROC@@TYPE_NAME@:

    @staticmethod
    def eyeFaust(n, m):
        core = @CORE_CLASS@(core=True)
        core.@CORE_OBJ@ = FaustCoreCy.@CPP_CORE_CLASS@[@TYPE@].eyeFaust(n,
                                                                    m)
        return core

    @staticmethod
    def hadamardFaust(n, norma):
        if(n>31):
            raise ValueError("Faust doesn't handle a Hadamard of order larger than "
                             "2**31")
        core = @CORE_CLASS@(core=True)
        core.@CORE_OBJ@ = FaustCoreCy.@CPP_CORE_CLASS@[@TYPE@].hadamardFaust(n,
                                                                         norma)
        if(core.@CORE_OBJ@ == NULL):
            raise MemoryError()
        return core

    @staticmethod
    def randFaust(faust_nrows, faust_ncols, t, min_num_factors, max_num_factors, min_dim_size,
                  max_dim_size, density=0.1, per_row=True, seed=0):
        core = @CORE_CLASS@(core=True)
        core.@CORE_OBJ@ = \
                FaustCoreCy.@CPP_CORE_CLASS@[@TYPE@].randFaust(faust_nrows,
                                                           faust_ncols,
                                                           t, min_num_factors, max_num_factors, min_dim_size,
                                                           max_dim_size,
                                                               density,
                                                               per_row,
                                                               seed)
        if(core.@CORE_OBJ@ == NULL): raise MemoryError()
        return core

    @staticmethod
    def randBSRFaust(faust_nrows, faust_ncols, min_num_factors, max_num_factors,
                  bnrows, bncols, density=0.1):
        core = @CORE_CLASS@(core=True)
        core.@CORE_OBJ@ = \
                FaustCoreCy.@CPP_CORE_CLASS@[@TYPE@].randBSRFaust(faust_nrows,
                                                               faust_ncols,
                                                               min_num_factors,
                                                               max_num_factors,
                                                               bnrows,
                                                               bncols, density)
        if(core.@CORE_OBJ@ == NULL): raise MemoryError()
        return core

