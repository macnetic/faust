#!/usr/bin/env python
# @PYFAUST_LICENSE_HEADER@

from setuptools import setup, Extension
#from distutils.core import setup, Extension
from Cython.Build import cythonize
import numpy
import sys
from os import sep
from glob import glob

version = '@CPACK_PACKAGE_VERSION@'

if(version == ''):
    version = '0.0.0' # typically when compiling just for testing
                    # (not for packaging with a proper version)
                    # it avoids error PEP440


PyFaust = Extension('_FaustCorePy',
                    sources = @PY_EXT_SOURCES@,
                    language = 'c++',
                    include_dirs=[@FAUST_PYTHON_INCLUDE_DIR@, numpy.get_include()],
                    library_dirs=[@FAUST_PYTHON_LIB_DIR@],
                    libraries=[ @FAUST_PYTHON_LIBS@],
                    extra_compile_args = [ @FAUST_SETUP_PY_CFLAGS@ ],
                    extra_link_args = [ @FAUST_SETUP_PY_LFLAGS@ ],
                    extra_objects = @PYTHON_EXT_EXTRA_OBJECTS@
                   )


setup(
    name = 'pyfaust@PYFAUST_PKG_SUFFIX@',
    version = version, # cf. header
    ext_modules = cythonize(PyFaust, compiler_directives={'language_level': sys.version_info.major }),
    packages = [ 'pyfaust', 'pyfaust.tests' ],
    url = 'https://faust.inria.fr',
    author = 'INRIA',
    author_email = 'remi.gribonval@inria.fr',
    description = 'FAµST python toolbox',
    long_description = """The FAµST toolbox provides algorithms and data structures to decompose a given dense matrix into a product of sparse matrices in order to reduce its computational complexity (both for storage and manipulation).  FaµST can be used to:

        - speedup / reduce the memory footprint of iterative algorithms commonly used for solving high dimensional linear inverse problems,

        - learn dictionaries with an intrinsically efficient implementation,

        - compute (approximate) fast Fourier transforms on graphs.

    """,
    classifiers = [ 'License :: OSI Approved :: BSD License',
                   'Programming Language :: Python :: 3',
                  '@GPU_CUDA_VERSION_PYPI_CLASSIFIER@'],
    install_requires = [@PYFAUST_PYTHON_REQUIREMENTS_AS_PYLIST@],
    license = "3-clause BSD 2.0",
    package_data = {
        'pyfaust': [ 'data/*.mat', 'license*.txt', '@GPU_MOD_LIB_PATH@']
    }
)
