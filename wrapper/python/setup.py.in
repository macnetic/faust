#!/usr/bin/env python
# @PYFAUST_LICENSE_HEADER@

from setuptools import setup, Extension
import sysconfig
#from distutils.core import setup, Extension
from Cython.Build import cythonize
import numpy
import sys
from os import sep
from glob import glob

version = '@CPACK_PACKAGE_VERSION@'

LINUX_DEFAULT_COMPILER_FOR_PYTHON = '@LINUX_DEFAULT_COMPILER_FOR_PYTHON@'

if(version == ''):
    version = '0.0.0' # typically when compiling just for testing
                    # (not for packaging with a proper version)
                    # it avoids error PEP440

from sys import platform
lib_ext = 'so'
extra_link_args = [@FAUST_SETUP_PY_LFLAGS@]
extra_objects = @PYTHON_EXT_EXTRA_OBJECTS@
if platform == "linux":
    if LINUX_DEFAULT_COMPILER_FOR_PYTHON == 'OFF':# or platform == "darwin":
        # compile with clang on Linux (and MacOS X, this is the default choice)
        from distutils import sysconfig
        sysconfig.get_config_vars()['CC'] = 'clang++'
        sysconfig.get_config_vars()['CXX'] = 'clang++'
        sysconfig.get_config_vars()['LDCXXSHARED'] = 'clang++ -shared -fopenmp'
    for opt in [@FAUST_SETUP_PY_LFLAGS@]+[]:
        if '-fopenmp' not in extra_link_args and opt.find('-fopenmp'):
            extra_link_args.append('-fopenmp') # because the LDCXXSHARED modif above is not enough (distutils ignores the -fopenmp flag)
    # note: libfaust.a must have been compiled with clang too (cmake -DCMAKE_CXX_COMPILER=clang++) or link errors might occur
    if extra_objects is None:
        extra_objects = ['@PROJECT_BINARY_DIR@/lib/libfaust.a']
    else:
        extra_objects += ['@PROJECT_BINARY_DIR@/lib/libfaust.a']
    lib_ext = 'so'
elif platform == 'darwin':
    lib_ext = 'dylib'
elif platform == 'win32':
    lib_ext = 'dll'

lib_path = "_FaustCorePy"+sysconfig.get_config_vars()['EXT_SUFFIX']
from os.path import exists, dirname, join
if sys.argv[1] == "build_ext" and exists(join(dirname(sys.argv[0]),lib_path)):
    print("The shared library", lib_path, "already exists, please delete it to build again.")
    exit(0)

PyFaust = Extension('_FaustCorePy',
                    sources = @PY_EXT_SOURCES@,
                    language = 'c++',
                    include_dirs=[@FAUST_PYTHON_INCLUDE_DIR@, numpy.get_include()],
                    library_dirs=[@FAUST_PYTHON_LIB_DIR@],
                    libraries=[ @FAUST_PYTHON_LIBS@],
                    extra_compile_args = [ @FAUST_SETUP_PY_CFLAGS@ ],
                    extra_link_args = extra_link_args,
                    extra_objects = extra_objects
                   )

setup(
    name = 'pyfaust@PYFAUST_PKG_SUFFIX@',
    version = version, # cf. header
    include_dirs = numpy.get_include(),
    ext_modules = cythonize(PyFaust, compiler_directives={'language_level': sys.version_info.major }),
    packages = [ 'pyfaust', 'pyfaust.tests' ],
    url = 'https://faust.inria.fr',
    author = 'INRIA',
    author_email = 'remi.gribonval@inria.fr',
    description = 'FAµST python toolbox',
    long_description = """![FAµST logo](https://faust.inria.fr/files/2016/11/cropped-FAUST.jpeg)
    ![pipeline status](https://gitlab.inria.fr/faustgrp/faust/badges/main/pipeline.svg?ignore_skipped=true)
    ![coverage](https://gitlab.inria.fr/faustgrp/faust/badges/hakim_branch/coverage.svg?job=pyfaust_test_code_coverage&key_text=coverage)

    The FAµST toolbox provides algorithms and data structures to decompose a given dense matrix into a product of sparse matrices in order to reduce its computational complexity (both for storage and manipulation).  FaµST can be used to:

    - speedup / reduce the memory footprint of iterative algorithms commonly used for solving high dimensional linear inverse problems,

    - learn dictionaries with an intrinsically efficient implementation,

    - compute (approximate) fast Fourier transforms on graphs.

    """,
    long_description_content_type='text/markdown',
    classifiers = [ 'License :: OSI Approved :: BSD License',
                   'Programming Language :: Python :: 3',
                  @GPU_CUDA_VERSION_PYPI_CLASSIFIER@],
    install_requires = [@PYFAUST_PYTHON_REQUIREMENTS_AS_PYLIST@],
    license = "3-clause BSD 2.0",
    package_data = {
        'pyfaust': [ 'data/*.mat', 'license*.txt', 'lib/*.'+lib_ext]
    }
)


