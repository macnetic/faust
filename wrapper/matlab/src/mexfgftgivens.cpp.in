/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                                */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2019):   Hakim HADJ-DJILANI,									*/
/*  					Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of INRIA.              */
/*																			*/
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*                                                                          */
/*  More information about license: http://faust.inria.fr                   */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */


#include "mex.h"
#include "faust_GivensFGFT.h"
#include "faust_GivensFGFTParallel.h"
#include "faust_GivensFGFTComplex.h"
#include "faust_GivensFGFTParallelComplex.h"
#include "faust_TransformHelper.h"
#include "faust_linear_algebra.h"
#include "class_handle.hpp"
#include "faust_Vect.h"
#include <vector>
#include <string>
#include <algorithm>
#include "mx2Faust.h"
#include "faust2Mx.h"
#include <stdexcept>

//normally Givens is only for double, float scalars
// update: complex matrices are available with GivensFGFTComplex
typedef @FAUST_SCALAR@ SCALAR;
typedef @FACT_FPP@ FPP2;

using namespace Faust;

void fgft_givens(const mxArray* matlab_matrix, int J, int t, Real<SCALAR> tol, unsigned int verbosity, bool rel_err,  int order, const bool enable_large_Faust, mxArray **plhs);

void fgft_givens_cplx(const mxArray* matlab_matrix, int J, int t, double tol, unsigned int verbosity, bool rel_err, int order, const bool enable_large_Faust, mxArray **plhs);

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{

	int J;
	int t = 1; // default value for non-parallel Givens FGFT
	unsigned int verbosity = 0; //default verbosity (no info. displayed)
	double tol = 0;
	bool rel_err = true;
	bool enable_large_Faust = false;
	int order;

	if(nrhs < 2 || nrhs > 8)
		mexErrMsgTxt("Bad number of input arguments");

	J = (int) mxGetScalar(prhs[1]);
	if(nrhs >= 3)
		t = (int) mxGetScalar(prhs[2]);
	if(nrhs >= 4)
		verbosity = (int) mxGetScalar(prhs[3]);
	if(nrhs >= 5)
		tol = (double) mxGetScalar(prhs[4]);
	if(nrhs >= 6)
		rel_err = (bool) mxGetScalar(prhs[5]);
	if(nrhs >= 7)
		order = (int) mxGetScalar(prhs[6]); //eigenvalues order
	if(nrhs >= 8)
		enable_large_Faust = (bool) mxGetScalar(prhs[7]);

	tol *= tol; // C++ backend works with squared norm error

	const mxArray* matlab_matrix = prhs[0]; // Laplacian

	if(mxIsComplex(matlab_matrix))
		fgft_givens_cplx(matlab_matrix, J, t, tol, verbosity, rel_err, order, enable_large_Faust, plhs);
	else
		fgft_givens(matlab_matrix, J, t, tol, verbosity, rel_err,  order, enable_large_Faust, plhs);

}

void fgft_givens(const mxArray* matlab_matrix, int J, int t, Real<SCALAR> tol, unsigned int verbosity, bool rel_err, int order, const bool enable_large_Faust, mxArray **plhs)
{
	// initialization of the matrix that will be factorized
	Faust::MatGeneric<SCALAR,Cpu>* Lap;
	Faust::MatDense<SCALAR,Cpu> dLap;
	Faust::MatSparse<SCALAR,Cpu> sLap;

	Faust::GivensFGFT<SCALAR, Cpu, FPP2>* algo;

	try{
		if (mxIsSparse(matlab_matrix))
		{
			mxArray2FaustspMat(matlab_matrix,sLap);
			Lap = &sLap;
			if(t <= 1)
				algo = new GivensFGFT<SCALAR,Cpu,FPP2>(sLap, J, verbosity, tol, rel_err, enable_large_Faust);
			else
				algo = new GivensFGFTParallel<SCALAR,Cpu,FPP2>(sLap, J, t, verbosity, tol, rel_err, enable_large_Faust);

		}else
		{
			mxArray2FaustMat(matlab_matrix,dLap);
			Lap = &dLap;
			if(t <= 1)
				algo = new GivensFGFT<SCALAR,Cpu,FPP2>(dLap, J, verbosity, tol, rel_err, enable_large_Faust);
			else
				algo = new GivensFGFTParallel<SCALAR,Cpu,FPP2>(dLap, J, t, verbosity, tol, rel_err, enable_large_Faust);
		}



		algo->compute_facts();

		Faust::Vect<SCALAR,Cpu> D(Lap->getNbRow());
		// true below is for ascendant order of eigenvalues
		algo->get_D(const_cast<SCALAR*>(D.getData()), order); // don't respect constness for optimization (saving a vector copy)

		plhs[1] = FaustVec2mxArray(D);

		Faust::Transform<SCALAR,Cpu> trans = std::move(algo->get_transform(order));
		TransformHelper<SCALAR,Cpu> *th = new TransformHelper<SCALAR,Cpu>(trans, true); // true is for moving and not copying the Transform object into TransformHelper (optimization possible cause we know the original object won't be used later)

		plhs[0] = convertPtr2Mat<Faust::TransformHelper<SCALAR, Cpu>>(th);

	}
	catch (const std::exception& e)
	{
		mexErrMsgTxt(e.what());
	}

	if(algo != nullptr)
		delete algo;

}

void fgft_givens_cplx(const mxArray* matlab_matrix, int J, int t, double tol, unsigned int verbosity, bool rel_err, int order, const bool enable_large_Faust, mxArray **plhs)
{
	// initialization of the matrix that will be factorized
	Faust::MatGeneric<complex<SCALAR>,Cpu>* Lap;
	Faust::MatDense<complex<SCALAR>,Cpu> dLap;
	Faust::MatSparse<complex<SCALAR>,Cpu> sLap;

	Faust::GivensFGFTComplex<complex<SCALAR>, Cpu, FPP2>* algo = nullptr;

	try{
		if (mxIsSparse(matlab_matrix))
		{
			mxArray2FaustspMat(matlab_matrix,sLap);
			Lap = &sLap;
			if(t <= 1)
				algo = new GivensFGFTComplex<complex<SCALAR>,Cpu,FPP2>(sLap, J, verbosity, tol, rel_err, enable_large_Faust);
			else
				algo = new GivensFGFTParallelComplex<complex<SCALAR>,Cpu,FPP2>(sLap, J, t, verbosity, tol, rel_err, enable_large_Faust);

		}else
		{
			mxArray2FaustMat(matlab_matrix,dLap);
			Lap = &dLap;
			if(t <= 1)
				algo = new GivensFGFTComplex<complex<SCALAR>,Cpu,FPP2>(dLap, J, verbosity, tol, rel_err, enable_large_Faust);
			else
				algo = new GivensFGFTParallelComplex<complex<SCALAR>,Cpu,FPP2>(dLap, J, t, verbosity, tol, rel_err, enable_large_Faust);
		}

		algo->compute_facts();

		Faust::Vect<SCALAR,Cpu> D(Lap->getNbRow());
		// true below is for ascendant order of eigenvalues
		algo->get_D(const_cast<SCALAR*>(D.getData()), order); // don't respect constness for optimization (saving a vector copy)

		plhs[1] = FaustVec2mxArray(D);

		Faust::Transform<complex<SCALAR>,Cpu> trans = std::move(algo->get_transform(order));
		TransformHelper<complex<SCALAR>,Cpu> *th = new TransformHelper<complex<SCALAR>,Cpu>(trans, true); // true is for moving and not copying the Transform object into TransformHelper (optimization possible cause we know the original object won't be used later)

		plhs[0] = convertPtr2Mat<Faust::TransformHelper<complex<SCALAR>, Cpu>>(th);

	}
	catch (const std::exception& e)
	{
		mexErrMsgTxt(e.what());

	}

	if(algo != nullptr)
		delete algo;
}


