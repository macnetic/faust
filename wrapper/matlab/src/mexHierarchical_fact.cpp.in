/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */


#include "mex.h"
#include "faust_HierarchicalFact.h"
#include "faust_HierarchicalFactFFT.h"
#include "faust_TransformHelper.h"
#include "class_handle.hpp"
#include <vector>
#include <string>
#include <algorithm>
#include "mx2Faust.h"
#include "faust2Mx.h"
#include <stdexcept>

typedef @FAUST_SCALAR@ SCALAR;
typedef @FACT_FPP@ FPP2;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
#ifdef FAUST_VERBOSE
	if (typeid(SCALAR) == typeid(float))
	{
		std::cout<<"SCALAR == float"<<std::endl;

	}

	if (typeid(SCALAR) == typeid(double))
	{
		std::cout<<"SCALAR == double"<<std::endl;
	}
	system("sleep 7");
#endif

	bool is_fgft = false;
	if(nrhs == 3)
		is_fgft = true;
	else if(nrhs == 2)
		is_fgft = false;
	else
		mexErrMsgTxt("Bad Number of inputs arguments");

	const mxArray* matlab_matrix = prhs[0];
	const mxArray* matlab_params = prhs[1];
	if(!mxIsStruct(matlab_params))
	{
		mexErrMsgTxt("Input must be a structure.");
	}

	// initialization of the matrix that will be factorized
	Faust::MatDense<SCALAR,Cpu> matrix;
	mxArray2FaustMat(matlab_matrix,matrix);

	auto *params = mxArray2FaustParams<SCALAR,FPP2>(matlab_params);

	///////////// HIERARCHICAL LAUNCH ///////////////
	try{
		//		std::cout<<"nb_row : "<<nb_row<<std::endl;
		//		std::cout<<"nb_col : "<<nb_col<<std::endl;
			//		params.Display();

		//DisplayParams(params);
		//creation de hierarchical fact
		Faust::BlasHandle<Cpu> blas_handle;
		Faust::SpBlasHandle<Cpu> spblas_handle;

		Faust::HierarchicalFact<SCALAR,Cpu, FPP2>* hier_fact;


		if(dynamic_cast<const ParamsFFT<SCALAR,Cpu,FPP2>*>(params))
		{
			if(! is_fgft) mexErrMsgTxt("Bad Number of inputs arguments for PALM FGFT.");
			Faust::MatDense<SCALAR,Cpu> laplacian_mat;
			const mxArray* matlab_lap_mat = prhs[2];
			mxArray2FaustMat(matlab_lap_mat,laplacian_mat);
			// params->Display();
			hier_fact = new Faust::HierarchicalFactFFT<SCALAR,Cpu,FPP2>(matrix,laplacian_mat,*dynamic_cast<const ParamsFFT<SCALAR,Cpu,FPP2>*>(params),blas_handle,spblas_handle);
		}
		else
			hier_fact = new Faust::HierarchicalFact<SCALAR,Cpu,FPP2>(matrix,*params,blas_handle,spblas_handle);

		hier_fact->compute_facts();


		//extraction des resultats
		SCALAR lambda = hier_fact->get_lambda();

		//if(typeid(SCALAR) == typeid(complex<FPP2>))
		Faust::MatDense<SCALAR,Cpu> mat1x1Lambda = Faust::MatDense<SCALAR, Cpu>(&lambda, 1, 1);
		plhs[0] = FaustMat2mxArray(mat1x1Lambda);
		//}
		//	 else
		//		 plhs[0] = mxCreateDoubleScalar((FPP2) complex<FPP2>(lambda).real()); //trick to handle compilation with templates


		Faust::Transform<SCALAR, Cpu> t;
		hier_fact->get_facts(t); //it sets sparse factors

		t.scalarMultiply((SCALAR)lambda);

		Faust::TransformHelper<SCALAR,Cpu>* F = new Faust::TransformHelper<SCALAR, Cpu>(t);
		plhs[1] = convertPtr2Mat<Faust::TransformHelper<SCALAR, Cpu>>(F);

		if(is_fgft)
		{
			Faust::Vect<SCALAR,Cpu> D(matrix.getNbRow());
			(dynamic_cast<Faust::HierarchicalFactFFT<SCALAR,Cpu,FPP2>*>(hier_fact))->get_D(const_cast<SCALAR*>(D.getData())); // not respecting constness for optimiation (saving a vector copy)
			plhs[2] = FaustVec2mxArray(D);
		}

		delete hier_fact;
	}
	 catch (const std::exception& e)
	{
		 mexErrMsgTxt(e.what());
	}

	delete params;

}

