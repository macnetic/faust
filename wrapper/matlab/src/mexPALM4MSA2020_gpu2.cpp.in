/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         		*/
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2020): 	Hakim HADJ-DJILANI									*/
/* 						Nicolas Bellot, Adrien Leman, Thomas Gautrais,		*/
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */


#include "mex.h"
//#include "mexutils.h"
#include "faust_gpu_mod_utils.h"
#include "faust_MatDense_gpu.h"
#include "faust_MatDense.h"
#include <vector>
#include <string>
#include <algorithm>
#include "faust_constant.h"
#include "faust_Palm4MSA.h"
#include <stdexcept>
#include "mx2Faust.h"
#include "faust2Mx.h"
#include "mx2Faust.h"
#include "faust_TransformHelper.h"
#include "class_handle.hpp"
#include "faust_palm4msa2020.h"
#include "faust_ConstraintGeneric.h"
#include "faust_ConstraintFPP.h"
using namespace Faust;
using namespace std;

void testCoherencePalm4MSA(const mxArray* params,std::vector<bool> & presentFields);

typedef @FAUST_SCALAR@ SCALAR;
typedef @FACT_FPP@ FPP2;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	//TODO: factorize with mexPALM4MSA2020.cpp.in
	Faust::enable_gpu_mod();
#ifdef FAUST_VERBOSE
	if (typeid(SCALAR) == typeid(float))
	{
		std::cout<<"SCALAR == float"<<std::endl;
	}

	if (typeid(SCALAR) == typeid(double))
	{
		std::cout<<"SCALAR == double"<<std::endl;
	}
	system("sleep 7");
#endif


	if (nrhs < 1)
	{
		mexErrMsgTxt("Bad Number of inputs arguments (must be 1 or 2)");
	}

	if(!mxIsStruct(prhs[0]))
	{
		mexErrMsgTxt("Input must be a structure.");
	}

	std::vector<bool> presentFields;
	testCoherencePALM4MSA(prhs[0],presentFields);
	//     mexPrintf(" NUMBER FIELDS %d\n",presentFields.size());
	//	///////////// PALM4MSA LAUNCH ///////////////
	try
	{
		// creation of parameters
		auto params = mxArray2FaustParamsPALM4MSA<SCALAR,FPP2>(prhs[0], presentFields); //Cpu world
		Faust::MHTPParams<Real<SCALAR>> mhtp_params;
		mxArray2FaustMHTPParams<Real<SCALAR>>(prhs[0], mhtp_params);

		if(params->isVerbose) params->Display();
		FPP2 lambda = params->init_lambda;

		TransformHelper<SCALAR, GPU2>* F = nullptr, *F_lambda = nullptr;

		if(nrhs < 2)
			F = new TransformHelper<SCALAR, GPU2>();
		else
		{
			// init_facts passed as a Faust in 2nd argument
			F = convertMat2Ptr<Faust::TransformHelper<SCALAR,GPU2> >(prhs[1]);
			//TODO: understand why this workaround is necessary
			// when this copy is not made manually palm4msa2 crashes
			std::vector<Faust::MatGeneric<SCALAR,GPU2>*> facts;
			for(int i=0;i<F->size();i++)
			{
				facts.push_back(F->get_gen_fact_nonconst(i));
			}
			F = new TransformHelper<SCALAR, GPU2>(facts, (SCALAR) 1.0, false, true, true);
		}

		//TODO: the constness should be kept
		std::vector<Faust::ConstraintGeneric*> noconst_cons;
		for(auto cons: params->cons)
		{
			if(cons->is_constraint_parameter_int<SCALAR,GPU2>())
			{
				auto c = dynamic_cast<const Faust::ConstraintInt<SCALAR,Cpu>*>(cons);
				//				c->Display();
				noconst_cons.push_back(new Faust::ConstraintInt<SCALAR, GPU2>(c->get_constraint_type(), c->get_parameter(), c->get_rows(), c->get_cols()));
				//				noconst_cons[0]->Display();
			}
			else if(cons->is_constraint_parameter_real<SCALAR,GPU2>())
			{
				auto c = dynamic_cast<const Faust::ConstraintFPP<SCALAR,Cpu, FPP2>*>(cons);
				noconst_cons.push_back(new Faust::ConstraintFPP<SCALAR, GPU2, FPP2>(c->get_constraint_type(), c->get_parameter(), c->get_rows(), c->get_cols()));
				//				noconst_cons[0]->Display();
			}
			else
			{
				auto c = dynamic_cast<const Faust::ConstraintMat<SCALAR,Cpu>*>(cons);
				//				c->Display();
				noconst_cons.push_back(new Faust::ConstraintMat<SCALAR, GPU2>(c->get_constraint_type(), c->get_parameter(), c->get_rows(), c->get_cols()));
				//				noconst_cons[0]->Display();
			}
		}


		auto inMat = Faust::MatDense<SCALAR,GPU2>(params->data);

		Faust::palm4msa2<SCALAR,GPU2>(inMat, noconst_cons, *F, lambda, const_cast<StoppingCriterion<FPP2>&>(params->stop_crit), params->isUpdateWayR2L,
				params->factors_format, params->packing_RL, params->no_normalization, params->no_lambda, mhtp_params, /* compute_2norm_on_array */ false, params->norm2_threshold,
				params->norm2_max_iter, params->isConstantStepSize, params->step_size);

		Faust::MatDense<FPP2,Cpu> mat1x1Lambda = Faust::MatDense<FPP2, Cpu>(1, 1, &lambda);
		plhs[0] = FaustMat2mxArray(mat1x1Lambda);
		SCALAR _lambda = SCALAR(lambda);
		F_lambda = F->multiply(_lambda);
		delete F; // if init_facts is used F is a copy too
		F = F_lambda;
		auto cpuF = F->tocpu();
		plhs[1] = convertPtr2Mat<Faust::TransformHelper<SCALAR, Cpu>>(cpuF);
		delete params;
	}
	catch (const std::exception& e)
	{
		plhs[1] = nullptr;
		mexErrMsgTxt(e.what());
	}

}

