/****************************************************************************/
/*                              Description:                                */
/*    file where the C++ class Faust::TransformHelper is interfaced with Matlab    */
/*   WARNING : this file is configured into two files :                     */
/* - mexFaustReal.cpp interfaces the class Faust::TransformHelper<double>         */
/*     (i.e real scalar Faust)                                              */
/* - mexFaustCplx.cpp interfaces the                                        */
/* class Faust::Transform<std::complex<double<>                             */
/*  (i.e complex scalar Faust)                                              */
/* --> these 2 mexfunctions are directly used                               */
/*                                                                          */
/* by FaustCore class (tools/FaustCore.m) and Faust.m                       */
/*                                                                          */
/*  For more information on the FAuST Project, please visit the website     */
/* Update: it works the same for mexFaustGPUReal and mexFaustGPUCplx */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2021):  	Hakim HADJ-DJILANI                                  */
/*  			Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */

#include "mex.h"
#include "class_handle.hpp"
#include "faust_Transform.h"
#define IGNORE_TRANSFORM_HELPER_VARIADIC_TPL
#include "faust_TransformHelper.h"
#include "mx2Faust.h"
#include "faust2Mx.h"
#include "faust_MatDense.h"
#include "faust_MatSparse.h"
#include <stdexcept>
#include "faust_constant.h"
#include "faust_Timer.h"
#include <complex>
#include <memory>
#ifdef USE_GPU_MOD
#include "faust_gpu_mod_utils.h"
#include "faust_TransformHelper_gpu.h"
#endif
#include "new_faust.h"
#include "faust_disp.h"
#include "faust_delete.h"
#include "faust_size.h"
#include "faust_full.h"
#include "faust_norm.h"
#include "faust_normalize.h"
#include "faust_copy.h"
#include "faust_nbytes.h"
#include "faust_numfactors.h"
#include "faust_factors.h"
#include "faust_rand.h"
#include "faust_save.h"
#include "faust_conj.h"
#include "faust_transpose.h"
#include "faust_ctranspose.h"
#include "faust_nnz.h"
#include "faust_pruneout.h"
#include "faust_optimize_storage.h"
#include "faust_optimize.h"
#include "faust_optimize_time.h"
#include "faust_multiply.h"
#include "faust_mul_faust.h"
#include "faust_mul_scalar.h"
#include "faust_cat.h"
#include "faust_subsref.h"
#include "faust_prox.h"
#include "faust_isreal.h"
#include "faust_fourier.h"
#include "faust_hadamard.h"
#include "faust_eye.h"
#cmakedefine DEV @DEV@
#cmakedefine DEV_IS_CPU
#ifdef DEV_IS_CPU
#include "enable_gpu_mod.h"
#endif

typedef @FAUST_SCALAR@ SCALAR;
typedef @FAUST_FPP@ FPP;

using namespace Faust;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
#ifdef USE_GPU_MOD
	Faust::enable_gpu_mod();
#endif
#ifdef FAUST_VERBOSE
	if (typeid(SCALAR) == typeid(float))
	{
		std::cout<<"SCALAR == float"<<std::endl;
	}

	if (typeid(SCALAR) == typeid(double))
	{
		std::cout<<"SCALAR == double"<<std::endl;
	}
#endif
	try
	{
		// Get the command string
		char cmd[256];
		if (nrhs < 1 || mxGetString(prhs[0], cmd, sizeof(cmd)))
			mexErrMsgTxt("First input should be a command string less than 256 characters long.");
		// Check there is a second input, which should be the class instance handle
		if (nrhs < 2)
			mexErrMsgTxt("Second input should be a class instance handle.");
		if (!strcmp("new", cmd))
			new_faust<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("rand", cmd))
			faust_rand<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if (! strcmp("disp",cmd))
			faust_disp<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("delete", cmd))
			faust_delete<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("size", cmd))
			faust_size<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("isReal",cmd))
			faust_isreal<SCALAR,Cpu>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("nnz", cmd))
			faust_nnz<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("full", cmd))
			faust_full<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("norm", cmd))
			faust_norm<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("normfro", cmd))
			faust_norm_fro<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("normalize", cmd))
			faust_normalize<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("copy", cmd))
			faust_copy<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("nbytes", cmd))
			faust_nbytes<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("numfactors", cmd))
			faust_numfactors<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("factors", cmd))
			faust_factors<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("save", cmd))
			faust_save<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("conj", cmd))
			faust_conj<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("transpose", cmd))
			faust_transpose<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("ctranspose", cmd))
			faust_ctranspose<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(! strcmp("pruneout", cmd))
			faust_pruneout<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("optimize_storage", cmd))
			faust_optimize_storage<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("optimize_time", cmd))
			faust_optimize_time<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("optimize", cmd))
			faust_optimize<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("multiply", cmd))
			faust_multiply<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("mul_faust", cmd))
			faust_mul_faust<SCALAR, DEV>(prhs, nrhs, plhs, nlhs);
		else if (!strcmp("mul_scalar", cmd))
			faust_mul_scalar<SCALAR, DEV, FPP>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("horzcat", cmd))
			faust_horzcat<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("vertcat", cmd))
			faust_vertcat<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("subsref", cmd))
			faust_subsref<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("subsref_byvec", cmd))
			faust_subsref_byvec<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		/********** TODO: should move in a specific mex *****/
		else if(!strcmp("prox", cmd))
			faust_prox<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("prox_blockdiag", cmd))
			faust_prox_blockdiag<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		/*********************************************************/
		else if(!strcmp("set_FM_mul_mode", cmd))
			// def in module faust_optimize
			set_FM_mul_mode<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("set_Fv_mul_mode", cmd))
			// def in module faust_optimize
			set_Fv_mul_mode<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("fourier", cmd))
			faust_fourier<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("hadamard", cmd))
			faust_hadamard<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
		else if(!strcmp("eye", cmd))
			faust_eye<SCALAR,DEV>(prhs, nrhs, plhs, nlhs);
#ifdef DEV_IS_CPU
		else if (!strcmp("enable_gpu_mod", cmd))
			enable_gpu_mod(prhs, nrhs, plhs, nlhs);
#endif
		else
			mexErrMsgTxt("Command not recognized.");
	}
	catch (const std::exception& e)
	{
		mexErrMsgTxt(e.what());
	}
}


