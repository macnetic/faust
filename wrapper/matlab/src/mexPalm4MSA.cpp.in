/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                         */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2016):   Nicolas Bellot, Adrien Leman, Thomas Gautrais,      */
/*                      Luc Le Magoarou, Remi Gribonval                     */
/*                      INRIA Rennes, FRANCE                                */
/*                      http://www.inria.fr/                                */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of the GNU Affero      */
/*  General Public License.                                                 */
/*  This program is free software: you can redistribute it and/or modify    */
/*  it under the terms of the GNU Affero General Public License as          */
/*  published by the Free Software Foundation.                              */
/*                                                                          */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*  See the GNU Affero General Public License for more details.             */
/*                                                                          */
/*  You should have received a copy of the GNU Affero General Public        */
/*  License along with this program.                                        */
/*  If not, see <http://www.gnu.org/licenses/>.                             */
/*                                                                          */
/*                             Contacts:                                    */
/*      Nicolas Bellot  : nicolas.bellot@inria.fr                           */
/*      Adrien Leman    : adrien.leman@inria.fr                             */
/*      Thomas Gautrais : thomas.gautrais@inria.fr                          */
/*      Luc Le Magoarou : luc.le-magoarou@inria.fr                          */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*                                                                          */
/*                              References:                                 */
/*  [1] Le Magoarou L. and Gribonval R., "Flexible multi-layer sparse       */
/*  approximations of matrices and applications", Journal of Selected       */
/*  Topics in Signal Processing, 2016.                                      */
/*  <https://hal.archives-ouvertes.fr/hal-01167948v1>                       */


#include "mex.h"
//#include "mexutils.h"
#include "faust_MatDense.h"
#include <vector>
#include <string>
#include <algorithm>
#include "faust_constant.h"
#include "faust_Palm4MSA.h"
#include <stdexcept>
#include "faust2Mx.h"
#include "mx2Faust.h"
#include "faust_TransformHelper.h"
#include "class_handle.hpp"
using namespace Faust;

void testCoherencePalm4MSA(const mxArray* params,std::vector<bool> & presentFields);

typedef @FAUST_SCALAR@ SCALAR;
typedef @FACT_FPP@ FPP2;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
#ifdef FAUST_VERBOSE
	if (typeid(SCALAR) == typeid(float))
	{
		std::cout<<"SCALAR == float"<<std::endl;
	}

	if (typeid(SCALAR) == typeid(double))
	{
		std::cout<<"SCALAR == double"<<std::endl;
	}
	system("sleep 7");
#endif


	if (nrhs != 1)
	{
		mexErrMsgTxt("Bad Number of inputs arguments");
	}

	if(!mxIsStruct(prhs[0]))
	{
		mexErrMsgTxt("Input must be a structure.");
	}

	std::vector<bool> presentFields;
	testCoherencePALM4MSA(prhs[0],presentFields);
	//     mexPrintf(" NUMBER FIELDS %d\n",presentFields.size());
	//	///////////// PALM4MSA LAUNCH ///////////////
	try
	{

		//	// creation des parametres
		auto params = mxArray2FaustParamsPALM4MSA<SCALAR,FPP2>(prhs[0], presentFields);
		if(params->isVerbose) params->Display();
		Faust::Palm4MSA<SCALAR,Cpu, FPP2> palm(*params,false);
		palm.compute_facts();


		//extraction des resultats
		FPP2 lambda = palm.get_lambda();

		//	 if(typeid(SCALAR) == typeid(complex<FPP2>)) {
		Faust::MatDense<FPP2,Cpu> mat1x1Lambda = Faust::MatDense<FPP2, Cpu>(&lambda, 1, 1);
		plhs[0] = FaustMat2mxArray(mat1x1Lambda);
		//	 }
		//	 else
		//		 plhs[0]=mxCreateDoubleScalar((FPP2) complex<FPP2>(lambda).real()); //trick to handle compilation with templates
		//
		std::vector<Faust::MatDense<SCALAR,Cpu> > facts;
		std::vector<Faust::MatGeneric<SCALAR, Cpu>*> rf_facts;
		facts=palm.get_facts();

		int sparse_weight;
		for(typename std::vector<Faust::MatDense<SCALAR, Cpu>>::iterator it = facts.begin(); it != facts.end(); it++)
		{
			sparse_weight = 2*it->getNonZeros()+it->getNbRow()+1;

			Faust::MatGeneric<SCALAR, Cpu>* M;
			if(sparse_weight < it->getNbRow()*it->getNbCol())
				M = new Faust::MatSparse<SCALAR, Cpu>(*it);
			else
				M = new Faust::MatDense<SCALAR, Cpu>(*it);
			rf_facts.push_back(M);
		}

		TransformHelper<SCALAR, Cpu> *F = new TransformHelper<SCALAR, Cpu>(rf_facts, SCALAR(lambda), false, false, /* internal call */ true);
		plhs[1] = convertPtr2Mat<Faust::TransformHelper<SCALAR, Cpu>>(F);

		delete params;
	}
	catch (const std::exception& e)
	{
		// most likely error: compute_lambda : Xhatt_Xhat_tr is too small or Xt_Xhat.trace is too big so lambda is infinite
		plhs[1] = nullptr;
		mexErrMsgTxt(e.what());
	}

}

