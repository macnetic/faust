/****************************************************************************/
/*                              Description:                                */
/*  For more information on the FAuST Project, please visit the website     */
/*  of the project : <http://faust.inria.fr>                                */
/*                                                                          */
/*                              License:                                    */
/*  Copyright (2021):   Hakim HADJ-DJILANI,				    */
/*                      Remi Gribonval                                      */
/*                      INRIA Rennes, FRANCE                                */
/*                      https://www.inria.fr/                               */
/*                                                                          */
/*  The FAuST Toolbox is distributed under the terms of 3-BSD licence.      */
/*  This program is distributed in the hope that it will be useful, but     */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of              */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    */
/*                                                                          */
/*  More information about license: http://faust.inria.fr                   */
/*                                                                          */
/*                             Contacts:                                    */
/*      Remi Gribonval  : remi.gribonval@inria.fr                           */
/*	Hakim Hadj-Djilani: hakim.hadj-djilani@inria.fr                     */
/*                                                                          */
/*                              References: TODO                            */


#include "mex.h"
#include "faust_TransformHelper.h"
#include "faust_TransformHelperPoly.h"
#include "class_handle.hpp"
#include "mx2Faust.h"
#include "faust2Mx.h"

typedef @FAUST_SCALAR@ FPP;

using namespace Faust;


void get_sp_mat(const mxArray * mxMat, MatSparse<FPP, Cpu>* faustMat)
{
	if (mxIsSparse(mxMat))
	{
		mxArray2FaustspMat(mxMat, *faustMat);
	}
	else
	{
		mexErrMsgTxt("chebyshev mex error: the matrix must be sparse");
	}
}

void chebyshev(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	int K;
	MatSparse<FPP, Cpu> L;
	MatSparse<FPP, Cpu> opt_T0;
	MatSparse<FPP, Cpu> *T0 = nullptr;

	if(nrhs >= 2)
	{
		get_sp_mat(prhs[1], &L);

		if(nrhs >= 3)
			K = (int) mxGetScalar(prhs[2]);
		else
			mexErrMsgTxt("chebyshev mex error: K argument is mandatory");

		// optional T0 matrix
		if(nrhs >= 4)
		{
			get_sp_mat(prhs[3], &opt_T0);
			T0 = &opt_T0;
		}

		auto thp = Faust::basisChebyshev(&L, K, T0);

		if(thp) // not NULL
			plhs[0] = convertPtr2Mat<Faust::TransformHelper<FPP, Cpu> >(thp);
		else {
			plhs[0] = mxCreateDoubleMatrix(1,1,mxREAL);
			double* ptr_out = (double*) mxGetData(plhs[0]);
			ptr_out[0] = (double) 0;
		}
	}
	else
		mexErrMsgTxt("chebyshev mex error: missing matrix argument");
}

void polyMatrix(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if(nrhs < 6)
		mexErrMsgTxt("mex polyMatrix needs 6 arguments");
	else
	{
		int d = (int) mxGetScalar(prhs[1]);
		int K = (int) mxGetScalar(prhs[2]);
		int n = (int) mxGetScalar(prhs[3]);
		Faust::MatDense<FPP, Cpu> out(d, n);
//		Faust::MatDense<FPP, Cpu> coeffs;
//		Faust::MatDense<FPP, Cpu> basisX;
		FPP *coeffs_ptr;
		FPP *basisX_ptr;

//		mxArray2FaustMat(prhs[4], coeffs);
//		mxArray2FaustMat(prhs[5], basisX);

		mxArray2Ptr(prhs[4], coeffs_ptr); // avoid a copy
		mxArray2Ptr(prhs[5], basisX_ptr); // avoid a copy

		Faust::poly(d, K, n, basisX_ptr /*basisX.getData()*/, coeffs_ptr /*coeffs.getData()*/, out.getData());

		plhs[0] = FaustMat2mxArray(out);

		delete [] coeffs_ptr;
		delete [] basisX_ptr;
	}
}

void polyFaust(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	Faust::MatDense<FPP, Cpu> coeffs;
	if(nrhs < 3)
		mexErrMsgTxt("mex polyFaust error: coeffs and/or basis argument are missing");
	auto core_ptr = convertMat2Ptr<TransformHelper<FPP,Cpu>>(prhs[2]);
	auto transform_poly = dynamic_cast<TransformHelperPoly<FPP>*>(core_ptr);
	if(nullptr)
		mexErrMsgTxt("polyFaust can only be used on a poly. specialized Faust.");

	if (mxIsSparse(prhs[1]))
	{
		mexErrMsgTxt("coeffs matrix must be dense not sparse");
	}

	// coeffs is assumed to be in the good size
	mxArray2FaustMat(prhs[1], coeffs);
	auto coeffsFaust = transform_poly->polyFaust(coeffs.getData());

	plhs[0] = convertPtr2Mat<Faust::TransformHelper<FPP, Cpu> >(coeffsFaust);
}

void mulPolyFaust(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	Faust::MatDense<FPP, Cpu> coeffs, X;
	if(nrhs < 4)
		mexErrMsgTxt("mex mulPolyFaust error: basis, coeffs and X arguments must be set.");
	auto core_ptr = convertMat2Ptr<TransformHelper<FPP,Cpu>>(prhs[2]);
	auto transform_poly = dynamic_cast<TransformHelperPoly<FPP>*>(core_ptr);
	if(nullptr)
		mexErrMsgTxt("polyFaust can only be used on a poly. specialized Faust.");

	if (mxIsSparse(prhs[1]))
	{
		mexErrMsgTxt("coeffs matrix must be dense not sparse");
	}

	// coeffs is assumed to be in the good size
	mxArray2FaustMat(prhs[1], coeffs);
	// X is assumed to be in the good size too
	mxArray2FaustMat(prhs[3], X);
	int n = X.getNbCol();
	Faust::MatDense<FPP, Cpu> Y(X.getNbRow(), X.getNbCol());
	transform_poly->multiplyPoly(X.getData(), n, Y.getData(), coeffs.getData());

	plhs[0] = FaustMat2mxArray(Y);
}

void nextPolyFaust(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if(nrhs < 2)
		mexErrMsgTxt("mex nextPolyFaust error: basis argument is missing");
	auto core_ptr = convertMat2Ptr<TransformHelper<FPP,Cpu>>(prhs[1]);
	auto transform_poly = dynamic_cast<TransformHelperPoly<FPP>*>(core_ptr);
	if(nullptr)
		mexErrMsgTxt("nextPolyFaust can only be used on a poly. specialized Faust.");

	auto nextFaust = transform_poly->next();

	plhs[0] = convertPtr2Mat<Faust::TransformHelper<FPP, Cpu> >(nextFaust);
}

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{

	char func[256];
	if (nrhs < 1 || mxGetString(prhs[0], func, sizeof(func)))
		mexErrMsgTxt("First input should be a command string less than 256 characters long.");

	if(!strcmp("polyMatrix", func))
	{
		polyMatrix(nlhs, plhs, nrhs, prhs);
	}
	else if(!strcmp("polyFaust", func))
	{
		polyFaust(nlhs, plhs, nrhs, prhs);
	}
	else if(!strcmp("mulPolyFaust", func))
	{
		mulPolyFaust(nlhs, plhs, nrhs, prhs);
	}
	else if(!strcmp("chebyshev", func))
	{
		chebyshev(nlhs, plhs, nrhs, prhs);
	}
	else if(!strcmp("nextPolyFaust", func))
	{
		nextPolyFaust(nlhs, plhs, nrhs, prhs);
	}
	else
	{
		const char* msg_end = " is an unknown command";
		char *msg = new char[256+strlen(msg_end)];
		strncat(msg, func, strlen(func));
		strncat(msg+strlen(func), msg_end, strlen(msg_end));
		mexErrMsgTxt(msg);
		delete []msg;
	}

}
