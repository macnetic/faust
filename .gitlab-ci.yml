variables:
    # variables DURL and DFILE define where to find the FAÂµST external data
    # used by package build scripts
    # Warning: DURL is the base url without the filename
    # DURL: "https://gitlab.inria.fr/faustgrp/gforge_files/-/raw/master/"
    DURL: "https://faustgrp.gitlabpages.inria.fr/faust/last-doc/html/"
    DFILE: "faust_data.zip"
    JOB_PYTHON: "python3.10" # if set again in job, it hides this one (precedence: https://docs.gitlab.com/13.6/ee/ci/variables/#priority-of-environment-variables)
    WIN_PY_VER: '3.11' # default python version used to build python wrapper on windows (for both whl package and nsis .exe)
    NUX_PY_VER: '3.11' # default python version used for linux system packages (.rpm and .deb)
    MACOS_PY_VER: '3.11' # default python version used for macOS system packages (.pkg)
    GEN_EGG: 'OFF'
    USE_OPENBLASO: 'OFF' # by default any pip whl pkg doesn't use openblas-openmp (eigen blas backend)
    PYFAUST_PKG_NAME: 'pyfaust' # default package name, it can change for openblas-openmp whl package # only used in test_unix_purepy_pkg job
    # linux static library paths:
    LINUX_MATIO_SLIB_PATH: '/opt/local/matio-1.5.23/libmatio.a'
    LINUX_HDF5_SLIB_PATH: '/opt/local/hdf5-1.14.0/libhdf5.a'
    LINUX_ZLIB_SLIB_PATH: '/opt/local/zlib-1.2.13/libz.a'
    # macosx static library paths
    MACOS_HDF5_SLIB_PATH: '/opt/local/lib/libhdf5.a'
    MACOS_ZLIB_SLIB_PATH: '/opt/local/lib/libz.a'
    MACOS_MATIO_SLIB_PATH: '/usr/local/lib/libmatio.a'
    MACOS_SZIP_SLIB_PATH: '/opt/local/lib/libsz.a'
    WHEEL_PY_VERSIONS: '3.10;3.11' # used in setup.py (via cmake) for python language classifiers

.ctest_template: &ctest_script
    script:
        - ctest -O ctest.log -S ./CDashConfScript.cmake -j4 --output-junit junit_output.xml -C Release
          # Release config is set because of Visual Studio cmake generator that wants absolutely one (doesn't change anything for other generators)
          # junit output needs cmake/ctest >= 3.21

stages:
    - test
    - pkg_purepy
    - pkg
    - code_cov
    - pkg_test
    - pkg_pub
    - gitlab_pages
    - conda_pkgs

ctest:
    variables: {SLOW_TESTS: "OFF", BUILD_MULTITHREAD: "ON", GCOV_FLAGS: "ON", GIT_SUBMODULE_STRATEGY: recursive, NJOBS: 2} # the CDashConfScript is able to retrieve OpenMP_gomp_LIBRARY and OpenMP_INC_DIR from environment (it's necessary on macOS, so the runner's env. must be configured)
    # about NJOBS: more than 3 parallel jobs for building tests is too heavy for the linux VMs
    coverage: '/Coverage: \d+\.\d+\%/'
    script:
        - if echo $CI_RUNNER_TAGS | grep -w cuda; then export USE_GPU_MOD=ON; ./misc/continuous_integration/jobs/linux/build_gpu_mod.sh 11.6; export LD_LIBRARY_PATH=$PWD/gpu_mod/build-cu11.6; export CUDA_VERSIONS=cu11.6;fi # enable GPU tests if the runner is capable of
        - ctest -O ctest.log -S ./CDashConfScript.cmake -j4 --output-junit junit_output.xml # || echo "forcing job to continue"
        - if [[ ! -r build_FaustLinux/junit_output.xml ]]; then exit 1; fi
        - misc/continuous_integration/jobs/gcovr_report.sh
        - misc/continuous_integration/jobs/junit_html_report.sh cpp_test_report
        - REPORT_PATH=$(ls build*/cpp_test_report.html | tail -1)
        - if [[ ! -r "$REPORT_PATH" ]]; then exit 1; fi
        - if grep -B 1 'Outcome:.*Failed' "$REPORT_PATH" | sed -ne 's%.*Test case:.*<b>\(.*\)</b>.*%\1%p'; then exit 1; else echo "all tests passed"; exit 0; fi
    except:
        - schedules
        - tags
    stage: test
    tags:
        - linux
          #- cuda # enable this tag to force the execution of GPU test (if an appropriate gitlab-runner is available)
    artifacts:
        paths:
            - build_FaustLinux/cpp_test_report.html
            - ctest_coverage
        when:  always
        expire_in: '6 months'
    #only: # disabled because it lets a coverage badge to "unknown" if not executed in the latest pipeline (it doesn't slow down the pipeline so much because we have multiple VMs)
      #
      # C++ tests are executed only if something was modified in C++ lib or C++ tests
      #changes:
      #  - src/**/*
      #  - misc/test/src/C++/**/*

ctest_python:
    before_script:
      # fix strange libomp deadlock happening on pyfaust.hierarchical unit test (because of an env. config. related error)
      - export LD_PRELOAD=/usr/lib64/libomp.so
    variables: {BUILD_WRAPPER_PYTHON: "ON", SLOW_TESTS: "OFF", DONT_PYPLOT_FAUST_TIME: "ON", NOCPPTESTS: "ON", NOPY2: "ON", BUILD_MULTITHREAD: "ON", BUILD_FLOAT_PYX: "ON", NJOBS: 4} #, GIT_STRATEGY: none}
    script:
      - ctest -O ctest.log -S ./CDashConfScript.cmake -j4 --output-junit junit_output.xml #|| echo "forcing job to continue"
      - if [[ ! -r build_FaustLinuxPython/junit_output.xml ]]; then exit 1;fi
      - misc/continuous_integration/jobs/junit_html_report.sh python_pyfaust_test_output
        # fail the ci job if any ctest test (or unit test) have failed
      - if [[ ! -r build_FaustLinuxPython/python_pyfaust_test_output.html ]]; then exit 1;fi
      - echo "Failed tests:"
      - if grep -B 1 'Outcome:.*Failed' build_FaustLinuxPython/python_pyfaust_test_output.html | sed -ne 's%.*Test case:.*<b>\(.*\)</b>.*%\1%p'; then exit 1; else echo "all tests passed"; exit 0;fi
    except:
        - schedules
        - tags
    stage: test
    allow_failure: false # set to true to continue the pipeline even if a ctest test has failed
    tags:
        - linux
    artifacts:
        paths:
            - build_FaustLinuxPython/python_pyfaust_test_output.html
        when:  always
        expire_in: '6 months'

ctest_matlab:
    variables: {BUILD_WRAPPER_MATLAB: "ON", SLOW_TESTS: "OFF", NOCPPTESTS: "ON", BUILD_MULTITHREAD: "OFF", BUILD_FLOAT_MEX: "ON", NJOBS: 1} # MT OFF because of macOS complicated way to enable OpenMP (but packages are OMP enabled)
    # about NJOBS: more than 1 parallel job for building mex is too heavy for the linux VMs
    script:
      # TODO: refactor with ctest_python script
      - ctest -O ctest.log -S ./CDashConfScript.cmake -j4 --output-junit junit_output.xml #|| echo "forcing job to continue"
      - export BUILD_DIR=$(ls -d build_* | tail -1)
      - if [[ ! -r ${BUILD_DIR}/junit_output.xml ]]; then exit 1;fi
      - misc/continuous_integration/jobs/junit_html_report.sh matlab_matfaust_test_output
        # fail the ci job if any ctest test (or unit test) have failed
      - if [[ ! -r ${BUILD_DIR}/matlab_matfaust_test_output.html ]]; then exit 1;fi
      - echo "Failed tests:"
      - if grep -B 1 'Outcome:.*Failed' ${BUILD_DIR}/matlab_matfaust_test_output.html | sed -ne 's%.*Test case:.*<b>\(.*\)</b>.*%\1%p'; then exit 1; else if grep "Failure Summary:" ${BUILD_DIR}/matlab_matfaust_test_output.html; then echo "all ctest passed but some unit tests failed (look the junit report!)"; exit 2; else echo "(None) all tests passed"; exit 0;fi;fi
    except:
        - schedules
        - tags
    stage: test
    allow_failure: false # set to true to continue the pipeline even if a ctest test has failed
      #- exit_codes: 2 # to tolerate unit test failure (and not ctest failure) -- false value must be removed too
      # https://docs.gitlab.com/ee/ci/yaml/README.html#allow_failureexit_codes
    tags:
    tags:
        - matlab
    artifacts:
        paths:
          #- ${BUILD_DIR}/matlab_matfaust_test_output.html # won't work
          - $(ls -d build_*  | tail -1)/matlab_matfaust_test_output.html
        when:  always
        expire_in: '6 months'

.ctest_nightly: &ctest_nightly_script
    <<: *ctest_script
    variables: {BUILD_WRAPPER_MATLAB: "ON", BUILD_WRAPPER_PYTHON: "ON", SLOW_TESTS: "ON", DONT_PYPLOT_FAUST_TIME: "ON", NOPY2: "ON", BUILD_MULTITHREAD: "ON"}
    only:
        - schedules

ctest_nightly_linux:
    <<: *ctest_nightly_script
    tags:
        - linux
        - matlab

ctest_nightly_macos:
    <<: *ctest_nightly_script
    variables: {BUILD_WRAPPER_MATLAB: "ON", BUILD_WRAPPER_PYTHON: "ON", SLOW_TESTS: "ON", DONT_PYPLOT_FAUST_TIME: "ON", NOPY2: "ON", BUILD_MULTITHREAD: "ON", OpenMP_gomp_LIBRARY: "/opt/local/lib/libomp/libgomp.dylib", CMAKE_CXX_COMPILER: "/opt/local/bin/clang++-mp-9.0"}
    tags:
        - macos

ctest_nightly_win10:
    <<: *ctest_nightly_script
    variables: {BUILD_MULTITHREAD: "ON"} # only cpp tests
    only:
        - schedules
    tags:
        - win10

doctest_nightly_pyfaust:
  stage: test
  script:
    - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
    - cmake -DBUILD_WRAPPER_PYTHON=ON -DREMOTE_DATA_URL="$DURL" -DREMOTE_DATA_FILE="$DFILE" ..
    - if [[ ! -d "doctest_pyfaust_latest" ]]; then $JOB_PYTHON -m venv doctest_pyfaust-latest;fi
    - source doctest_pyfaust-latest/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install pyfaust
    - if [ -r "/tmp/faust_data.zip" ]; then sudo rm /tmp/faust_data.zip; fi # avoid permission error if pre-exists
    - PF_DIR=`dirname $(python -c "import pyfaust as pf; print(pf.__file__)")`
    - ls wrapper/python/pyfaust/*py
    - md5sum wrapper/python/pyfaust/*py
    - echo $PF_DIR
    - md5sum $PF_DIR/*py
    - cp -f wrapper/python/pyfaust/*py $PF_DIR/
    - md5sum $PF_DIR/*py
      #- python -m doctest -v $PF_DIR/__init__.py # already tested before pkg release
    - python -m doctest -v $PF_DIR/factparams.py
    - python -m doctest -v $PF_DIR/proj.py
    - python -m doctest -v $PF_DIR/poly.py
    - python -m doctest -v $PF_DIR/tools.py
    - python -m doctest -v $PF_DIR/fact.py
    - python -m doctest -v $PF_DIR/demo.py
    - deactivate
    - rm -Rf doctest_pyfaust-latest
  only:
    - schedules
  tags:
    - linux
  except:
    - tags

doctest_nightly_matfaust:
  stage: test
  script:
    # get latest successful ci job pkg_linux
    - 'JOB_ID=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_API_READ_TOKEN" "https://gitlab.inria.fr/api/v4/projects/6960/jobs?scope=success&per_page=10000" 2>&1 | tee -a /tmp/log_curl_doctest_matfaust | sed -e "s/}/}\n/g" | grep "\"pkg_linux\"" | head -1 | sed -ne "s/.*{\"id\":\([[:digit:]]\+\).*pkg_linux.*/\1/p") || echo JOB_ID=$JOB_ID'
     # download artifact archive
    - 'curl --header "PRIVATE-TOKEN: $GITLAB_API_READ_TOKEN" https://gitlab.inria.fr/api/v4/projects/6960/jobs/$JOB_ID/artifacts > artifacts.zip'
    # what's in this?
    - zip -Tv artifacts.zip
    - unzip artifacts.zip
    - rm artifacts.zip
    # what's in this pkg?
    - rpm -ql -p build/faust*rpm
    # install the pkg but first remove poential older one
    - if [ $(rpm -qa faust | wc -l) -gt 0 ]; then sudo rpm -e faust;fi
    - sudo rpm -i --nodeps build/faust*rpm
    - rm -Rf build
    # all is set to doctest matfaust
    # no -nojvm because it's needed for Faust.imagesc doctest
    - 'for S in Faust proj.sp proj.splin proj.spcol proj.splincol proj.const proj.supp proj.normlin proj.normcol proj.blockdiag proj.anticirc proj.circ proj.hankel proj.skperm proj.sptriu proj.sptril proj.spsymm proj.toeplitz proj.proj_id poly.poly poly.expm_multiply poly.next poly.basis poly.expm_inv_multiply factparams.ParamsHierarchicalWHTNoResCons factparams.ParamsHierarchicalRectMatNoResCons factparams.ParamsHierarchicalNoResCons factparams.ParamsHierarchicalRectMat fact.butterfly fact.check_fact_mat fact.eigtj fact.fact fact.fgft_palm fact.hierarchical_constends fact.hierarchical fact.hierarchical_mhtp fact.palm4msa_constends fact.palm4msa fact.palm4msa_mhtp fact.pinvtj fact.svdtj tools.omp demo.runall; do if matlab -nodisplay -r "addpath /usr/share/octave/packages/doctest-0.7.0/; setup_FAUST; doctest matfaust.$S; exit;" | tee /tmp/matlab_doctest_$S | grep FAIL; then exit 1; fi; done'
  after_script:
    - if [ $(rpm -qa faust | wc -l) -gt 0 ]; then sudo rpm -e faust;fi
  only:
    - schedules
  tags:
    - linux
    - matlab
  except:
    - tags

matfaust_test_code_coverage:
  stage: code_cov
  coverage: '/Coverage: \d+\.\d+\%/'
  script:
    - rm -Rf ~gitlab-runner/matlab # avoid interference with rpm installed faust
    - if [ $(rpm -qa faust | wc -l) -gt 0 ]; then sudo rpm -e faust;fi
    - sudo rpm -i --nodeps build/faust*rpm
      # install mocov
    - git clone https://github.com/MOcov/MOcov.git
    - cd MOcov
    - make install
    - cd ..
    - cmake -P misc/download_unzip_faust_misc_data.cmake # tests need data
    - matlab -nojvm -nodisplay -r "addpath misc/test/src/Matlab;matfaust_test_coverage; exit" | tee /tmp/matfaust_test_cov_output
    # echo total coverage for gitlab
    - 'echo Coverage: $(head -5 coverage_html/index.html | grep -E -o "[[:digit:]]+(\.[[:digit:]]+)?%")'
  after_script:
    - if [ $(rpm -qa faust | wc -l) -gt 0 ]; then sudo rpm -e faust;fi
  artifacts:
    paths:
      - coverage_html
  tags:
    - linux
    - matlab
  except:
    - tags
    - schedules

pyfaust_test_code_coverage:
  stage: code_cov
  coverage: '/Coverage:.*\%/'
  script:
    - misc/continuous_integration/jobs/linux/pyfaust_coverage.sh
  after_script:
    - conda-env remove -n test_coverage_pyfaust
  except:
      - schedules
      - tags
  tags:
    - conda_linux
  artifacts:
    paths:
      - htmlcov
    when:  always
    expire_in: '6 months'
  needs:
    - job: pkg_linux_purepy_rev
      artifacts: true

pkg_macos:
    stage: pkg
    script:
        - SHA_START=$(echo $CI_COMMIT_SHA | sed -e 's/^\(.\{8\}\).*/\1/')
        - export FAUST_VERSION=$SHA_START
        - export EXPERIMENTAL_PKG=ON
        - ./misc/continuous_integration/jobs/macosx/pkg_macos.sh
    artifacts:
        paths:
            - build/faust-${CI_COMMIT_SHA:0:8}.pkg
              #- build/faust-${CI_COMMIT_SHA:0:8}.dmg
        expire_in: '1 week'
    tags:
        - macos
    except:
        - schedules
        - tags
    needs:
      - job: ctest_python
      - job: ctest_matlab
      - job: pkg_macos_purepy_rev # avoid to build again the python wrapper
        artifacts: true

.win_build_gpu_mod: &win_build_gpu_mod
    before_script:
         - call misc\continuous_integration\jobs\win\build_gpu_mod.bat

pkg_win:
    stage: pkg
    variables: {BUILD_CONFIG: "Release", GIT_SUBMODULE_STRATEGY: recursive, EXPERIMENTAL_PKG: 'ON'} # Not using Debug config to handle a compiliation issue (#279)
    <<: *win_build_gpu_mod
    script:
        - 'set FAUST_VERSION=%CI_COMMIT_SHA:~0,8%'
        - call misc/continuous_integration/jobs/win/build_nsis_pkg.bat
    artifacts:
        paths:
            - build/faust-%CI_COMMIT_SHA:~0,8%-amd64.exe
        expire_in: '1 week'
    tags:
        - win10
    except:
        - schedules
        - tags
    needs:
        - job: ctest_python
        - job: ctest_matlab
        - job: pkg_win_purepy_rev # avoid to build again the python wrapper
          artifacts: true


.build_gpu_mod: &build_gpu_mod
      before_script:
        - ./misc/continuous_integration/jobs/linux/build_gpu_mod.sh

pkg_linux:
    <<: *build_gpu_mod
    stage: pkg
    variables: {EXPERIMENTAL_PKG: 'ON', GIT_SUBMODULE_STRATEGY: recursive} # git strategy for checking out gpu_mod
    script:
        - SHA_START=$(echo $CI_COMMIT_SHA | sed -e 's/^\(.\{8\}\).*/\1/')
        - export FAUST_VERSION=$SHA_START
        - ./misc/continuous_integration/jobs/linux/build_rpm_deb_pkgs.sh
    artifacts:
        paths:
            - build/faust-${CI_COMMIT_SHA:0:8}-x86_64.deb
            - build/faust-${CI_COMMIT_SHA:0:8}-x86_64.rpm
        expire_in: '1 week'
    tags:
        - linux
        - matlab
        - tux_packager
    except:
        - schedules
        - tags
    needs:
        - job: ctest_python
        - job: ctest_matlab
        - job: pkg_linux_purepy_rev # avoid to build again the python wrapper
          artifacts: true


          # jobs triggered by git tag can force cpack to use the tag name as version but it's not necessary for MacOSX (not using cpack for that sys.)
          #it's done for linux packages

pkg_macos_release:
    stage: pkg
    script:
        - export FAUST_VERSION=$CI_COMMIT_TAG
        - export EXPERIMENTAL_PKG=OFF
        - ./misc/continuous_integration/jobs/macosx/pkg_macos.sh
    artifacts:
        paths:
            - build/faust-${CI_COMMIT_TAG}.pkg
              #- build/faust-${CI_COMMIT_TAG}.dmg
        expire_in: '1 yrs'
    tags:
        - macos
    only:
        - tags
    needs:
      - job: pkg_macos_purepy_release
        artifacts: true

pkg_win_release:
    variables: {BUILD_CONFIG: "Release", GIT_SUBMODULE_STRATEGY: recursive, EXPERIMENTAL_PKG: 'OFF'}
    stage: pkg
    <<: *win_build_gpu_mod
    script:
        - set FAUST_VERSION=%CI_COMMIT_TAG%
        - call misc/continuous_integration/jobs/win/build_nsis_pkg.bat
    artifacts:
        paths:
            - build/faust-%CI_COMMIT_TAG%-amd64.exe
        expire_in: '1 yrs'
    tags:
        - win10
    only:
        - tags
    needs:
      - job: pkg_win_purepy_release
        artifacts: true

pkg_linux_release:
    <<: *build_gpu_mod
    stage: pkg
    variables: {EXPERIMENTAL_PKG: 'OFF', GIT_SUBMODULE_STRATEGY: recursive} # git strategy for checking out gpu_mod
    script:
        - export FAUST_VERSION=$CI_COMMIT_TAG
        - ./misc/continuous_integration/jobs/linux/build_rpm_deb_pkgs.sh
    artifacts:
        paths:
            - build/faust-$CI_COMMIT_TAG-x86_64.deb
            - build/faust-$CI_COMMIT_TAG-x86_64.rpm
        expire_in: '1 yrs'
    tags:
        - linux
        - matlab
        - rpm_deb_release
    only:
        - tags
    needs:
      - job: pkg_linux_purepy_release
        artifacts: true

pkg_linux_release_static:
    <<: *build_gpu_mod
    stage: pkg
    variables: {EXPERIMENTAL_PKG: 'OFF', GIT_SUBMODULE_STRATEGY: recursive} # git strategy for checking out gpu_mod
    script:
        - export FAUST_VERSION=$CI_COMMIT_TAG
        - ./misc/continuous_integration/jobs/linux/build_rpm_deb_pkgs-static_matio.sh
    artifacts:
        paths:
            - build/faust-$CI_COMMIT_TAG-static-x86_64.deb
            - build/faust-$CI_COMMIT_TAG-static-x86_64.rpm
        expire_in: '1 yrs'
    tags:
        - linux
        - matlab
        - rpm_deb_release
    only:
        - tags
    needs:
      - job: pkg_linux_purepy_release
        artifacts: true

upload_pkgs_to_registry:
  stage: pkg_pub
  script:
    - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
    - for PKG in *.pkg *.rpm *.deb *.exe; do curl --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file $PKG "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/faust/$CI_COMMIT_TAG/$PKG"; done
  needs:
    - job: pkg_macos_release
      artifacts: true
    - job: pkg_win_release
      artifacts: true
    - job: pkg_linux_release
      artifacts: true
    - job: pkg_linux_release_static
      artifacts: true
    - job: test_linux_pkg_release
    - job: test_macos_pkg_release
  tags:
    - linux
  only:
    - tags

pages:
    stage: gitlab_pages
    script:
        - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
        - 'cmake -DBUILD_WRAPPER_PYTHON=ON -DBUILD_WRAPPER_MATLAB=ON -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=/opt/local/faust -DCPACK_PACKAGE_FILE_NAME=faust-$CI_COMMIT_TAG -DCPACK_PACKAGE_VERSION=$CI_COMMIT_TAG -DEXCLUDE_FAUST_LIB_INSTALL=ON  -DINCLUDE_ALL_SYS_INSTALL_INSTRUCS=ON -DGEN_SPHINX_DOC=ON ..'
        - sed -i "s/project = '\(.*\)'/project = '\1 "${CI_COMMIT_TAG}"'/" ../sphinx/conf.py # put version of FAÂµST in sphinx doc
        - export PYTHONPATH=$PWD/wrapper/python # sphinx need to import pyfaust to generate its doc
        - make doc
        - make doc_exclu_class_filtering
        - make zip_data_archive # generate the FAÂµST data archive
          # test that the doc generation works well (at least that html files for the pyfaust and matfaust namespaces exist)
          # in order to avoid publishing an empty API doc
        - if [ ! -r doc/html/namespacepyfaust.html -o ! -r doc/html/namespacematfaust.html ]; then echo "error with doxygen doc generation" 2>&1 && exit 1; fi
        - mkdir -p ../public/last-doc
        - ../gen_doc/prevent_chevron_selection.sh ./doc/html
        - cp -Rf doc/html ../public/last-doc/
        - mkdir -p ../public/packages
        - ../gen_doc/gen_pkg_dl_page.sh $CI_COMMIT_TAG # download.html generated
        - mv download.html ../public/packages/
        - ../misc/changelog.sh && mv CHANGELOG.html ../public/
          #- mv *.pkg *.rpm *.deb *.exe ../public/packages/
          #- mv *.pkg *.rpm *.deb  ../public/packages/
    needs:
      - job: upload_pkgs_to_registry
      - job: pkg_macos_release
        artifacts: true
      - job: pkg_win_release
        artifacts: true
      - job: pkg_linux_release
        artifacts: true
      - job: pkg_linux_release_static
        artifacts: true
      - job: test_linux_pkg_release
      - job: test_macos_pkg_release
      - job: pkg_linux_purepy_release_extra_pyver
        artifacts: true
    artifacts:
        paths:
            - public/
    tags:
      #- linux
      # - matlab
        - pages
    only:
        - tags


.pkg_purepy: &pkg_purepy
    script:
        - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
        - cmake -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER ..
        - 'cmake -DBUILD_WRAPPER_PYTHON=ON -DBUILD_WRAPPER_MATLAB=OFF -DBUILD_DOCUMENTATION=OFF -DCPACK_PACKAGE_VERSION=$VERSION -DCMAKE_INSTALL_PREFIX=/opt/local/faust-$SHA_START -DBUILD_TESTING=OFF -DEXCLUDE_FAUST_LIB_INSTALL=ON -DUSE_MATIO_STATIC_LIBS=ON -DMATIO_STATIC_LIB_PATH=$MATIO_STATIC_LIB_PATH -DZ_STATIC_LIB_PATH=$Z_STATIC_LIB_PATH -DHDF5_STATIC_LIB_PATH=$HDF5_STATIC_LIB_PATH -DSZIP_STATIC_LIB_PATH=$SZIP_STATIC_LIB_PATH -DREMOTE_DATA_URL="$DURL" -DREMOTE_DATA_FILE="$DFILE" -DEXPERIMENTAL_PKG=$EXPERIMENTAL_PKG -DFAUST_TORCH=$FAUST_TORCH -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH" -DNOPY2=$NOPY2 -DBUILD_MULTITHREAD=$BUILD_MULTITHREAD -DUSE_GPU_MOD=$USE_GPU_MOD -DEXPERIMENTAL_PKG=$EXPERIMENTAL_PKG -DFAUST_TORCH=$FAUST_TORCH -DBUILD_FLOAT_PYX=ON -DUSE_OPENBLASO="$USE_OPENBLASO" ..'
        - make -j4 2>&1 | grep -i 'error:\|Building\|Link'
        - find ./ -name "*.o" -delete
        - cd wrapper/python
        - $JOB_PYTHON setup.py bdist_wheel 2>&1 | grep -i 'error:\|Building\|Link\|creating'
        - if [[ "$GEN_EGG" != "OFF" ]]; then $JOB_PYTHON setup.py bdist_egg;fi
        - if [[ "$NOPY2" != "ON" ]]; then python2 setup.py bdist_wheel; fi
        - if [[ "$NOPY2" != "ON" && "$GEN_EGG" != "OFF" ]]; then python2 setup.py bdist_egg; fi
    artifacts:
        paths:
          #- build/wrapper/python/dist
            - build/wrapper # not only the package but also the python wrapper shared lib
    except:
        - schedules

.pkg_purepy_rev:
    extends: .pkg_purepy
    stage: pkg_purepy
    before_script:
        - VERSION=$(echo $CI_COMMIT_SHA | sed -e 's/^\(.\{8\}\).*/\1/')
        - if [[ -n "$USE_GPU_MOD" ]]; then GPU_MOD_SHA=$(git submodule foreach git log --oneline -n1 | sed -e 's/ .*//' | tail -1); fi
        - echo GPU_MOD_SHA=$GPU_MOD_SHA
          # TODO: loop on CUDA VERSIONS instead of duplicating the commands
        - if [[ -n "$USE_GPU_MOD" ]]; then cd gpu_mod; if [[ ! -d build-cu12.1 ]]; then mkdir build-cu12.1; fi; cd build-cu12.1; fi
          # don't build the lib if already installed
        - if [[ -n "$USE_GPU_MOD" ]]; then cmake -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.1/bin/nvcc ..;L=$HOME"/libgm-$GPU_MOD_SHA-cu12.1.so"; echo LIB=$L; if [[ -r "$L" ]]; then cp "$L" ./libgm.so; else make -j8; cp ./libgm.so "$L";fi;fi
        - if [[ -n "$USE_GPU_MOD" ]]; then cd ../..; fi
        - if [[ -n "$USE_GPU_MOD" ]]; then cd gpu_mod; if [[ ! -d build-cu11.4 ]]; then mkdir build-cu11.4; fi; cd build-cu11.4; fi
          # don't build the lib if already installed
        - if [[ -n "$USE_GPU_MOD" ]]; then cmake -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.4 -DCMAKE_CUDA_COMPILER=/usr/local/cuda-11.4/bin/nvcc ..;L=$HOME"/libgm-$GPU_MOD_SHA-cu11.4.so"; echo LIB=$L; if [[ -r "$L" ]]; then cp "$L" ./libgm.so; else make -j8; cp ./libgm.so "$L";fi;fi
        - if [[ -n "$USE_GPU_MOD" ]]; then cd ../..; fi
    artifacts:
        expire_in: '1 week'
    except:
        - schedules
        - tags

pkg_macos_purepy_rev:
    extends: .pkg_purepy_rev
    variables: {MATIO_STATIC_LIB_PATH: $MACOS_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $MACOS_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $MACOS_HDF5_SLIB_PATH, SZIP_STATIC_LIB_PATH: $MACOS_SZIP_SLIB_PATH, EXPERIMENTAL_PKG: "ON", BUILD_MULTITHREAD: "ON", NOPY2: "ON", CMAKE_CXX_COMPILER: "/opt/local/bin/clang++-mp-9.0"}
    before_script:
      - VERSION=$(echo $CI_COMMIT_SHA | sed -e 's/^\(.\{8\}\).*/\1/')
      - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
      - cmake -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER ..
      - cd ..
    tags:
        - macos
    needs:
        - job: ctest_python


pkg_linux_purepy_rev:
    extends: .pkg_purepy_rev
    variables: {GIT_SUBMODULE_STRATEGY: recursive, MATIO_STATIC_LIB_PATH: $LINUX_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $LINUX_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $LINUX_HDF5_SLIB_PATH, BUILD_MULTITHREAD: "ON", NOPY2: "ON", USE_GPU_MOD: "ON", CMAKE_PREFIX_PATH: "../gpu_mod", EXPERIMENTAL_PKG: "ON", CMAKE_CXX_COMPILER: "clang++", PYTHON_PATH: '/usr/local/bin/python3.11', JOB_PYTHON: 'python3.11'} # py version should be the same as NUX_PY_VER (unfortunately can't concat as 'python'$NUX_PY_VER with var expansion)
    tags:
        - linux
        - tux_packager
    needs:
        - job: ctest_python

.pkg_purepy_release:
    stage: pkg_purepy
    extends: .pkg_purepy
    before_script:
        - VERSION=$CI_COMMIT_TAG
        - if [[ -n "$USE_GPU_MOD" ]]; then GPU_MOD_SHA=$(git submodule foreach git log --oneline -n1 | sed -e 's/ .*//' | tail -1); fi
        - echo GPU_MOD_SHA=$GPU_MOD_SHA
          # TODO: loop on CUDA VERSIONS instead of duplicating the commands
        - if [[ -n "$USE_GPU_MOD" ]]; then cd gpu_mod; if [[ ! -d build-cu12.1 ]]; then mkdir build-cu12.1; fi; cd build-cu12.1; fi
          # don't build the lib if already installed
        - if [[ -n "$USE_GPU_MOD" ]]; then cmake -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.1/bin/nvcc ..;L=$HOME"/libgm-$GPU_MOD_SHA-cu12.1.so"; echo LIB=$L; if [[ -r "$L" ]]; then cp "$L" ./libgm.so; else make; cp ./libgm.so "$L";fi;fi
        - if [[ -n "$USE_GPU_MOD" ]]; then cd ../..; fi
        - if [[ -n "$USE_GPU_MOD" ]]; then cd gpu_mod; if [[ ! -d build-cu11.4 ]]; then mkdir build-cu11.4; fi; cd build-cu11.4; fi
          # don't build the lib if already installed
        - if [[ -n "$USE_GPU_MOD" ]]; then cmake -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.4 -DCMAKE_CUDA_COMPILER=/usr/local/cuda-11.4/bin/nvcc ..;L=$HOME"/libgm-$GPU_MOD_SHA-cu11.4.so"; echo LIB=$L; if [[ -r "$L" ]]; then cp "$L" ./libgm.so; else make; cp ./libgm.so "$L";fi;fi
        - if [[ -n "$USE_GPU_MOD" ]]; then cd ../..; fi
    artifacts:
        expire_in: '1 week'
    except:
        - schedules
    only:
        - tags

pkg_macos_purepy_release:
    extends: .pkg_purepy_release
    variables: {MATIO_STATIC_LIB_PATH: $MACOS_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $MACOS_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $MACOS_HDF5_SLIB_PATH, SZIP_STATIC_LIB_PATH: $MACOS_SZIP_SLIB_PATH, BUILD_MULTITHREAD: "ON", FAUST_TORCH: "OFF", EXPERIMENTAL_PKG: "OFF", NOPY2: "ON", CMAKE_CXX_COMPILER: "/opt/local/bin/clang++-mp-9.0", PYTHON_PATH: '/opt/local/bin/python3.10', JOB_PYTHON: 'python3.10'}
    before_script:
      - VERSION=$CI_COMMIT_TAG
      - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
      - cmake -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER ..
      - cd ..
    tags:
        - macos

pkg_macos_purepy_release_extra_pyver:
    extends: pkg_macos_purepy_release
    variables: {MATIO_STATIC_LIB_PATH: $MACOS_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $MACOS_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $MACOS_HDF5_SLIB_PATH, SZIP_STATIC_LIB_PATH: $MACOS_SZIP_SLIB_PATH, BUILD_MULTITHREAD: "ON", FAUST_TORCH: "OFF", EXPERIMENTAL_PKG: "OFF", NOPY2: "ON", PYTHON_PATH: '/opt/local/bin/python3.11', JOB_PYTHON: 'python3.11', CMAKE_CXX_COMPILER: "/opt/local/bin/clang++-mp-9.0"}
    tags:
        - macos

pkg_macos_purepy_release_torch_linked:
    extends: pkg_macos_purepy_release
    variables: {GIT_SUBMODULE_STRATEGY: none, MATIO_STATIC_LIB_PATH: $MACOS_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $MACOS_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $MACOS_HDF5_SLIB_PATH, SZIP_STATIC_LIB_PATH: $MACOS_SZIP_SLIB_PATH, FAUST_TORCH: "ON", CMAKE_PREFIX_PATH: "/opt/local/libtorch/share/cmake/Torch", BUILD_MULTITHREAD: "ON", EXPERIMENTAL_PKG: "OFF", NOPY2: "ON", CMAKE_CXX_COMPILER: "/opt/local/bin/clang++-mp-9.0"}
    before_script:
      - VERSION=$CI_COMMIT_TAG
      - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
      - cmake -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER ..
      - cd ..

pkg_linux_purepy_release:
    extends: .pkg_purepy_release
    variables: {GIT_SUBMODULE_STRATEGY: recursive, MATIO_STATIC_LIB_PATH: $LINUX_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $LINUX_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $LINUX_HDF5_SLIB_PATH, BUILD_MULTITHREAD: "ON", NOPY2: "ON", USE_GPU_MOD: "ON", CMAKE_PREFIX_PATH: "../gpu_mod", FAUST_TORCH: "OFF", EXPERIMENTAL_PKG: "OFF", CMAKE_CXX_COMPILER: "clang++", PYTHON_PATH: '/usr/local/bin/python3.10', JOB_PYTHON: 'python3.10'}
    after_script:
        # verify the pyfaust root with doctest (no go on failure)
        - if [[ ! $(basename $PWD) = 'build' ]]; then  cd build;fi
        - cd wrapper/python
        - if ! python3 -m doctest -v pyfaust/__init__.py; then echo "error with doctest verification of pyfaust doc" 2>&1 && exit 1;fi # TODO: remove manual exit/code + msg (useless)
        - cd ../..
    tags:
        - linux
        - tux_packager

pkg_linux_purepy_release_extra_pyver:
    extends: .pkg_purepy_release
    variables: {GIT_SUBMODULE_STRATEGY: recursive, MATIO_STATIC_LIB_PATH: $LINUX_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $LINUX_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $LINUX_HDF5_SLIB_PATH, BUILD_MULTITHREAD: "ON", NOPY2: "ON", USE_GPU_MOD: "ON", CMAKE_PREFIX_PATH: "../gpu_mod", FAUST_TORCH: "OFF", EXPERIMENTAL_PKG: "OFF", PYTHON_PATH: '/usr/local/bin/python3.11', JOB_PYTHON: 'python3.11', CMAKE_CXX_COMPILER: "clang++"}
    tags:
        - linux
        - tux_packager


.pkg_linux_purepy_release_torch_linked:
    extends: pkg_linux_purepy_release
    variables: {GIT_SUBMODULE_STRATEGY: recursive, MATIO_STATIC_LIB_PATH: $LINUX_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $LINUX_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $LINUX_HDF5_SLIB_PATH, BUILD_MULTITHREAD: "ON", NOPY2: "ON", FAUST_TORCH: "ON", USE_GPU_MOD: "ON", CMAKE_PREFIX_PATH: "/opt/local/libtorch/share/cmake/Torch;../gpu_mod", EXPERIMENTAL_PKG: "OFF", CMAKE_CXX_COMPILER: "clang++"}
    tags:
      - torch

pkg_linux_purepy_release_openblaso:
    extends: .pkg_purepy_release
    variables: {GIT_SUBMODULE_STRATEGY: recursive, MATIO_STATIC_LIB_PATH: $LINUX_MATIO_SLIB_PATH, Z_STATIC_LIB_PATH: $LINUX_ZLIB_SLIB_PATH, HDF5_STATIC_LIB_PATH: $LINUX_HDF5_SLIB_PATH, BUILD_MULTITHREAD: "ON", NOPY2: "ON", USE_GPU_MOD: "ON", CMAKE_PREFIX_PATH: "../gpu_mod", FAUST_TORCH: "OFF", EXPERIMENTAL_PKG: "OFF", CMAKE_CXX_COMPILER: "clang++", USE_OPENBLASO: "ON", PYTHON_PATH: '/usr/local/bin/python3.10', JOB_PYTHON: 'python3.10'}
    tags:
        - linux
        - tux_packager

.pkg_purepy_release_rasp:
    stage: pkg
    variables: {MATIO_STATIC_LIB_PATH: "/opt/local/libmatio.a", Z_STATIC_LIB_PATH: "/opt/local/libz.a", HDF5_STATIC_LIB_PATH: "/opt/local/libhdf5.a"}
    script:
        - if [[ ! -d 'build' ]]; then  mkdir build;fi; cd build
        - 'cmake -DBUILD_WRAPPER_PYTHON=ON -DBUILD_WRAPPER_MATLAB=OFF -DBUILD_DOCUMENTATION=ON -DCPACK_PACKAGE_VERSION=$CI_COMMIT_TAG -DCMAKE_INSTALL_PREFIX=/opt/local/faust-$SHA_START -DBUILD_TESTING=OFF -DEXCLUDE_FAUST_LIB_INSTALL=ON -DUSE_MATIO_STATIC_LIBS=ON -DMATIO_STATIC_LIB_PATH=$MATIO_STATIC_LIB_PATH -DZ_STATIC_LIB_PATH=$Z_STATIC_LIB_PATH -DHDF5_STATIC_LIB_PATH=$HDF5_STATIC_LIB_PATH -DREMOTE_DATA_URL="$DURL" -DREMOTE_DATA_FILE="$DFILE" -DEXPERIMENTAL_PKG=OFF -DNOPY2=ON -DBUILD_MULTITHREAD=ON ..'
        - ln -s /usr/bin/clang gcc
        - export PATH=$PWD:$PATH
        - make -j4
        - cd wrapper/python
        - python3 setup.py bdist_wheel
    artifacts:
        paths:
            - build/wrapper/python/dist
    except:
        - schedules
    only:
        - tags
    tags:
        - arm

########### pip binary packages for windows

.pkg_win_purepy: &pkg_win_purepy
    stage: pkg_purepy
    script:
        - call misc\continuous_integration\jobs\win\build_gpu_mod.bat
        - if NOT EXIST build (mkdir build) else (rmdir /S /Q build & mkdir build)
        - cd build
          # make PYTHON_PATH env variable used in cmake findPython consistent with WIN_PY_VER version used after to build the wheel package
        - FOR /F "tokens=*" %%O IN ('py -%WIN_PY_VER% -c "import sys;print(sys.executable)"') do (SET PYTHON_PATH=%%O)
        - 'cmake -G "Visual Studio 16 2019" -DBUILD_WRAPPER_MATLAB=OFF -DBUILD_WRAPPER_PYTHON=ON -DSLOW_TESTS=OFF -DCPACK_PACKAGE_VERSION=%VERSION% -DCMAKE_INSTALL_PREFIX=win_pkg_build -DBUILD_TESTING=OFF -DMATIO_LIB_FILE=C:/faust_libs/libmatio_standalone.lib -DREMOTE_DATA_URL="%DURL%" -DREMOTE_DATA_FILE="%DFILE%" -DEXPERIMENTAL_PKG=%EXPERIMENTAL_PKG% -DUSE_GPU_MOD=ON  -DCMAKE_PREFIX_PATH=../gpu_mod -DBUILD_MULTITHREAD=ON -DBUILD_FLOAT_PYX=ON -DCMAKE_BUILD_TYPE=%BUILD_CONFIG% -DVCOMPLIB_PATH=C:\faust_libs\vcomp140.dll ..'
        - cmake --build . --target FAUST --config %BUILD_CONFIG%
        - cmake --build . --target python_cpp --config %BUILD_CONFIG%
        - cd wrapper/python
          # only python3 for windows
          #- 'start %PYTHON2_PATH% setup.py bdist_wheel'
          #- 'start %PYTHON2_PATH% setup.py bdist_egg'
          #- 'call "%PYTHON_PATH%" setup.py bdist_wheel'
          #- 'call "%PYTHON_PATH%" setup.py bdist_egg'
        - py -%WIN_PY_VER% setup.py bdist_wheel
        - if "%GEN_EGG%" == "ON" (py -%WIN_PY_VER% setup.py bdist_egg)
    artifacts:
        paths:
            - build\wrapper\python # not only dist folder (with wheel package) in order to share .pyd with pkg_win(_release) ci job
    tags:
        - win10
    except:
        - schedules

pkg_win_purepy_rev:
    extends: .pkg_win_purepy
    variables: {BUILD_CONFIG: "Release", GIT_SUBMODULE_STRATEGY: recursive}
    before_script:
        - 'set VERSION=%CI_COMMIT_SHA:~0,8%'
        - 'set EXPERIMENTAL_PKG=ON'
    artifacts:
        expire_in: '1 week'
    except:
        - schedules
        - tags
    needs:
        - job: ctest_python
          artifacts: true

pkg_win_purepy_release:
    extends: .pkg_win_purepy
    variables: {BUILD_CONFIG: "Release", GIT_SUBMODULE_STRATEGY: recursive, EXPERIMENTAL_PKG: "OFF", WIN_PY_VER: '3.10'}
    before_script:
        - 'set VERSION=%CI_COMMIT_TAG%'
    artifacts:
        expire_in: '1 week'
    only:
        - tags

pkg_win_purepy_release_extra_pyver:
    extends: .pkg_win_purepy
    variables: {BUILD_CONFIG: "Release", GIT_SUBMODULE_STRATEGY: recursive, EXPERIMENTAL_PKG: "OFF", WIN_PY_VER: '3.11'}
    before_script:
        - 'set VERSION=%CI_COMMIT_TAG%'
    artifacts:
        expire_in: '1 week'
    only:
        - tags

test_macos_pkg_release:
  stage: pkg_test
  needs:
    - job: pkg_macos_release
      artifacts: true
  script:
    - sudo installer -pkg build/faust-$CI_COMMIT_TAG.pkg -target /
    - matlab -nojvm -nodisplay -r "disp(matfaust.version());disp(full(matfaust.rand(5,5))); exit;" | tee /tmp/faust && grep $CI_COMMIT_TAG /tmp/faust
    - python$MACOS_PY_VER -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5).toarray());"
    - python$MACOS_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'real')"
    - python$MACOS_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'complex')"
    - python$MACOS_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'float32')"
  only:
    - tags
  tags:
    - macos
    - macos_pkg_tester

test_linux_pkg_release:
  stage: pkg_test
  needs:
    - job: pkg_linux_release
      artifacts: true
    - job: pkg_linux_release_static
      artifacts: true
  script:
    # TODO: externalize in a script
    - if [[ -d "$HOME/matlab" ]];then rm -Rf $HOME/matlab;fi
    - sudo rpm -i --nodeps build/faust-$CI_COMMIT_TAG-x86_64.rpm
    - matlab -nojvm -nodisplay -r "disp(matfaust.version());disp(full(matfaust.rand(5,5))); exit;" | tee /tmp/faust && grep $CI_COMMIT_TAG /tmp/faust
    - python$NUX_PY_VER -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5).toarray());"
    - python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'real')"
    - python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'complex')"
    - python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'float32')"
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then matlab -nojvm -nodisplay -r "disp(matfaust.version());disp(full(matfaust.rand(5,5, 'dev', 'gpu'))); exit;" | tee -a /tmp/faust && grep $CI_COMMIT_TAG /tmp/faust;fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5, dev='gpu').toarray());";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'real')";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'complex')";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'float32')";fi
    - sudo rpm -e faust
    - sudo rpm -i --nodeps build/faust-$CI_COMMIT_TAG-static-x86_64.rpm
    - matlab -nojvm -nodisplay -r "disp(matfaust.version());disp(full(matfaust.rand(5,5))); exit;" | tee /tmp/faust && grep $CI_COMMIT_TAG /tmp/faust
    - python$NUX_PY_VER -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5).toarray());"
    - python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'real')"
    - python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'complex')"
    - python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'float32')"
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then matlab -nojvm -nodisplay -r "disp(matfaust.version());disp(full(matfaust.rand(5,5, 'dev', 'gpu'))); exit;" | tee -a /tmp/faust && grep $CI_COMMIT_TAG /tmp/faust;fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5, dev='gpu').toarray());";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'real')";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'complex')";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then python$NUX_PY_VER -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'float32')";fi
    - sudo rpm -e faust
  after_script:
    - sudo rpm -e faust
  only:
    - tags
  tags:
    - linux
    - matlab

# the windows NSIS installer test is disabled because "call .exe" is hanging down indefinitely
.test_win_pkg_release:
  stage: pkg_test
  needs:
    # TODO: externalize in a script
    - job: pkg_win_release
      artifacts: true
  script:
    - cd build
    - dir
      #- call 'build\faust-%CI_COMMIT_TAG%-amd64.exe' /S
    - python -c "import os; os.system(\"faust-%CI_COMMIT_TAG%-amd64.exe /S\")"
      # wait some time
    - timeout 20
    - dir 'C:\Program Files\Faust\'
      # the matlab test is disabled because the Windows VMs are not able to access the license server (VPN issue)
      #- matlab -nojvm -r "disp(matfaust.version());disp(full(matfaust.rand(5,5)));F=matfaust.rand(5,5);save(F, 'F.mat');exit;"
      #- python -c "from os.path import exists;from time import sleep; sleep(15); exit(0);if(exists('F.mat')) else exit(1)"
    - python -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5).toarray());"
    - python -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'real')"
    - python -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'complex')"
    - python -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'float32')"
      # execute GPU tests if the gitlab runner is tagged cuda
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5, dev='gpu').toarray());")
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"gpu\", \"double\")")
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"gpu\", \"float32\")")
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"gpu\", \"complex\")")
    - cd "C:\Program Files\Faust"
      #- call 'uninstall.exe' /S
    - python -c "import os; os.system('uninstall.exe /S')"
  only:
    - tags
  tags:
    - win10

.test_unix_purepy_pkg:
  stage: pkg_test
  script:
    - $JOB_PYTHON -m venv test_pyfaust-$CI_COMMIT_TAG
    - source test_pyfaust-$CI_COMMIT_TAG/bin/activate
    - PYVER=$($JOB_PYTHON --version | awk '{print $2}' | sed -e 's/\.//;s/\(.*\)\..*/\1/')
    - $JOB_PYTHON -m pip install --upgrade pip
    - SYS=$(if uname -a | grep -q Darwin; then echo macosx; else echo linux; fi)
      # avoid to build from sources scipy==1.10 and matplolib==3.6.3, either with py3.10 or 3.11
    - if [ "$SYS" = macosx -a "$PYVER" = "39" ]; then pip install scipy==1.9 matplotlib==3.5.3; fi
    - if [ "$SYS" = macosx -a "$PYVER" = "311" ]; then wget https://files.pythonhosted.org/packages/7a/23/13579b64ab458782a43e11e1ad095488458b8df099063ae07773666adada/scipy-1.10.0-cp311-cp311-macosx_10_15_x86_64.whl; mv scipy-1.10.0-cp311-cp311-macosx_10_15_x86_64.whl scipy-1.10.0-cp311-cp311-macosx_10_9_x86_64.whl; pip install scipy-1.10.0-cp311-cp311-macosx_10_9_x86_64.whl; fi
    - if [ "$SYS" = macosx -a "$JOB_PYTHON" = "python3.11" ]; then wget https://files.pythonhosted.org/packages/09/ac/f3c841a09bb7479832832472ef9ec49c2069f437d0266c1168d586eee601/matplotlib-3.6.3-cp311-cp311-macosx_10_12_x86_64.whl;mv matplotlib-3.6.3-cp311-cp311-macosx_10_12_x86_64.whl matplotlib-3.6.3-cp311-cp311-macosx_10_9_x86_64.whl;pip install matplotlib-3.6.3-cp311-cp311-macosx_10_9_x86_64.whl; fi
    - $JOB_PYTHON -m pip install --upgrade build/wrapper/python/dist/${PYFAUST_PKG_NAME}-$CI_COMMIT_TAG-*$PYVER*$SYS*.whl
    - $JOB_PYTHON -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5).toarray());"
    - $JOB_PYTHON -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'double')"
    - $JOB_PYTHON -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'float32')"
    - $JOB_PYTHON -c "import pyfaust.tests; pyfaust.tests.run_tests('cpu', 'complex')"
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then $JOB_PYTHON -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5, dev='gpu').toarray());";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then $JOB_PYTHON -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'real')";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then $JOB_PYTHON -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'complex')";fi
    - if echo $CI_RUNNER_TAGS | grep -w cuda; then $JOB_PYTHON -c "import pyfaust.tests; pyfaust.tests.run_tests('gpu', 'float32')";fi
  only:
    - tags

test_macos_purepy_release: # take care to keep this variable consistent with the version used in pkg_macos_purepy_release
  variables: {JOB_PYTHON: 'python3.10'}
  extends: .test_unix_purepy_pkg
  needs:
    - job: pkg_macos_purepy_release
      artifacts: true
  tags:
    - macos_pip_pkg_tester

test_macos_purepy_release_extra_pyver:
  variables: {JOB_PYTHON: 'python3.11'} # take care to keep this variable consistent with the version used in pkg_macos_purepy_release_extra_pyver
  extends: .test_unix_purepy_pkg
  needs:
    - job: pkg_macos_purepy_release_extra_pyver
      artifacts: true
  tags:
    - macos_pip_pkg_tester

test_nux_purepy_release:
  variables: {JOB_PYTHON: 'python3.10'}
  extends: .test_unix_purepy_pkg
  needs:
    - job: pkg_linux_purepy_release
      artifacts: true
  tags:
    - linux

test_nux_purepy_release_extra_pyver:
  variables: {JOB_PYTHON: 'python3.11'}
  extends: .test_unix_purepy_pkg
  needs:
    - job: pkg_linux_purepy_release_extra_pyver
      artifacts: true
  tags:
    - linux

test_nux_openblaso_purepy_release:
  variables: {JOB_PYTHON: 'python3.10', PYFAUST_PKG_NAME: 'pyfaust_openblaso'}
  extends: .test_unix_purepy_pkg
  needs:
    - job: pkg_linux_purepy_release_openblaso
      artifacts: true
  tags:
    - linux

test_win_purepy_pkg:
  variables: {JOB_PYTHON: 'py', WIN_PY_VER: '3.10'}
  stage: pkg_test
  script:
    # TODO: externalize in a script
    - 'cd build\wrapper\python\dist'
    - 'dir /B pyfaust*.whl > pkg_name.txt'
    - 'set /p PKG_NAME=<pkg_name.txt'
    - '%JOB_PYTHON% -%WIN_PY_VER% -m venv test_pyfaust-%CI_COMMIT_TAG%'
    - 'call test_pyfaust-%CI_COMMIT_TAG%\Scripts\activate'
    - python -m pip install %PKG_NAME%
    - python -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5).toarray());"
    - python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"cpu\", \"double\")"
    - python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"cpu\", \"float32\")"
    - python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"cpu\", \"complex\")"
      # execute GPU tests if the gitlab runner is tagged cuda
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust; print(pyfaust.version()); print(pyfaust.rand(5,5, dev='gpu').toarray());")
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"gpu\", \"double\")")
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"gpu\", \"float32\")")
    - if NOT "%CI_RUNNER_TAGS:cuda=%"=="%CI_RUNNER_TAGS%" (python -c "import pyfaust.tests; pyfaust.tests.run_tests(\"gpu\", \"complex\")")
  needs:
    - job: pkg_win_purepy_release
      artifacts: true
  only:
    - tags
  tags:
    - win10

test_win_purepy_pkg_extra_pyver:
  extends: test_win_purepy_pkg
  variables: {JOB_PYTHON: 'py', WIN_PY_VER: '3.11'}
  needs:
    - job: pkg_win_purepy_release_extra_pyver
      artifacts: true

pypi_pub:
  stage: pkg_pub
  script:
    - python3 -m pip install --user twine
    - cd build/wrapper/python/dist/
    - find
    - NUX_WHLS=$(ls *linux*x86_64.whl)
    - for NUX_WHL in $NUX_WHLS; do mv $NUX_WHL ${NUX_WHL%-*}-manylinux1_x86_64.whl; done # proper format for pypi (just linux is not accepted)
    - TOKEN=$(echo $PYPI_TOKEN | base64 -d)
    - echo -e "__token__\n$TOKEN" | python3 -m twine upload *.whl
  needs:
    - job: pkg_macos_purepy_release_torch_linked
      artifacts: true
    - job: pkg_macos_purepy_release
      artifacts: true
        #- job: pkg_linux_purepy_release_torch_linked
        #artifacts: true
    - job: pkg_linux_purepy_release
      artifacts: true
    - job: pkg_linux_purepy_release_extra_pyver
      artifacts: true
    - job: pkg_linux_purepy_release_openblaso
      artifacts: true
    - job: pkg_win_purepy_release
      artifacts: true
    - job: pkg_win_purepy_release_extra_pyver
      artifacts: true
    - job: pkg_macos_purepy_release_extra_pyver
      artifacts: true
    - job: test_nux_purepy_release
    - job: test_nux_purepy_release_extra_pyver
    - job: test_win_purepy_pkg
    - job: test_macos_purepy_release
    - job: test_macos_purepy_release_extra_pyver
    - job: test_win_purepy_pkg_extra_pyver
    - job: test_linux_pkg_release # all the packages for this version must be OK to have a go on pypi upload
    - job: test_macos_pkg_release
    - job: test_nux_openblaso_purepy_release
  only:
    - tags
  tags:
    - linux

#pkg_upload:
#  stage: pkg_pub
#  script:
#        - misc/continuous_integration/upload_pkg.sh
#  needs:
#    - job: pkg_macos_release
#      artifacts: true
#    - job: pkg_win_release
#      artifacts: true
#    - job: pkg_linux_release
#      artifacts: true
#  only:
#    - tags
#  tags:
#    - linux
#

conda_linux_pub:
  stage: conda_pkgs
  script:
    - misc/continuous_integration/conda_pkg/conda_build_upload_pyfaust.sh linux 3.10 misc/continuous_integration/conda_pkg/meta.yaml.in
    - conda env remove -n build_upload_pyfaust_venv_39
    - misc/continuous_integration/conda_pkg/conda_build_upload_pyfaust.sh linux 3.11 misc/continuous_integration/conda_pkg/meta.yaml.in
    - conda env remove -n build_upload_pyfaust_venv_311
  only:
    - tags
  tags:
    - conda_linux
  needs:
    - job: pypi_pub
      artifacts: false

.conda_win_pub:
  stage: conda_pkgs
  script:
    - start /wait git-bash -c "misc/continuous_integration/conda_pkg/conda_build_upload_pyfaust.sh win 3.10 misc/continuous_integration/conda_pkg/meta.yaml.in"
    - start /wait git-bash -c "misc/continuous_integration/conda_pkg/conda_build_upload_pyfaust.sh win 3.11 misc/continuous_integration/conda_pkg/meta.yaml.in"
  only:
    - tags
  tags:
    - conda_win10
  needs:
    - job: pypi_pub
      artifacts: false

conda_macosx_pub:
  stage: conda_pkgs
  script:
    - misc/continuous_integration/conda_pkg/conda_build_upload_pyfaust.sh macosx 3.10 misc/continuous_integration/conda_pkg/meta.yaml.in
    - conda env remove -n build_upload_pyfaust_venv_39
    - misc/continuous_integration/conda_pkg/conda_build_upload_pyfaust.sh macosx 3.11 misc/continuous_integration/conda_pkg/meta.yaml.in
    - conda env remove -n build_upload_pyfaust_venv_311
  only:
    - tags
  tags:
    - conda_macosx
  needs:
    - job: pypi_pub
      artifacts: false
